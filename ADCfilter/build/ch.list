
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f001 fcef 	bl	201c00 <__core_init>
  200222:	f000 ffcd 	bl	2011c0 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f001 fc89 	bl	201b80 <__init_ram_areas>
  20026e:	f001 fcbf 	bl	201bf0 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f001 fcfd 	bl	201c80 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f001 bca3 	b.w	201be0 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	080028ec 	.word	0x080028ec
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020044 	.word	0x20020044
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000b24 	.word	0x20000b24
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f001 fc1e 	bl	201b30 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f001 f87c 	bl	2013f0 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>

002002fc <__aeabi_drsub>:
  2002fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  200300:	e002      	b.n	200308 <__adddf3>
  200302:	bf00      	nop

00200304 <__aeabi_dsub>:
  200304:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00200308 <__adddf3>:
  200308:	b530      	push	{r4, r5, lr}
  20030a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  20030e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  200312:	ea94 0f05 	teq	r4, r5
  200316:	bf08      	it	eq
  200318:	ea90 0f02 	teqeq	r0, r2
  20031c:	bf1f      	itttt	ne
  20031e:	ea54 0c00 	orrsne.w	ip, r4, r0
  200322:	ea55 0c02 	orrsne.w	ip, r5, r2
  200326:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  20032a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  20032e:	f000 80e2 	beq.w	2004f6 <__adddf3+0x1ee>
  200332:	ea4f 5454 	mov.w	r4, r4, lsr #21
  200336:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  20033a:	bfb8      	it	lt
  20033c:	426d      	neglt	r5, r5
  20033e:	dd0c      	ble.n	20035a <__adddf3+0x52>
  200340:	442c      	add	r4, r5
  200342:	ea80 0202 	eor.w	r2, r0, r2
  200346:	ea81 0303 	eor.w	r3, r1, r3
  20034a:	ea82 0000 	eor.w	r0, r2, r0
  20034e:	ea83 0101 	eor.w	r1, r3, r1
  200352:	ea80 0202 	eor.w	r2, r0, r2
  200356:	ea81 0303 	eor.w	r3, r1, r3
  20035a:	2d36      	cmp	r5, #54	; 0x36
  20035c:	bf88      	it	hi
  20035e:	bd30      	pophi	{r4, r5, pc}
  200360:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200364:	ea4f 3101 	mov.w	r1, r1, lsl #12
  200368:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  20036c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  200370:	d002      	beq.n	200378 <__adddf3+0x70>
  200372:	4240      	negs	r0, r0
  200374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200378:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  20037c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  200380:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  200384:	d002      	beq.n	20038c <__adddf3+0x84>
  200386:	4252      	negs	r2, r2
  200388:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  20038c:	ea94 0f05 	teq	r4, r5
  200390:	f000 80a7 	beq.w	2004e2 <__adddf3+0x1da>
  200394:	f1a4 0401 	sub.w	r4, r4, #1
  200398:	f1d5 0e20 	rsbs	lr, r5, #32
  20039c:	db0d      	blt.n	2003ba <__adddf3+0xb2>
  20039e:	fa02 fc0e 	lsl.w	ip, r2, lr
  2003a2:	fa22 f205 	lsr.w	r2, r2, r5
  2003a6:	1880      	adds	r0, r0, r2
  2003a8:	f141 0100 	adc.w	r1, r1, #0
  2003ac:	fa03 f20e 	lsl.w	r2, r3, lr
  2003b0:	1880      	adds	r0, r0, r2
  2003b2:	fa43 f305 	asr.w	r3, r3, r5
  2003b6:	4159      	adcs	r1, r3
  2003b8:	e00e      	b.n	2003d8 <__adddf3+0xd0>
  2003ba:	f1a5 0520 	sub.w	r5, r5, #32
  2003be:	f10e 0e20 	add.w	lr, lr, #32
  2003c2:	2a01      	cmp	r2, #1
  2003c4:	fa03 fc0e 	lsl.w	ip, r3, lr
  2003c8:	bf28      	it	cs
  2003ca:	f04c 0c02 	orrcs.w	ip, ip, #2
  2003ce:	fa43 f305 	asr.w	r3, r3, r5
  2003d2:	18c0      	adds	r0, r0, r3
  2003d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  2003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  2003dc:	d507      	bpl.n	2003ee <__adddf3+0xe6>
  2003de:	f04f 0e00 	mov.w	lr, #0
  2003e2:	f1dc 0c00 	rsbs	ip, ip, #0
  2003e6:	eb7e 0000 	sbcs.w	r0, lr, r0
  2003ea:	eb6e 0101 	sbc.w	r1, lr, r1
  2003ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  2003f2:	d31b      	bcc.n	20042c <__adddf3+0x124>
  2003f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  2003f8:	d30c      	bcc.n	200414 <__adddf3+0x10c>
  2003fa:	0849      	lsrs	r1, r1, #1
  2003fc:	ea5f 0030 	movs.w	r0, r0, rrx
  200400:	ea4f 0c3c 	mov.w	ip, ip, rrx
  200404:	f104 0401 	add.w	r4, r4, #1
  200408:	ea4f 5244 	mov.w	r2, r4, lsl #21
  20040c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  200410:	f080 809a 	bcs.w	200548 <__adddf3+0x240>
  200414:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  200418:	bf08      	it	eq
  20041a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  20041e:	f150 0000 	adcs.w	r0, r0, #0
  200422:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200426:	ea41 0105 	orr.w	r1, r1, r5
  20042a:	bd30      	pop	{r4, r5, pc}
  20042c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  200430:	4140      	adcs	r0, r0
  200432:	eb41 0101 	adc.w	r1, r1, r1
  200436:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20043a:	f1a4 0401 	sub.w	r4, r4, #1
  20043e:	d1e9      	bne.n	200414 <__adddf3+0x10c>
  200440:	f091 0f00 	teq	r1, #0
  200444:	bf04      	itt	eq
  200446:	4601      	moveq	r1, r0
  200448:	2000      	moveq	r0, #0
  20044a:	fab1 f381 	clz	r3, r1
  20044e:	bf08      	it	eq
  200450:	3320      	addeq	r3, #32
  200452:	f1a3 030b 	sub.w	r3, r3, #11
  200456:	f1b3 0220 	subs.w	r2, r3, #32
  20045a:	da0c      	bge.n	200476 <__adddf3+0x16e>
  20045c:	320c      	adds	r2, #12
  20045e:	dd08      	ble.n	200472 <__adddf3+0x16a>
  200460:	f102 0c14 	add.w	ip, r2, #20
  200464:	f1c2 020c 	rsb	r2, r2, #12
  200468:	fa01 f00c 	lsl.w	r0, r1, ip
  20046c:	fa21 f102 	lsr.w	r1, r1, r2
  200470:	e00c      	b.n	20048c <__adddf3+0x184>
  200472:	f102 0214 	add.w	r2, r2, #20
  200476:	bfd8      	it	le
  200478:	f1c2 0c20 	rsble	ip, r2, #32
  20047c:	fa01 f102 	lsl.w	r1, r1, r2
  200480:	fa20 fc0c 	lsr.w	ip, r0, ip
  200484:	bfdc      	itt	le
  200486:	ea41 010c 	orrle.w	r1, r1, ip
  20048a:	4090      	lslle	r0, r2
  20048c:	1ae4      	subs	r4, r4, r3
  20048e:	bfa2      	ittt	ge
  200490:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  200494:	4329      	orrge	r1, r5
  200496:	bd30      	popge	{r4, r5, pc}
  200498:	ea6f 0404 	mvn.w	r4, r4
  20049c:	3c1f      	subs	r4, #31
  20049e:	da1c      	bge.n	2004da <__adddf3+0x1d2>
  2004a0:	340c      	adds	r4, #12
  2004a2:	dc0e      	bgt.n	2004c2 <__adddf3+0x1ba>
  2004a4:	f104 0414 	add.w	r4, r4, #20
  2004a8:	f1c4 0220 	rsb	r2, r4, #32
  2004ac:	fa20 f004 	lsr.w	r0, r0, r4
  2004b0:	fa01 f302 	lsl.w	r3, r1, r2
  2004b4:	ea40 0003 	orr.w	r0, r0, r3
  2004b8:	fa21 f304 	lsr.w	r3, r1, r4
  2004bc:	ea45 0103 	orr.w	r1, r5, r3
  2004c0:	bd30      	pop	{r4, r5, pc}
  2004c2:	f1c4 040c 	rsb	r4, r4, #12
  2004c6:	f1c4 0220 	rsb	r2, r4, #32
  2004ca:	fa20 f002 	lsr.w	r0, r0, r2
  2004ce:	fa01 f304 	lsl.w	r3, r1, r4
  2004d2:	ea40 0003 	orr.w	r0, r0, r3
  2004d6:	4629      	mov	r1, r5
  2004d8:	bd30      	pop	{r4, r5, pc}
  2004da:	fa21 f004 	lsr.w	r0, r1, r4
  2004de:	4629      	mov	r1, r5
  2004e0:	bd30      	pop	{r4, r5, pc}
  2004e2:	f094 0f00 	teq	r4, #0
  2004e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  2004ea:	bf06      	itte	eq
  2004ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  2004f0:	3401      	addeq	r4, #1
  2004f2:	3d01      	subne	r5, #1
  2004f4:	e74e      	b.n	200394 <__adddf3+0x8c>
  2004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  2004fa:	bf18      	it	ne
  2004fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  200500:	d029      	beq.n	200556 <__adddf3+0x24e>
  200502:	ea94 0f05 	teq	r4, r5
  200506:	bf08      	it	eq
  200508:	ea90 0f02 	teqeq	r0, r2
  20050c:	d005      	beq.n	20051a <__adddf3+0x212>
  20050e:	ea54 0c00 	orrs.w	ip, r4, r0
  200512:	bf04      	itt	eq
  200514:	4619      	moveq	r1, r3
  200516:	4610      	moveq	r0, r2
  200518:	bd30      	pop	{r4, r5, pc}
  20051a:	ea91 0f03 	teq	r1, r3
  20051e:	bf1e      	ittt	ne
  200520:	2100      	movne	r1, #0
  200522:	2000      	movne	r0, #0
  200524:	bd30      	popne	{r4, r5, pc}
  200526:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  20052a:	d105      	bne.n	200538 <__adddf3+0x230>
  20052c:	0040      	lsls	r0, r0, #1
  20052e:	4149      	adcs	r1, r1
  200530:	bf28      	it	cs
  200532:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  200536:	bd30      	pop	{r4, r5, pc}
  200538:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  20053c:	bf3c      	itt	cc
  20053e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  200542:	bd30      	popcc	{r4, r5, pc}
  200544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  200548:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  20054c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  200550:	f04f 0000 	mov.w	r0, #0
  200554:	bd30      	pop	{r4, r5, pc}
  200556:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  20055a:	bf1a      	itte	ne
  20055c:	4619      	movne	r1, r3
  20055e:	4610      	movne	r0, r2
  200560:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  200564:	bf1c      	itt	ne
  200566:	460b      	movne	r3, r1
  200568:	4602      	movne	r2, r0
  20056a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  20056e:	bf06      	itte	eq
  200570:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  200574:	ea91 0f03 	teqeq	r1, r3
  200578:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  20057c:	bd30      	pop	{r4, r5, pc}
  20057e:	bf00      	nop

00200580 <__aeabi_ui2d>:
  200580:	f090 0f00 	teq	r0, #0
  200584:	bf04      	itt	eq
  200586:	2100      	moveq	r1, #0
  200588:	4770      	bxeq	lr
  20058a:	b530      	push	{r4, r5, lr}
  20058c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  200590:	f104 0432 	add.w	r4, r4, #50	; 0x32
  200594:	f04f 0500 	mov.w	r5, #0
  200598:	f04f 0100 	mov.w	r1, #0
  20059c:	e750      	b.n	200440 <__adddf3+0x138>
  20059e:	bf00      	nop

002005a0 <__aeabi_i2d>:
  2005a0:	f090 0f00 	teq	r0, #0
  2005a4:	bf04      	itt	eq
  2005a6:	2100      	moveq	r1, #0
  2005a8:	4770      	bxeq	lr
  2005aa:	b530      	push	{r4, r5, lr}
  2005ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  2005b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  2005b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  2005b8:	bf48      	it	mi
  2005ba:	4240      	negmi	r0, r0
  2005bc:	f04f 0100 	mov.w	r1, #0
  2005c0:	e73e      	b.n	200440 <__adddf3+0x138>
  2005c2:	bf00      	nop

002005c4 <__aeabi_f2d>:
  2005c4:	0042      	lsls	r2, r0, #1
  2005c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  2005ca:	ea4f 0131 	mov.w	r1, r1, rrx
  2005ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
  2005d2:	bf1f      	itttt	ne
  2005d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  2005d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  2005dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  2005e0:	4770      	bxne	lr
  2005e2:	f092 0f00 	teq	r2, #0
  2005e6:	bf14      	ite	ne
  2005e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  2005ec:	4770      	bxeq	lr
  2005ee:	b530      	push	{r4, r5, lr}
  2005f0:	f44f 7460 	mov.w	r4, #896	; 0x380
  2005f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  2005f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  2005fc:	e720      	b.n	200440 <__adddf3+0x138>
  2005fe:	bf00      	nop

00200600 <__aeabi_ul2d>:
  200600:	ea50 0201 	orrs.w	r2, r0, r1
  200604:	bf08      	it	eq
  200606:	4770      	bxeq	lr
  200608:	b530      	push	{r4, r5, lr}
  20060a:	f04f 0500 	mov.w	r5, #0
  20060e:	e00a      	b.n	200626 <__aeabi_l2d+0x16>

00200610 <__aeabi_l2d>:
  200610:	ea50 0201 	orrs.w	r2, r0, r1
  200614:	bf08      	it	eq
  200616:	4770      	bxeq	lr
  200618:	b530      	push	{r4, r5, lr}
  20061a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  20061e:	d502      	bpl.n	200626 <__aeabi_l2d+0x16>
  200620:	4240      	negs	r0, r0
  200622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200626:	f44f 6480 	mov.w	r4, #1024	; 0x400
  20062a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  20062e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  200632:	f43f aedc 	beq.w	2003ee <__adddf3+0xe6>
  200636:	f04f 0203 	mov.w	r2, #3
  20063a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  20063e:	bf18      	it	ne
  200640:	3203      	addne	r2, #3
  200642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  200646:	bf18      	it	ne
  200648:	3203      	addne	r2, #3
  20064a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  20064e:	f1c2 0320 	rsb	r3, r2, #32
  200652:	fa00 fc03 	lsl.w	ip, r0, r3
  200656:	fa20 f002 	lsr.w	r0, r0, r2
  20065a:	fa01 fe03 	lsl.w	lr, r1, r3
  20065e:	ea40 000e 	orr.w	r0, r0, lr
  200662:	fa21 f102 	lsr.w	r1, r1, r2
  200666:	4414      	add	r4, r2
  200668:	e6c1      	b.n	2003ee <__adddf3+0xe6>
  20066a:	bf00      	nop

0020066c <__aeabi_dmul>:
  20066c:	b570      	push	{r4, r5, r6, lr}
  20066e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  200672:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  200676:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  20067a:	bf1d      	ittte	ne
  20067c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  200680:	ea94 0f0c 	teqne	r4, ip
  200684:	ea95 0f0c 	teqne	r5, ip
  200688:	f000 f8de 	bleq	200848 <__aeabi_dmul+0x1dc>
  20068c:	442c      	add	r4, r5
  20068e:	ea81 0603 	eor.w	r6, r1, r3
  200692:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  200696:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  20069a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  20069e:	bf18      	it	ne
  2006a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  2006a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  2006a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  2006ac:	d038      	beq.n	200720 <__aeabi_dmul+0xb4>
  2006ae:	fba0 ce02 	umull	ip, lr, r0, r2
  2006b2:	f04f 0500 	mov.w	r5, #0
  2006b6:	fbe1 e502 	umlal	lr, r5, r1, r2
  2006ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  2006be:	fbe0 e503 	umlal	lr, r5, r0, r3
  2006c2:	f04f 0600 	mov.w	r6, #0
  2006c6:	fbe1 5603 	umlal	r5, r6, r1, r3
  2006ca:	f09c 0f00 	teq	ip, #0
  2006ce:	bf18      	it	ne
  2006d0:	f04e 0e01 	orrne.w	lr, lr, #1
  2006d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  2006d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  2006dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  2006e0:	d204      	bcs.n	2006ec <__aeabi_dmul+0x80>
  2006e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  2006e6:	416d      	adcs	r5, r5
  2006e8:	eb46 0606 	adc.w	r6, r6, r6
  2006ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  2006f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  2006f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  2006f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  2006fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  200700:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  200704:	bf88      	it	hi
  200706:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  20070a:	d81e      	bhi.n	20074a <__aeabi_dmul+0xde>
  20070c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  200710:	bf08      	it	eq
  200712:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  200716:	f150 0000 	adcs.w	r0, r0, #0
  20071a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  20071e:	bd70      	pop	{r4, r5, r6, pc}
  200720:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  200724:	ea46 0101 	orr.w	r1, r6, r1
  200728:	ea40 0002 	orr.w	r0, r0, r2
  20072c:	ea81 0103 	eor.w	r1, r1, r3
  200730:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  200734:	bfc2      	ittt	gt
  200736:	ebd4 050c 	rsbsgt	r5, r4, ip
  20073a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  20073e:	bd70      	popgt	{r4, r5, r6, pc}
  200740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200744:	f04f 0e00 	mov.w	lr, #0
  200748:	3c01      	subs	r4, #1
  20074a:	f300 80ab 	bgt.w	2008a4 <__aeabi_dmul+0x238>
  20074e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  200752:	bfde      	ittt	le
  200754:	2000      	movle	r0, #0
  200756:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  20075a:	bd70      	pople	{r4, r5, r6, pc}
  20075c:	f1c4 0400 	rsb	r4, r4, #0
  200760:	3c20      	subs	r4, #32
  200762:	da35      	bge.n	2007d0 <__aeabi_dmul+0x164>
  200764:	340c      	adds	r4, #12
  200766:	dc1b      	bgt.n	2007a0 <__aeabi_dmul+0x134>
  200768:	f104 0414 	add.w	r4, r4, #20
  20076c:	f1c4 0520 	rsb	r5, r4, #32
  200770:	fa00 f305 	lsl.w	r3, r0, r5
  200774:	fa20 f004 	lsr.w	r0, r0, r4
  200778:	fa01 f205 	lsl.w	r2, r1, r5
  20077c:	ea40 0002 	orr.w	r0, r0, r2
  200780:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  200784:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  200788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  20078c:	fa21 f604 	lsr.w	r6, r1, r4
  200790:	eb42 0106 	adc.w	r1, r2, r6
  200794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  200798:	bf08      	it	eq
  20079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  20079e:	bd70      	pop	{r4, r5, r6, pc}
  2007a0:	f1c4 040c 	rsb	r4, r4, #12
  2007a4:	f1c4 0520 	rsb	r5, r4, #32
  2007a8:	fa00 f304 	lsl.w	r3, r0, r4
  2007ac:	fa20 f005 	lsr.w	r0, r0, r5
  2007b0:	fa01 f204 	lsl.w	r2, r1, r4
  2007b4:	ea40 0002 	orr.w	r0, r0, r2
  2007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2007bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  2007c0:	f141 0100 	adc.w	r1, r1, #0
  2007c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  2007c8:	bf08      	it	eq
  2007ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  2007ce:	bd70      	pop	{r4, r5, r6, pc}
  2007d0:	f1c4 0520 	rsb	r5, r4, #32
  2007d4:	fa00 f205 	lsl.w	r2, r0, r5
  2007d8:	ea4e 0e02 	orr.w	lr, lr, r2
  2007dc:	fa20 f304 	lsr.w	r3, r0, r4
  2007e0:	fa01 f205 	lsl.w	r2, r1, r5
  2007e4:	ea43 0302 	orr.w	r3, r3, r2
  2007e8:	fa21 f004 	lsr.w	r0, r1, r4
  2007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2007f0:	fa21 f204 	lsr.w	r2, r1, r4
  2007f4:	ea20 0002 	bic.w	r0, r0, r2
  2007f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  2007fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  200800:	bf08      	it	eq
  200802:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  200806:	bd70      	pop	{r4, r5, r6, pc}
  200808:	f094 0f00 	teq	r4, #0
  20080c:	d10f      	bne.n	20082e <__aeabi_dmul+0x1c2>
  20080e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  200812:	0040      	lsls	r0, r0, #1
  200814:	eb41 0101 	adc.w	r1, r1, r1
  200818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20081c:	bf08      	it	eq
  20081e:	3c01      	subeq	r4, #1
  200820:	d0f7      	beq.n	200812 <__aeabi_dmul+0x1a6>
  200822:	ea41 0106 	orr.w	r1, r1, r6
  200826:	f095 0f00 	teq	r5, #0
  20082a:	bf18      	it	ne
  20082c:	4770      	bxne	lr
  20082e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  200832:	0052      	lsls	r2, r2, #1
  200834:	eb43 0303 	adc.w	r3, r3, r3
  200838:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  20083c:	bf08      	it	eq
  20083e:	3d01      	subeq	r5, #1
  200840:	d0f7      	beq.n	200832 <__aeabi_dmul+0x1c6>
  200842:	ea43 0306 	orr.w	r3, r3, r6
  200846:	4770      	bx	lr
  200848:	ea94 0f0c 	teq	r4, ip
  20084c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200850:	bf18      	it	ne
  200852:	ea95 0f0c 	teqne	r5, ip
  200856:	d00c      	beq.n	200872 <__aeabi_dmul+0x206>
  200858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  20085c:	bf18      	it	ne
  20085e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200862:	d1d1      	bne.n	200808 <__aeabi_dmul+0x19c>
  200864:	ea81 0103 	eor.w	r1, r1, r3
  200868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  20086c:	f04f 0000 	mov.w	r0, #0
  200870:	bd70      	pop	{r4, r5, r6, pc}
  200872:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  200876:	bf06      	itte	eq
  200878:	4610      	moveq	r0, r2
  20087a:	4619      	moveq	r1, r3
  20087c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200880:	d019      	beq.n	2008b6 <__aeabi_dmul+0x24a>
  200882:	ea94 0f0c 	teq	r4, ip
  200886:	d102      	bne.n	20088e <__aeabi_dmul+0x222>
  200888:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  20088c:	d113      	bne.n	2008b6 <__aeabi_dmul+0x24a>
  20088e:	ea95 0f0c 	teq	r5, ip
  200892:	d105      	bne.n	2008a0 <__aeabi_dmul+0x234>
  200894:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  200898:	bf1c      	itt	ne
  20089a:	4610      	movne	r0, r2
  20089c:	4619      	movne	r1, r3
  20089e:	d10a      	bne.n	2008b6 <__aeabi_dmul+0x24a>
  2008a0:	ea81 0103 	eor.w	r1, r1, r3
  2008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2008a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  2008ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  2008b0:	f04f 0000 	mov.w	r0, #0
  2008b4:	bd70      	pop	{r4, r5, r6, pc}
  2008b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  2008ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  2008be:	bd70      	pop	{r4, r5, r6, pc}

002008c0 <__aeabi_ddiv>:
  2008c0:	b570      	push	{r4, r5, r6, lr}
  2008c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  2008c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  2008ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  2008ce:	bf1d      	ittte	ne
  2008d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  2008d4:	ea94 0f0c 	teqne	r4, ip
  2008d8:	ea95 0f0c 	teqne	r5, ip
  2008dc:	f000 f8a7 	bleq	200a2e <__aeabi_ddiv+0x16e>
  2008e0:	eba4 0405 	sub.w	r4, r4, r5
  2008e4:	ea81 0e03 	eor.w	lr, r1, r3
  2008e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  2008ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  2008f0:	f000 8088 	beq.w	200a04 <__aeabi_ddiv+0x144>
  2008f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  2008f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  2008fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  200900:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  200904:	ea4f 2202 	mov.w	r2, r2, lsl #8
  200908:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  20090c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  200910:	ea4f 2600 	mov.w	r6, r0, lsl #8
  200914:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  200918:	429d      	cmp	r5, r3
  20091a:	bf08      	it	eq
  20091c:	4296      	cmpeq	r6, r2
  20091e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  200922:	f504 7440 	add.w	r4, r4, #768	; 0x300
  200926:	d202      	bcs.n	20092e <__aeabi_ddiv+0x6e>
  200928:	085b      	lsrs	r3, r3, #1
  20092a:	ea4f 0232 	mov.w	r2, r2, rrx
  20092e:	1ab6      	subs	r6, r6, r2
  200930:	eb65 0503 	sbc.w	r5, r5, r3
  200934:	085b      	lsrs	r3, r3, #1
  200936:	ea4f 0232 	mov.w	r2, r2, rrx
  20093a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  20093e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  200942:	ebb6 0e02 	subs.w	lr, r6, r2
  200946:	eb75 0e03 	sbcs.w	lr, r5, r3
  20094a:	bf22      	ittt	cs
  20094c:	1ab6      	subcs	r6, r6, r2
  20094e:	4675      	movcs	r5, lr
  200950:	ea40 000c 	orrcs.w	r0, r0, ip
  200954:	085b      	lsrs	r3, r3, #1
  200956:	ea4f 0232 	mov.w	r2, r2, rrx
  20095a:	ebb6 0e02 	subs.w	lr, r6, r2
  20095e:	eb75 0e03 	sbcs.w	lr, r5, r3
  200962:	bf22      	ittt	cs
  200964:	1ab6      	subcs	r6, r6, r2
  200966:	4675      	movcs	r5, lr
  200968:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  20096c:	085b      	lsrs	r3, r3, #1
  20096e:	ea4f 0232 	mov.w	r2, r2, rrx
  200972:	ebb6 0e02 	subs.w	lr, r6, r2
  200976:	eb75 0e03 	sbcs.w	lr, r5, r3
  20097a:	bf22      	ittt	cs
  20097c:	1ab6      	subcs	r6, r6, r2
  20097e:	4675      	movcs	r5, lr
  200980:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  200984:	085b      	lsrs	r3, r3, #1
  200986:	ea4f 0232 	mov.w	r2, r2, rrx
  20098a:	ebb6 0e02 	subs.w	lr, r6, r2
  20098e:	eb75 0e03 	sbcs.w	lr, r5, r3
  200992:	bf22      	ittt	cs
  200994:	1ab6      	subcs	r6, r6, r2
  200996:	4675      	movcs	r5, lr
  200998:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  20099c:	ea55 0e06 	orrs.w	lr, r5, r6
  2009a0:	d018      	beq.n	2009d4 <__aeabi_ddiv+0x114>
  2009a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  2009a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  2009aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  2009ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  2009b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  2009b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  2009ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  2009be:	d1c0      	bne.n	200942 <__aeabi_ddiv+0x82>
  2009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  2009c4:	d10b      	bne.n	2009de <__aeabi_ddiv+0x11e>
  2009c6:	ea41 0100 	orr.w	r1, r1, r0
  2009ca:	f04f 0000 	mov.w	r0, #0
  2009ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  2009d2:	e7b6      	b.n	200942 <__aeabi_ddiv+0x82>
  2009d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  2009d8:	bf04      	itt	eq
  2009da:	4301      	orreq	r1, r0
  2009dc:	2000      	moveq	r0, #0
  2009de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  2009e2:	bf88      	it	hi
  2009e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  2009e8:	f63f aeaf 	bhi.w	20074a <__aeabi_dmul+0xde>
  2009ec:	ebb5 0c03 	subs.w	ip, r5, r3
  2009f0:	bf04      	itt	eq
  2009f2:	ebb6 0c02 	subseq.w	ip, r6, r2
  2009f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  2009fa:	f150 0000 	adcs.w	r0, r0, #0
  2009fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200a02:	bd70      	pop	{r4, r5, r6, pc}
  200a04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  200a08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  200a0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  200a10:	bfc2      	ittt	gt
  200a12:	ebd4 050c 	rsbsgt	r5, r4, ip
  200a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  200a1a:	bd70      	popgt	{r4, r5, r6, pc}
  200a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200a20:	f04f 0e00 	mov.w	lr, #0
  200a24:	3c01      	subs	r4, #1
  200a26:	e690      	b.n	20074a <__aeabi_dmul+0xde>
  200a28:	ea45 0e06 	orr.w	lr, r5, r6
  200a2c:	e68d      	b.n	20074a <__aeabi_dmul+0xde>
  200a2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200a32:	ea94 0f0c 	teq	r4, ip
  200a36:	bf08      	it	eq
  200a38:	ea95 0f0c 	teqeq	r5, ip
  200a3c:	f43f af3b 	beq.w	2008b6 <__aeabi_dmul+0x24a>
  200a40:	ea94 0f0c 	teq	r4, ip
  200a44:	d10a      	bne.n	200a5c <__aeabi_ddiv+0x19c>
  200a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  200a4a:	f47f af34 	bne.w	2008b6 <__aeabi_dmul+0x24a>
  200a4e:	ea95 0f0c 	teq	r5, ip
  200a52:	f47f af25 	bne.w	2008a0 <__aeabi_dmul+0x234>
  200a56:	4610      	mov	r0, r2
  200a58:	4619      	mov	r1, r3
  200a5a:	e72c      	b.n	2008b6 <__aeabi_dmul+0x24a>
  200a5c:	ea95 0f0c 	teq	r5, ip
  200a60:	d106      	bne.n	200a70 <__aeabi_ddiv+0x1b0>
  200a62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  200a66:	f43f aefd 	beq.w	200864 <__aeabi_dmul+0x1f8>
  200a6a:	4610      	mov	r0, r2
  200a6c:	4619      	mov	r1, r3
  200a6e:	e722      	b.n	2008b6 <__aeabi_dmul+0x24a>
  200a70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  200a74:	bf18      	it	ne
  200a76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200a7a:	f47f aec5 	bne.w	200808 <__aeabi_dmul+0x19c>
  200a7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  200a82:	f47f af0d 	bne.w	2008a0 <__aeabi_dmul+0x234>
  200a86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  200a8a:	f47f aeeb 	bne.w	200864 <__aeabi_dmul+0x1f8>
  200a8e:	e712      	b.n	2008b6 <__aeabi_dmul+0x24a>

00200a90 <__aeabi_d2iz>:
  200a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
  200a94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  200a98:	d215      	bcs.n	200ac6 <__aeabi_d2iz+0x36>
  200a9a:	d511      	bpl.n	200ac0 <__aeabi_d2iz+0x30>
  200a9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  200aa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  200aa4:	d912      	bls.n	200acc <__aeabi_d2iz+0x3c>
  200aa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  200aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  200aae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  200ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200ab6:	fa23 f002 	lsr.w	r0, r3, r2
  200aba:	bf18      	it	ne
  200abc:	4240      	negne	r0, r0
  200abe:	4770      	bx	lr
  200ac0:	f04f 0000 	mov.w	r0, #0
  200ac4:	4770      	bx	lr
  200ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  200aca:	d105      	bne.n	200ad8 <__aeabi_d2iz+0x48>
  200acc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  200ad0:	bf08      	it	eq
  200ad2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  200ad6:	4770      	bx	lr
  200ad8:	f04f 0000 	mov.w	r0, #0
  200adc:	4770      	bx	lr
  200ade:	bf00      	nop

00200ae0 <adcerrorcallback.lto_priv.42>:
  }
}


/* ADC errors callback, should never happen */
static void adcerrorcallback(ADCDriver *adcp, adcerror_t err) {
  200ae0:	4770      	bx	lr
  200ae2:	bf00      	nop
	...

00200af0 <adccallback.lto_priv.41>:
{
  200af0:	b5f0      	push	{r4, r5, r6, r7, lr}
B[i] = value;
  200af2:	4d3a      	ldr	r5, [pc, #232]	; (200bdc <adccallback.lto_priv.41+0xec>)
  if (start_flag == false ) // if( !start_flag )
  200af4:	4e3a      	ldr	r6, [pc, #232]	; (200be0 <adccallback.lto_priv.41+0xf0>)
B[i] = value;
  200af6:	682b      	ldr	r3, [r5, #0]
  adcsample_t val = buffer[0];
  200af8:	880c      	ldrh	r4, [r1, #0]
  value = (uint16_t) val;
  200afa:	4f3a      	ldr	r7, [pc, #232]	; (200be4 <adccallback.lto_priv.41+0xf4>)
i +=1;
  200afc:	1c5a      	adds	r2, r3, #1
B[i] = value;
  200afe:	483a      	ldr	r0, [pc, #232]	; (200be8 <adccallback.lto_priv.41+0xf8>)
  if (start_flag == false ) // if( !start_flag )
  200b00:	7831      	ldrb	r1, [r6, #0]
  value = (uint16_t) val;
  200b02:	803c      	strh	r4, [r7, #0]
i +=1;
  200b04:	602a      	str	r2, [r5, #0]
B[i] = value;
  200b06:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
  if (start_flag == false ) // if( !start_flag )
  200b0a:	b931      	cbnz	r1, 200b1a <adccallback.lto_priv.41+0x2a>
	  if( i == WINDOW-1 )// if = 20
  200b0c:	2a13      	cmp	r2, #19
  200b0e:	d025      	beq.n	200b5c <adccallback.lto_priv.41+0x6c>
	  else if( i == WINDOW ) //if 21
  200b10:	2a14      	cmp	r2, #20
  200b12:	d049      	beq.n	200ba8 <adccallback.lto_priv.41+0xb8>
	  start_flag = true;
  200b14:	2301      	movs	r3, #1
  200b16:	7033      	strb	r3, [r6, #0]
  200b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  200b1a:	4603      	mov	r3, r0
  200b1c:	f100 0126 	add.w	r1, r0, #38	; 0x26
		  B[k]= B[k+1];  // rewrite
  200b20:	885a      	ldrh	r2, [r3, #2]
  200b22:	f823 2b02 	strh.w	r2, [r3], #2
	  for (k=0; k<WINDOW-1; k++)
  200b26:	428b      	cmp	r3, r1
  200b28:	d1fa      	bne.n	200b20 <adccallback.lto_priv.41+0x30>
  200b2a:	4e30      	ldr	r6, [pc, #192]	; (200bec <adccallback.lto_priv.41+0xfc>)
  200b2c:	2713      	movs	r7, #19
  200b2e:	4a30      	ldr	r2, [pc, #192]	; (200bf0 <adccallback.lto_priv.41+0x100>)
	  B[WINDOW-1] = value;
  200b30:	2100      	movs	r1, #0
  200b32:	84c4      	strh	r4, [r0, #38]	; 0x26
  200b34:	6037      	str	r7, [r6, #0]
		  sum = sum + B[x];
  200b36:	f832 0f02 	ldrh.w	r0, [r2, #2]!
	  for (x=0; x<=WINDOW-1; x++)
  200b3a:	429a      	cmp	r2, r3
		  sum = sum + B[x];
  200b3c:	4401      	add	r1, r0
	  for (x=0; x<=WINDOW-1; x++)
  200b3e:	d1fa      	bne.n	200b36 <adccallback.lto_priv.41+0x46>
	  av = sum/WINDOW;
  200b40:	4b2c      	ldr	r3, [pc, #176]	; (200bf4 <adccallback.lto_priv.41+0x104>)
  200b42:	2614      	movs	r6, #20
  200b44:	482c      	ldr	r0, [pc, #176]	; (200bf8 <adccallback.lto_priv.41+0x108>)
	  i = 0;
  200b46:	2200      	movs	r2, #0
	  av = sum/WINDOW;
  200b48:	fba3 4301 	umull	r4, r3, r3, r1
  200b4c:	4f2b      	ldr	r7, [pc, #172]	; (200bfc <adccallback.lto_priv.41+0x10c>)
  200b4e:	4c2c      	ldr	r4, [pc, #176]	; (200c00 <adccallback.lto_priv.41+0x110>)
  200b50:	091b      	lsrs	r3, r3, #4
  200b52:	6039      	str	r1, [r7, #0]
  200b54:	6026      	str	r6, [r4, #0]
  200b56:	8003      	strh	r3, [r0, #0]
	  i = 0;
  200b58:	602a      	str	r2, [r5, #0]
  200b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  200b5c:	4d27      	ldr	r5, [pc, #156]	; (200bfc <adccallback.lto_priv.41+0x10c>)
  200b5e:	1e82      	subs	r2, r0, #2
  200b60:	f100 0426 	add.w	r4, r0, #38	; 0x26
  200b64:	682b      	ldr	r3, [r5, #0]
			  sum = sum + B[x];
  200b66:	f832 1f02 	ldrh.w	r1, [r2, #2]!
		  for (x=0; x<=WINDOW-1; x++)
  200b6a:	4294      	cmp	r4, r2
			  sum = sum + B[x];
  200b6c:	440b      	add	r3, r1
		  for (x=0; x<=WINDOW-1; x++)
  200b6e:	d1fa      	bne.n	200b66 <adccallback.lto_priv.41+0x76>
		  av = sum/WINDOW;
  200b70:	4920      	ldr	r1, [pc, #128]	; (200bf4 <adccallback.lto_priv.41+0x104>)
  200b72:	f04f 0c14 	mov.w	ip, #20
  200b76:	4f20      	ldr	r7, [pc, #128]	; (200bf8 <adccallback.lto_priv.41+0x108>)
		  sum = 0;
  200b78:	2400      	movs	r4, #0
		  av = sum/WINDOW;
  200b7a:	fba1 1303 	umull	r1, r3, r1, r3
  200b7e:	f8df e080 	ldr.w	lr, [pc, #128]	; 200c00 <adccallback.lto_priv.41+0x110>
		  sum = 0;
  200b82:	602c      	str	r4, [r5, #0]
		  av = sum/WINDOW;
  200b84:	0919      	lsrs	r1, r3, #4
  200b86:	4b18      	ldr	r3, [pc, #96]	; (200be8 <adccallback.lto_priv.41+0xf8>)
  200b88:	f8ce c000 	str.w	ip, [lr]
  200b8c:	8039      	strh	r1, [r7, #0]
			  B[k]= B[k+1];  // rewrite
  200b8e:	8859      	ldrh	r1, [r3, #2]
  200b90:	f823 1b02 	strh.w	r1, [r3], #2
		  for (k=0; k<WINDOW-1; k++)
  200b94:	429a      	cmp	r2, r3
  200b96:	d1fa      	bne.n	200b8e <adccallback.lto_priv.41+0x9e>
		  B[WINDOW-1] = 0;	// last element
  200b98:	2300      	movs	r3, #0
  200b9a:	4a14      	ldr	r2, [pc, #80]	; (200bec <adccallback.lto_priv.41+0xfc>)
  200b9c:	2113      	movs	r1, #19
  200b9e:	84c3      	strh	r3, [r0, #38]	; 0x26
	  start_flag = true;
  200ba0:	2301      	movs	r3, #1
  200ba2:	6011      	str	r1, [r2, #0]
  200ba4:	7033      	strb	r3, [r6, #0]
  200ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  200ba8:	4d14      	ldr	r5, [pc, #80]	; (200bfc <adccallback.lto_priv.41+0x10c>)
  200baa:	1e83      	subs	r3, r0, #2
  200bac:	f100 0726 	add.w	r7, r0, #38	; 0x26
		  B[WINDOW-1] = value; // last (20) element = value
  200bb0:	84c4      	strh	r4, [r0, #38]	; 0x26
  200bb2:	682a      	ldr	r2, [r5, #0]
			  sum = sum + B[x];
  200bb4:	f833 1f02 	ldrh.w	r1, [r3, #2]!
		  for (x=0; x<=WINDOW-1; x++)
  200bb8:	429f      	cmp	r7, r3
			  sum = sum + B[x];
  200bba:	440a      	add	r2, r1
		  for (x=0; x<=WINDOW-1; x++)
  200bbc:	d1fa      	bne.n	200bb4 <adccallback.lto_priv.41+0xc4>
		  av = sum/WINDOW;
  200bbe:	490d      	ldr	r1, [pc, #52]	; (200bf4 <adccallback.lto_priv.41+0x104>)
  200bc0:	2014      	movs	r0, #20
  200bc2:	4b0d      	ldr	r3, [pc, #52]	; (200bf8 <adccallback.lto_priv.41+0x108>)
		  sum = 0;
  200bc4:	2400      	movs	r4, #0
		  av = sum/WINDOW;
  200bc6:	fba1 1202 	umull	r1, r2, r1, r2
  200bca:	490d      	ldr	r1, [pc, #52]	; (200c00 <adccallback.lto_priv.41+0x110>)
		  sum = 0;
  200bcc:	602c      	str	r4, [r5, #0]
		  av = sum/WINDOW;
  200bce:	0912      	lsrs	r2, r2, #4
  200bd0:	6008      	str	r0, [r1, #0]
  200bd2:	801a      	strh	r2, [r3, #0]
	  start_flag = true;
  200bd4:	2301      	movs	r3, #1
  200bd6:	7033      	strb	r3, [r6, #0]
  200bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  200bda:	bf00      	nop
  200bdc:	20000828 	.word	0x20000828
  200be0:	20000830 	.word	0x20000830
  200be4:	20000ac0 	.word	0x20000ac0
  200be8:	20000800 	.word	0x20000800
  200bec:	2000082c 	.word	0x2000082c
  200bf0:	200007fe 	.word	0x200007fe
  200bf4:	cccccccd 	.word	0xcccccccd
  200bf8:	2000089c 	.word	0x2000089c
  200bfc:	20000834 	.word	0x20000834
  200c00:	20000838 	.word	0x20000838
	...

00200c10 <notify3.lto_priv.40>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
  200c10:	4a02      	ldr	r2, [pc, #8]	; (200c1c <notify3.lto_priv.40+0xc>)
  200c12:	6813      	ldr	r3, [r2, #0]
  200c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  200c18:	6013      	str	r3, [r2, #0]
  200c1a:	4770      	bx	lr
  200c1c:	40004800 	.word	0x40004800

00200c20 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200c20:	2320      	movs	r3, #32
  200c22:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  200c26:	4b11      	ldr	r3, [pc, #68]	; (200c6c <_port_irq_epilogue+0x4c>)
  200c28:	685b      	ldr	r3, [r3, #4]
  200c2a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  200c2e:	d102      	bne.n	200c36 <_port_irq_epilogue+0x16>
  200c30:	f383 8811 	msr	BASEPRI, r3
  200c34:	4770      	bx	lr
void _port_irq_epilogue(void) {
  200c36:	b480      	push	{r7}
  200c38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  200c3a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  200c3e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  200c42:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  200c46:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  200c4a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  200c4e:	4a08      	ldr	r2, [pc, #32]	; (200c70 <_port_irq_epilogue+0x50>)
  200c50:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  200c52:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  200c54:	6889      	ldr	r1, [r1, #8]
  200c56:	6892      	ldr	r2, [r2, #8]
  200c58:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  200c5a:	bf8c      	ite	hi
  200c5c:	4a05      	ldrhi	r2, [pc, #20]	; (200c74 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  200c5e:	4a06      	ldrls	r2, [pc, #24]	; (200c78 <_port_irq_epilogue+0x58>)
  200c60:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  200c64:	46bd      	mov	sp, r7
  200c66:	bc80      	pop	{r7}
  200c68:	4770      	bx	lr
  200c6a:	bf00      	nop
  200c6c:	e000ed00 	.word	0xe000ed00
  200c70:	200008a0 	.word	0x200008a0
  200c74:	002002f5 	.word	0x002002f5
  200c78:	002002f8 	.word	0x002002f8
  200c7c:	00000000 	.word	0x00000000

00200c80 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
  200c80:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
  200c82:	4d17      	ldr	r5, [pc, #92]	; (200ce0 <VectorB4+0x60>)
  200c84:	69ab      	ldr	r3, [r5, #24]
  200c86:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  200c88:	68da      	ldr	r2, [r3, #12]
  200c8a:	4014      	ands	r4, r2
  200c8c:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
  200c8e:	43d2      	mvns	r2, r2
  200c90:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  200c92:	07a3      	lsls	r3, r4, #30
  200c94:	d504      	bpl.n	200ca0 <VectorB4+0x20>
      (pwmp->config->channels[0].callback != NULL))
  200c96:	686b      	ldr	r3, [r5, #4]
  200c98:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  200c9a:	b10b      	cbz	r3, 200ca0 <VectorB4+0x20>
    pwmp->config->channels[0].callback(pwmp);
  200c9c:	4628      	mov	r0, r5
  200c9e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  200ca0:	0760      	lsls	r0, r4, #29
  200ca2:	d504      	bpl.n	200cae <VectorB4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
  200ca4:	686b      	ldr	r3, [r5, #4]
  200ca6:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  200ca8:	b10b      	cbz	r3, 200cae <VectorB4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
  200caa:	480d      	ldr	r0, [pc, #52]	; (200ce0 <VectorB4+0x60>)
  200cac:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  200cae:	0721      	lsls	r1, r4, #28
  200cb0:	d504      	bpl.n	200cbc <VectorB4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
  200cb2:	686b      	ldr	r3, [r5, #4]
  200cb4:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  200cb6:	b10b      	cbz	r3, 200cbc <VectorB4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
  200cb8:	4809      	ldr	r0, [pc, #36]	; (200ce0 <VectorB4+0x60>)
  200cba:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  200cbc:	06e2      	lsls	r2, r4, #27
  200cbe:	d504      	bpl.n	200cca <VectorB4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
  200cc0:	686b      	ldr	r3, [r5, #4]
  200cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  200cc4:	b10b      	cbz	r3, 200cca <VectorB4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
  200cc6:	4806      	ldr	r0, [pc, #24]	; (200ce0 <VectorB4+0x60>)
  200cc8:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
  200cca:	07e3      	lsls	r3, r4, #31
  200ccc:	d504      	bpl.n	200cd8 <VectorB4+0x58>
  200cce:	686b      	ldr	r3, [r5, #4]
  200cd0:	689b      	ldr	r3, [r3, #8]
  200cd2:	b10b      	cbz	r3, 200cd8 <VectorB4+0x58>
    pwmp->config->callback(pwmp);
  200cd4:	4802      	ldr	r0, [pc, #8]	; (200ce0 <VectorB4+0x60>)
  200cd6:	4798      	blx	r3
}
  200cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
  200cdc:	f7ff bfa0 	b.w	200c20 <_port_irq_epilogue>
  200ce0:	20000880 	.word	0x20000880
	...

00200cf0 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
  200cf0:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  200cf2:	4b0b      	ldr	r3, [pc, #44]	; (200d20 <VectorB8+0x30>)
  200cf4:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  200cf6:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  200cf8:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  200cfa:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  200cfc:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  200cfe:	d107      	bne.n	200d10 <VectorB8+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  200d00:	2002      	movs	r0, #2
  200d02:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  200d04:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  200d06:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  200d08:	68d1      	ldr	r1, [r2, #12]
  200d0a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  200d0e:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  200d10:	685b      	ldr	r3, [r3, #4]
  200d12:	4803      	ldr	r0, [pc, #12]	; (200d20 <VectorB8+0x30>)
  200d14:	685b      	ldr	r3, [r3, #4]
  200d16:	4798      	blx	r3
}
  200d18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200d1c:	f7ff bf80 	b.w	200c20 <_port_irq_epilogue>
  200d20:	20000870 	.word	0x20000870
	...

00200d30 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
  200d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200d32:	2720      	movs	r7, #32
  200d34:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  200d38:	4d12      	ldr	r5, [pc, #72]	; (200d84 <SysTick_Handler+0x54>)
  200d3a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200d3c:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  200d3e:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200d40:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  200d44:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200d46:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  200d48:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200d4a:	d013      	beq.n	200d74 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  200d4c:	891c      	ldrh	r4, [r3, #8]
  200d4e:	3c01      	subs	r4, #1
  200d50:	b2a4      	uxth	r4, r4
  200d52:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  200d54:	b974      	cbnz	r4, 200d74 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  200d56:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  200d58:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  200d5a:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  200d5c:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  200d5e:	61ea      	str	r2, [r5, #28]
  200d60:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  200d64:	6918      	ldr	r0, [r3, #16]
  200d66:	4788      	blx	r1
  200d68:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  200d6c:	69eb      	ldr	r3, [r5, #28]
  200d6e:	891a      	ldrh	r2, [r3, #8]
  200d70:	2a00      	cmp	r2, #0
  200d72:	d0f0      	beq.n	200d56 <SysTick_Handler+0x26>
  200d74:	2300      	movs	r3, #0
  200d76:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
  200d7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  200d7e:	f7ff bf4f 	b.w	200c20 <_port_irq_epilogue>
  200d82:	bf00      	nop
  200d84:	200008a0 	.word	0x200008a0
	...

00200d90 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200d90:	4b08      	ldr	r3, [pc, #32]	; (200db4 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
  200d92:	4809      	ldr	r0, [pc, #36]	; (200db8 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200d94:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
  200d96:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200d98:	0d89      	lsrs	r1, r1, #22
  200d9a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  200d9e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
  200da0:	058c      	lsls	r4, r1, #22
  200da2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
  200da4:	b10a      	cbz	r2, 200daa <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
  200da6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  200da8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
  200daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200dae:	f7ff bf37 	b.w	200c20 <_port_irq_epilogue>
  200db2:	bf00      	nop
  200db4:	40026400 	.word	0x40026400
  200db8:	20000a10 	.word	0x20000a10
  200dbc:	00000000 	.word	0x00000000

00200dc0 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200dc0:	4b08      	ldr	r3, [pc, #32]	; (200de4 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
  200dc2:	4809      	ldr	r0, [pc, #36]	; (200de8 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200dc4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
  200dc6:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200dc8:	0c09      	lsrs	r1, r1, #16
  200dca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  200dce:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
  200dd0:	040c      	lsls	r4, r1, #16
  200dd2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
  200dd4:	b10a      	cbz	r2, 200dda <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
  200dd6:	6f40      	ldr	r0, [r0, #116]	; 0x74
  200dd8:	4790      	blx	r2
}
  200dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200dde:	f7ff bf1f 	b.w	200c20 <_port_irq_epilogue>
  200de2:	bf00      	nop
  200de4:	40026400 	.word	0x40026400
  200de8:	20000a10 	.word	0x20000a10
  200dec:	00000000 	.word	0x00000000

00200df0 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200df0:	4b08      	ldr	r3, [pc, #32]	; (200e14 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
  200df2:	4809      	ldr	r0, [pc, #36]	; (200e18 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200df4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
  200df6:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200df8:	0989      	lsrs	r1, r1, #6
  200dfa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  200dfe:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
  200e00:	018c      	lsls	r4, r1, #6
  200e02:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
  200e04:	b10a      	cbz	r2, 200e0a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
  200e06:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  200e08:	4790      	blx	r2
}
  200e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200e0e:	f7ff bf07 	b.w	200c20 <_port_irq_epilogue>
  200e12:	bf00      	nop
  200e14:	40026400 	.word	0x40026400
  200e18:	20000a10 	.word	0x20000a10
  200e1c:	00000000 	.word	0x00000000

00200e20 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  200e20:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200e22:	4b07      	ldr	r3, [pc, #28]	; (200e40 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
  200e24:	4807      	ldr	r0, [pc, #28]	; (200e44 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200e26:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
  200e28:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200e2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
  200e2e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
  200e30:	b10a      	cbz	r2, 200e36 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
  200e32:	6e40      	ldr	r0, [r0, #100]	; 0x64
  200e34:	4790      	blx	r2
}
  200e36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200e3a:	f7ff bef1 	b.w	200c20 <_port_irq_epilogue>
  200e3e:	bf00      	nop
  200e40:	40026400 	.word	0x40026400
  200e44:	20000a10 	.word	0x20000a10
	...

00200e50 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200e50:	4b08      	ldr	r3, [pc, #32]	; (200e74 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
  200e52:	4809      	ldr	r0, [pc, #36]	; (200e78 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200e54:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
  200e56:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200e58:	0d89      	lsrs	r1, r1, #22
  200e5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  200e5e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
  200e60:	058c      	lsls	r4, r1, #22
  200e62:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
  200e64:	b10a      	cbz	r2, 200e6a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
  200e66:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  200e68:	4790      	blx	r2
}
  200e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200e6e:	f7ff bed7 	b.w	200c20 <_port_irq_epilogue>
  200e72:	bf00      	nop
  200e74:	40026400 	.word	0x40026400
  200e78:	20000a10 	.word	0x20000a10
  200e7c:	00000000 	.word	0x00000000

00200e80 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200e80:	4b08      	ldr	r3, [pc, #32]	; (200ea4 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
  200e82:	4809      	ldr	r0, [pc, #36]	; (200ea8 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200e84:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
  200e86:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200e88:	0c09      	lsrs	r1, r1, #16
  200e8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  200e8e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
  200e90:	040c      	lsls	r4, r1, #16
  200e92:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
  200e94:	b10a      	cbz	r2, 200e9a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
  200e96:	6d40      	ldr	r0, [r0, #84]	; 0x54
  200e98:	4790      	blx	r2
}
  200e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200e9e:	f7ff bebf 	b.w	200c20 <_port_irq_epilogue>
  200ea2:	bf00      	nop
  200ea4:	40026400 	.word	0x40026400
  200ea8:	20000a10 	.word	0x20000a10
  200eac:	00000000 	.word	0x00000000

00200eb0 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200eb0:	4b08      	ldr	r3, [pc, #32]	; (200ed4 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
  200eb2:	4809      	ldr	r0, [pc, #36]	; (200ed8 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200eb4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
  200eb6:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200eb8:	0989      	lsrs	r1, r1, #6
  200eba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  200ebe:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
  200ec0:	018c      	lsls	r4, r1, #6
  200ec2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
  200ec4:	b10a      	cbz	r2, 200eca <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
  200ec6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  200ec8:	4790      	blx	r2
}
  200eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200ece:	f7ff bea7 	b.w	200c20 <_port_irq_epilogue>
  200ed2:	bf00      	nop
  200ed4:	40026400 	.word	0x40026400
  200ed8:	20000a10 	.word	0x20000a10
  200edc:	00000000 	.word	0x00000000

00200ee0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  200ee0:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  200ee2:	4b07      	ldr	r3, [pc, #28]	; (200f00 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
  200ee4:	4807      	ldr	r0, [pc, #28]	; (200f04 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  200ee6:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
  200ee8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  200eea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
  200eee:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
  200ef0:	b10a      	cbz	r2, 200ef6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
  200ef2:	6c40      	ldr	r0, [r0, #68]	; 0x44
  200ef4:	4790      	blx	r2
}
  200ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200efa:	f7ff be91 	b.w	200c20 <_port_irq_epilogue>
  200efe:	bf00      	nop
  200f00:	40026400 	.word	0x40026400
  200f04:	20000a10 	.word	0x20000a10
	...

00200f10 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200f10:	4b08      	ldr	r3, [pc, #32]	; (200f34 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
  200f12:	4809      	ldr	r0, [pc, #36]	; (200f38 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200f14:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
  200f16:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200f18:	0d89      	lsrs	r1, r1, #22
  200f1a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  200f1e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
  200f20:	058c      	lsls	r4, r1, #22
  200f22:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
  200f24:	b10a      	cbz	r2, 200f2a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
  200f26:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  200f28:	4790      	blx	r2
}
  200f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200f2e:	f7ff be77 	b.w	200c20 <_port_irq_epilogue>
  200f32:	bf00      	nop
  200f34:	40026000 	.word	0x40026000
  200f38:	20000a10 	.word	0x20000a10
  200f3c:	00000000 	.word	0x00000000

00200f40 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200f40:	4b08      	ldr	r3, [pc, #32]	; (200f64 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
  200f42:	4809      	ldr	r0, [pc, #36]	; (200f68 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200f44:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
  200f46:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200f48:	0c09      	lsrs	r1, r1, #16
  200f4a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  200f4e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
  200f50:	040c      	lsls	r4, r1, #16
  200f52:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
  200f54:	b10a      	cbz	r2, 200f5a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
  200f56:	6b40      	ldr	r0, [r0, #52]	; 0x34
  200f58:	4790      	blx	r2
}
  200f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200f5e:	f7ff be5f 	b.w	200c20 <_port_irq_epilogue>
  200f62:	bf00      	nop
  200f64:	40026000 	.word	0x40026000
  200f68:	20000a10 	.word	0x20000a10
  200f6c:	00000000 	.word	0x00000000

00200f70 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200f70:	4b08      	ldr	r3, [pc, #32]	; (200f94 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
  200f72:	4809      	ldr	r0, [pc, #36]	; (200f98 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200f74:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
  200f76:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200f78:	0989      	lsrs	r1, r1, #6
  200f7a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  200f7e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
  200f80:	018c      	lsls	r4, r1, #6
  200f82:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
  200f84:	b10a      	cbz	r2, 200f8a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
  200f86:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  200f88:	4790      	blx	r2
}
  200f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200f8e:	f7ff be47 	b.w	200c20 <_port_irq_epilogue>
  200f92:	bf00      	nop
  200f94:	40026000 	.word	0x40026000
  200f98:	20000a10 	.word	0x20000a10
  200f9c:	00000000 	.word	0x00000000

00200fa0 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  200fa0:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200fa2:	4b07      	ldr	r3, [pc, #28]	; (200fc0 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
  200fa4:	4807      	ldr	r0, [pc, #28]	; (200fc4 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200fa6:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
  200fa8:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200faa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
  200fae:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
  200fb0:	b10a      	cbz	r2, 200fb6 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
  200fb2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  200fb4:	4790      	blx	r2
}
  200fb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200fba:	f7ff be31 	b.w	200c20 <_port_irq_epilogue>
  200fbe:	bf00      	nop
  200fc0:	40026000 	.word	0x40026000
  200fc4:	20000a10 	.word	0x20000a10
	...

00200fd0 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200fd0:	4b08      	ldr	r3, [pc, #32]	; (200ff4 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
  200fd2:	4809      	ldr	r0, [pc, #36]	; (200ff8 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200fd4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
  200fd6:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200fd8:	0d89      	lsrs	r1, r1, #22
  200fda:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  200fde:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
  200fe0:	058c      	lsls	r4, r1, #22
  200fe2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
  200fe4:	b10a      	cbz	r2, 200fea <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
  200fe6:	69c0      	ldr	r0, [r0, #28]
  200fe8:	4790      	blx	r2
}
  200fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200fee:	f7ff be17 	b.w	200c20 <_port_irq_epilogue>
  200ff2:	bf00      	nop
  200ff4:	40026000 	.word	0x40026000
  200ff8:	20000a10 	.word	0x20000a10
  200ffc:	00000000 	.word	0x00000000

00201000 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201000:	4b08      	ldr	r3, [pc, #32]	; (201024 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
  201002:	4809      	ldr	r0, [pc, #36]	; (201028 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201004:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
  201006:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201008:	0c09      	lsrs	r1, r1, #16
  20100a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  20100e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
  201010:	040c      	lsls	r4, r1, #16
  201012:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
  201014:	b10a      	cbz	r2, 20101a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
  201016:	6940      	ldr	r0, [r0, #20]
  201018:	4790      	blx	r2
}
  20101a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20101e:	f7ff bdff 	b.w	200c20 <_port_irq_epilogue>
  201022:	bf00      	nop
  201024:	40026000 	.word	0x40026000
  201028:	20000a10 	.word	0x20000a10
  20102c:	00000000 	.word	0x00000000

00201030 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201030:	4b08      	ldr	r3, [pc, #32]	; (201054 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
  201032:	4809      	ldr	r0, [pc, #36]	; (201058 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201034:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
  201036:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201038:	0989      	lsrs	r1, r1, #6
  20103a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  20103e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
  201040:	018c      	lsls	r4, r1, #6
  201042:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
  201044:	b10a      	cbz	r2, 20104a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
  201046:	68c0      	ldr	r0, [r0, #12]
  201048:	4790      	blx	r2
}
  20104a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20104e:	f7ff bde7 	b.w	200c20 <_port_irq_epilogue>
  201052:	bf00      	nop
  201054:	40026000 	.word	0x40026000
  201058:	20000a10 	.word	0x20000a10
  20105c:	00000000 	.word	0x00000000

00201060 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  201060:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  201062:	4b07      	ldr	r3, [pc, #28]	; (201080 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
  201064:	4a07      	ldr	r2, [pc, #28]	; (201084 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  201066:	6819      	ldr	r1, [r3, #0]
  201068:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
  20106c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
  20106e:	6813      	ldr	r3, [r2, #0]
  201070:	b10b      	cbz	r3, 201076 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
  201072:	6850      	ldr	r0, [r2, #4]
  201074:	4798      	blx	r3
}
  201076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20107a:	f7ff bdd1 	b.w	200c20 <_port_irq_epilogue>
  20107e:	bf00      	nop
  201080:	40026000 	.word	0x40026000
  201084:	20000a10 	.word	0x20000a10
	...

00201090 <SVC_Handler>:
void SVC_Handler(void) {
  201090:	b480      	push	{r7}
  201092:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  201094:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
  201098:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20109a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  20109e:	2300      	movs	r3, #0
  2010a0:	f383 8811 	msr	BASEPRI, r3
}
  2010a4:	46bd      	mov	sp, r7
  2010a6:	bc80      	pop	{r7}
  2010a8:	4770      	bx	lr
  2010aa:	bf00      	nop
  2010ac:	0000      	movs	r0, r0
	...

002010b0 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  2010b0:	b470      	push	{r4, r5, r6}
  2010b2:	2320      	movs	r3, #32
  2010b4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  2010b8:	4e0d      	ldr	r6, [pc, #52]	; (2010f0 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  2010ba:	1e4a      	subs	r2, r1, #1
  2010bc:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  2010be:	4c0d      	ldr	r4, [pc, #52]	; (2010f4 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  2010c0:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  2010c2:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  2010c4:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  2010c6:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  2010c8:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  2010ca:	1858      	adds	r0, r3, r1
  2010cc:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  2010ce:	1a23      	subs	r3, r4, r0
  2010d0:	429a      	cmp	r2, r3
  2010d2:	d806      	bhi.n	2010e2 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  2010d4:	4402      	add	r2, r0
  2010d6:	2300      	movs	r3, #0
  2010d8:	6032      	str	r2, [r6, #0]
  2010da:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  2010de:	bc70      	pop	{r4, r5, r6}
  2010e0:	4770      	bx	lr
    return NULL;
  2010e2:	2000      	movs	r0, #0
  2010e4:	2300      	movs	r3, #0
  2010e6:	f383 8811 	msr	BASEPRI, r3
}
  2010ea:	bc70      	pop	{r4, r5, r6}
  2010ec:	4770      	bx	lr
  2010ee:	bf00      	nop
  2010f0:	20000a98 	.word	0x20000a98
  2010f4:	20000a94 	.word	0x20000a94
	...

00201100 <wakeup>:
  201100:	2320      	movs	r3, #32
  201102:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  201106:	f890 3020 	ldrb.w	r3, [r0, #32]
  20110a:	2b07      	cmp	r3, #7
  20110c:	d80e      	bhi.n	20112c <wakeup+0x2c>
  20110e:	e8df f003 	tbb	[pc, r3]
  201112:	0d28      	.short	0x0d28
  201114:	0408240d 	.word	0x0408240d
  201118:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
  20111a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  20111c:	6893      	ldr	r3, [r2, #8]
  20111e:	3301      	adds	r3, #1
  201120:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  201122:	e890 000c 	ldmia.w	r0, {r2, r3}
  201126:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  201128:	6802      	ldr	r2, [r0, #0]
  20112a:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  20112c:	2200      	movs	r2, #0
  20112e:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  201130:	4b0e      	ldr	r3, [pc, #56]	; (20116c <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  201132:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  201136:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  201138:	f04f 34ff 	mov.w	r4, #4294967295
  20113c:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  20113e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  201140:	689a      	ldr	r2, [r3, #8]
  201142:	428a      	cmp	r2, r1
  201144:	d2fb      	bcs.n	20113e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  201146:	685a      	ldr	r2, [r3, #4]
  201148:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  20114a:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  20114c:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  20114e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  201150:	6058      	str	r0, [r3, #4]
  201152:	f381 8811 	msr	BASEPRI, r1
}
  201156:	bc10      	pop	{r4}
  201158:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  20115a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  20115c:	2200      	movs	r2, #0
  20115e:	601a      	str	r2, [r3, #0]
  201160:	e7e4      	b.n	20112c <wakeup+0x2c>
  201162:	2300      	movs	r3, #0
  201164:	f383 8811 	msr	BASEPRI, r3
  201168:	4770      	bx	lr
  20116a:	bf00      	nop
  20116c:	200008a0 	.word	0x200008a0

00201170 <_idle_thread.lto_priv.51>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
  201170:	e7fe      	b.n	201170 <_idle_thread.lto_priv.51>
  201172:	bf00      	nop
	...

00201180 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  201180:	e7fe      	b.n	201180 <BusFault_Handler>
  201182:	bf00      	nop
	...

00201190 <chSchGoSleepS>:
  thread_t *otp = currp;
  201190:	4b08      	ldr	r3, [pc, #32]	; (2011b4 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  201192:	681a      	ldr	r2, [r3, #0]
  201194:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  201196:	b430      	push	{r4, r5}
  otp->state = newstate;
  201198:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  20119c:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  20119e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  2011a0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  2011a2:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  2011a4:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  2011a6:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  2011aa:	619a      	str	r2, [r3, #24]
}
  2011ac:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  2011ae:	f7ff b891 	b.w	2002d4 <_port_switch>
  2011b2:	bf00      	nop
  2011b4:	200008a0 	.word	0x200008a0
	...

002011c0 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  2011c0:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2011c2:	4b33      	ldr	r3, [pc, #204]	; (201290 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  2011c4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  2011c8:	4a32      	ldr	r2, [pc, #200]	; (201294 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2011ca:	4c33      	ldr	r4, [pc, #204]	; (201298 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  2011cc:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  2011ce:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  2011d0:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  2011d2:	681a      	ldr	r2, [r3, #0]
  2011d4:	f042 0201 	orr.w	r2, r2, #1
  2011d8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  2011da:	680b      	ldr	r3, [r1, #0]
  2011dc:	079b      	lsls	r3, r3, #30
  2011de:	d5fc      	bpl.n	2011da <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  2011e0:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  2011e2:	4a2b      	ldr	r2, [pc, #172]	; (201290 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  2011e4:	f023 0303 	bic.w	r3, r3, #3
  2011e8:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  2011ea:	688b      	ldr	r3, [r1, #8]
  2011ec:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  2011ee:	6893      	ldr	r3, [r2, #8]
  2011f0:	f013 030c 	ands.w	r3, r3, #12
  2011f4:	d1fb      	bne.n	2011ee <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  2011f6:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  2011f8:	4925      	ldr	r1, [pc, #148]	; (201290 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  2011fa:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  2011fe:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  201200:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  201202:	6813      	ldr	r3, [r2, #0]
  201204:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  201208:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  20120a:	680b      	ldr	r3, [r1, #0]
  20120c:	039d      	lsls	r5, r3, #14
  20120e:	d5fc      	bpl.n	20120a <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201210:	4b22      	ldr	r3, [pc, #136]	; (20129c <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  201212:	4820      	ldr	r0, [pc, #128]	; (201294 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201214:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  201216:	680b      	ldr	r3, [r1, #0]
  201218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  20121c:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  20121e:	6843      	ldr	r3, [r0, #4]
  201220:	045c      	lsls	r4, r3, #17
  201222:	d5fc      	bpl.n	20121e <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  201224:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  201226:	4a1b      	ldr	r2, [pc, #108]	; (201294 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  201228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20122c:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  20122e:	6853      	ldr	r3, [r2, #4]
  201230:	03d9      	lsls	r1, r3, #15
  201232:	d5fc      	bpl.n	20122e <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201234:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  201236:	4917      	ldr	r1, [pc, #92]	; (201294 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  20123c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  20123e:	684b      	ldr	r3, [r1, #4]
  201240:	039a      	lsls	r2, r3, #14
  201242:	d5fc      	bpl.n	20123e <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  201244:	4a12      	ldr	r2, [pc, #72]	; (201290 <__early_init+0xd0>)
  201246:	6813      	ldr	r3, [r2, #0]
  201248:	019b      	lsls	r3, r3, #6
  20124a:	d5fc      	bpl.n	201246 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  20124c:	4b14      	ldr	r3, [pc, #80]	; (2012a0 <__early_init+0xe0>)
  20124e:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  201252:	4d14      	ldr	r5, [pc, #80]	; (2012a4 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  201254:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201258:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  20125a:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  20125c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  201260:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  201264:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  201266:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201268:	4909      	ldr	r1, [pc, #36]	; (201290 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  20126a:	f043 0302 	orr.w	r3, r3, #2
  20126e:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201270:	688b      	ldr	r3, [r1, #8]
  201272:	f003 030c 	and.w	r3, r3, #12
  201276:	2b08      	cmp	r3, #8
  201278:	d1fa      	bne.n	201270 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  20127a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  20127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  201280:	644b      	str	r3, [r1, #68]	; 0x44
  201282:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  201284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  201288:	bc30      	pop	{r4, r5}
  20128a:	664b      	str	r3, [r1, #100]	; 0x64
  20128c:	4770      	bx	lr
  20128e:	bf00      	nop
  201290:	40023800 	.word	0x40023800
  201294:	40007000 	.word	0x40007000
  201298:	10000400 	.word	0x10000400
  20129c:	09406c08 	.word	0x09406c08
  2012a0:	40023c00 	.word	0x40023c00
  2012a4:	30999400 	.word	0x30999400
	...

002012b0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
  2012b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  2012b4:	f002 0903 	and.w	r9, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  2012b8:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  2012bc:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  2012c0:	f3c2 1e41 	ubfx	lr, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  2012c4:	2600      	movs	r6, #0
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  2012c6:	464f      	mov	r7, r9
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  2012c8:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  2012cc:	f04f 0a0f 	mov.w	sl, #15
  2012d0:	e00e      	b.n	2012f0 <_pal_lld_setgroupmode+0x40>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  2012d2:	6a03      	ldr	r3, [r0, #32]
  2012d4:	ea23 0404 	bic.w	r4, r3, r4
  2012d8:	4325      	orrs	r5, r4
  2012da:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  2012dc:	0849      	lsrs	r1, r1, #1
  2012de:	d047      	beq.n	201370 <_pal_lld_setgroupmode+0xc0>
      return;
    otyper <<= 1;
  2012e0:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  2012e4:	3601      	adds	r6, #1
    ospeedr <<= 2;
  2012e6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
  2012ea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
  2012ee:	00bf      	lsls	r7, r7, #2
    if ((mask & 1) != 0) {
  2012f0:	07cb      	lsls	r3, r1, #31
  2012f2:	d5f3      	bpl.n	2012dc <_pal_lld_setgroupmode+0x2c>
      m1 = 1 << bit;
  2012f4:	2301      	movs	r3, #1
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2012f6:	6845      	ldr	r5, [r0, #4]
      altrmask = altr << ((bit & 7) * 4);
  2012f8:	f006 0407 	and.w	r4, r6, #7
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  2012fc:	f1b9 0f02 	cmp.w	r9, #2
      m1 = 1 << bit;
  201300:	fa03 fb06 	lsl.w	fp, r3, r6
      m2 = 3 << (bit * 2);
  201304:	fa06 f303 	lsl.w	r3, r6, r3
      altrmask = altr << ((bit & 7) * 4);
  201308:	ea4f 0484 	mov.w	r4, r4, lsl #2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  20130c:	ea25 0b0b 	bic.w	fp, r5, fp
      m2 = 3 << (bit * 2);
  201310:	f04f 0503 	mov.w	r5, #3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  201314:	ea4b 0b08 	orr.w	fp, fp, r8
      m2 = 3 << (bit * 2);
  201318:	fa05 f303 	lsl.w	r3, r5, r3
      altrmask = altr << ((bit & 7) * 4);
  20131c:	fa02 f504 	lsl.w	r5, r2, r4
      m4 = 15 << ((bit & 7) * 4);
  201320:	fa0a f404 	lsl.w	r4, sl, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  201324:	f8c0 b004 	str.w	fp, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  201328:	ea6f 0303 	mvn.w	r3, r3
  20132c:	f8d0 b008 	ldr.w	fp, [r0, #8]
  201330:	ea0b 0b03 	and.w	fp, fp, r3
  201334:	ea4b 0b0c 	orr.w	fp, fp, ip
  201338:	f8c0 b008 	str.w	fp, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  20133c:	f8d0 b00c 	ldr.w	fp, [r0, #12]
  201340:	ea03 0b0b 	and.w	fp, r3, fp
  201344:	ea4b 0b0e 	orr.w	fp, fp, lr
  201348:	f8c0 b00c 	str.w	fp, [r0, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  20134c:	d012      	beq.n	201374 <_pal_lld_setgroupmode+0xc4>
        port->MODER   = (port->MODER & ~m2) | moder;
  20134e:	f8d0 b000 	ldr.w	fp, [r0]
        if (bit < 8)
  201352:	2e07      	cmp	r6, #7
        port->MODER   = (port->MODER & ~m2) | moder;
  201354:	ea03 030b 	and.w	r3, r3, fp
  201358:	ea43 0307 	orr.w	r3, r3, r7
  20135c:	6003      	str	r3, [r0, #0]
        if (bit < 8)
  20135e:	d9b8      	bls.n	2012d2 <_pal_lld_setgroupmode+0x22>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  201360:	6a43      	ldr	r3, [r0, #36]	; 0x24
    if (!mask)
  201362:	0849      	lsrs	r1, r1, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  201364:	ea23 0404 	bic.w	r4, r3, r4
  201368:	ea45 0504 	orr.w	r5, r5, r4
  20136c:	6245      	str	r5, [r0, #36]	; 0x24
    if (!mask)
  20136e:	d1b7      	bne.n	2012e0 <_pal_lld_setgroupmode+0x30>
  201370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bit < 8)
  201374:	2e07      	cmp	r6, #7
  201376:	d80a      	bhi.n	20138e <_pal_lld_setgroupmode+0xde>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  201378:	f8d0 b020 	ldr.w	fp, [r0, #32]
  20137c:	ea2b 0404 	bic.w	r4, fp, r4
  201380:	4325      	orrs	r5, r4
  201382:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
  201384:	6804      	ldr	r4, [r0, #0]
  201386:	4023      	ands	r3, r4
  201388:	433b      	orrs	r3, r7
  20138a:	6003      	str	r3, [r0, #0]
  20138c:	e7a6      	b.n	2012dc <_pal_lld_setgroupmode+0x2c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  20138e:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
  201392:	ea2b 0404 	bic.w	r4, fp, r4
  201396:	4325      	orrs	r5, r4
  201398:	6245      	str	r5, [r0, #36]	; 0x24
  20139a:	e7f3      	b.n	201384 <_pal_lld_setgroupmode+0xd4>
  20139c:	0000      	movs	r0, r0
	...

002013a0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  2013a0:	4b0e      	ldr	r3, [pc, #56]	; (2013dc <chTMStopMeasurementX+0x3c>)
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  2013a2:	6882      	ldr	r2, [r0, #8]
  2013a4:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  2013a6:	490e      	ldr	r1, [pc, #56]	; (2013e0 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  2013a8:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  2013aa:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  2013ac:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  2013ae:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  2013b0:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  2013b2:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  2013b4:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  2013b6:	6083      	str	r3, [r0, #8]
  tmp->n++;
  2013b8:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  2013ba:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  2013be:	18e4      	adds	r4, r4, r3
  2013c0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  2013c4:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  2013c6:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  2013c8:	bf88      	it	hi
  2013ca:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  2013cc:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  2013ce:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  2013d2:	bf38      	it	cc
  2013d4:	6003      	strcc	r3, [r0, #0]
}
  2013d6:	bc30      	pop	{r4, r5}
  2013d8:	4770      	bx	lr
  2013da:	bf00      	nop
  2013dc:	e0001000 	.word	0xe0001000
  2013e0:	200008a0 	.word	0x200008a0
	...

002013f0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  2013f0:	4a0e      	ldr	r2, [pc, #56]	; (20142c <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  2013f2:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  2013f4:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  2013f6:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  2013f8:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  2013fa:	2500      	movs	r5, #0
  thread_t *otp = currp;
  2013fc:	6994      	ldr	r4, [r2, #24]
  2013fe:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  201400:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  201402:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  201406:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  20140a:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  20140c:	6190      	str	r0, [r2, #24]
  20140e:	e000      	b.n	201412 <chSchDoReschedule+0x22>
  201410:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  201412:	689a      	ldr	r2, [r3, #8]
  201414:	4291      	cmp	r1, r2
  201416:	d3fb      	bcc.n	201410 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  201418:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  20141a:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  20141c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  20141e:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  201420:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201422:	605c      	str	r4, [r3, #4]
}
  201424:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201426:	f7fe bf55 	b.w	2002d4 <_port_switch>
  20142a:	bf00      	nop
  20142c:	200008a0 	.word	0x200008a0

00201430 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
  201430:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201434:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  201436:	b5f0      	push	{r4, r5, r6, r7, lr}
  201438:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
  20143a:	d031      	beq.n	2014a0 <chSchGoSleepTimeoutS+0x70>
    chVTDoSetI(&vt, time, wakeup, currp);
  20143c:	4c1c      	ldr	r4, [pc, #112]	; (2014b0 <chSchGoSleepTimeoutS+0x80>)
  20143e:	4607      	mov	r7, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  201440:	481c      	ldr	r0, [pc, #112]	; (2014b4 <chSchGoSleepTimeoutS+0x84>)
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
  201442:	69e3      	ldr	r3, [r4, #28]
  vtp->par = par;
  201444:	69a5      	ldr	r5, [r4, #24]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  201446:	891a      	ldrh	r2, [r3, #8]
  vtp->par = par;
  201448:	9505      	str	r5, [sp, #20]
  while (p->delta < delta) {
  20144a:	4291      	cmp	r1, r2
  vtp->func = vtfunc;
  20144c:	9004      	str	r0, [sp, #16]
  while (p->delta < delta) {
  20144e:	d905      	bls.n	20145c <chSchGoSleepTimeoutS+0x2c>
    delta -= p->delta;
  201450:	1a89      	subs	r1, r1, r2
    p = p->next;
  201452:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  201454:	b289      	uxth	r1, r1
  while (p->delta < delta) {
  201456:	891a      	ldrh	r2, [r3, #8]
  201458:	428a      	cmp	r2, r1
  20145a:	d3f9      	bcc.n	201450 <chSchGoSleepTimeoutS+0x20>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  20145c:	685d      	ldr	r5, [r3, #4]
  vtp->prev->next = vtp;
  20145e:	aa01      	add	r2, sp, #4
  vtp->next = p;
  201460:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  201462:	f64f 76ff 	movw	r6, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
  201466:	9502      	str	r5, [sp, #8]
    chSchGoSleepS(newstate);
  201468:	4638      	mov	r0, r7
  vtp->prev->next = vtp;
  20146a:	602a      	str	r2, [r5, #0]
  p->prev = vtp;
  20146c:	605a      	str	r2, [r3, #4]
  vtp->delta = delta
  20146e:	f8ad 100c 	strh.w	r1, [sp, #12]
  p->delta -= delta;
  201472:	891a      	ldrh	r2, [r3, #8]
  201474:	1a51      	subs	r1, r2, r1
  201476:	8119      	strh	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  201478:	84a6      	strh	r6, [r4, #36]	; 0x24
  20147a:	f7ff fe89 	bl	201190 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  20147e:	9b04      	ldr	r3, [sp, #16]
  201480:	b153      	cbz	r3, 201498 <chSchGoSleepTimeoutS+0x68>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
  201482:	9b01      	ldr	r3, [sp, #4]
  201484:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  201488:	891a      	ldrh	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
  20148a:	9902      	ldr	r1, [sp, #8]
  vtp->next->delta += vtp->delta;
  20148c:	4402      	add	r2, r0
  20148e:	811a      	strh	r2, [r3, #8]
  vtp->prev->next = vtp->next;
  201490:	600b      	str	r3, [r1, #0]
  vtp->next->prev = vtp->prev;
  201492:	9b01      	ldr	r3, [sp, #4]
  201494:	6059      	str	r1, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
  201496:	84a6      	strh	r6, [r4, #36]	; 0x24
  return currp->u.rdymsg;
  201498:	69a3      	ldr	r3, [r4, #24]
}
  20149a:	6a58      	ldr	r0, [r3, #36]	; 0x24
  20149c:	b007      	add	sp, #28
  20149e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2014a0:	4c03      	ldr	r4, [pc, #12]	; (2014b0 <chSchGoSleepTimeoutS+0x80>)
    chSchGoSleepS(newstate);
  2014a2:	f7ff fe75 	bl	201190 <chSchGoSleepS>
  return currp->u.rdymsg;
  2014a6:	69a3      	ldr	r3, [r4, #24]
}
  2014a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2014aa:	b007      	add	sp, #28
  2014ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2014ae:	bf00      	nop
  2014b0:	200008a0 	.word	0x200008a0
  2014b4:	00201101 	.word	0x00201101
	...

002014c0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
  2014c0:	b161      	cbz	r1, 2014dc <chThdEnqueueTimeoutS+0x1c>
  2014c2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
  2014c4:	4b07      	ldr	r3, [pc, #28]	; (2014e4 <chThdEnqueueTimeoutS+0x24>)

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  2014c6:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  2014c8:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  2014ca:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  2014cc:	6854      	ldr	r4, [r2, #4]
  2014ce:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
  2014d2:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  2014d4:	6053      	str	r3, [r2, #4]
}
  2014d6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  2014d8:	f7ff bfaa 	b.w	201430 <chSchGoSleepTimeoutS>
}
  2014dc:	f04f 30ff 	mov.w	r0, #4294967295
  2014e0:	4770      	bx	lr
  2014e2:	bf00      	nop
  2014e4:	200008a0 	.word	0x200008a0
	...

002014f0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  2014f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2014f4:	4699      	mov	r9, r3
  2014f6:	b083      	sub	sp, #12
  2014f8:	4604      	mov	r4, r0
  2014fa:	460e      	mov	r6, r1
  2014fc:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  2014fe:	f8d0 801c 	ldr.w	r8, [r0, #28]
  201502:	2320      	movs	r3, #32
  201504:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.systime;
  201508:	4b26      	ldr	r3, [pc, #152]	; (2015a4 <oqWriteTimeout+0xb4>)
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  20150a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t w = 0;
  20150e:	2700      	movs	r7, #0
  201510:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201512:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  201516:	fa19 f383 	uxtah	r3, r9, r3
  20151a:	b29b      	uxth	r3, r3
  20151c:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  20151e:	68a3      	ldr	r3, [r4, #8]
  201520:	b313      	cbz	r3, 201568 <oqWriteTimeout+0x78>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  201522:	6961      	ldr	r1, [r4, #20]
  201524:	f106 0b01 	add.w	fp, r6, #1
    oqp->q_counter--;
  201528:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  20152a:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  20152c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  20152e:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  201530:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201532:	7833      	ldrb	r3, [r6, #0]
  201534:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  201536:	6961      	ldr	r1, [r4, #20]
  201538:	6923      	ldr	r3, [r4, #16]
  20153a:	4299      	cmp	r1, r3
  20153c:	d301      	bcc.n	201542 <oqWriteTimeout+0x52>
      oqp->q_wrptr = oqp->q_buffer;
  20153e:	68e3      	ldr	r3, [r4, #12]
  201540:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  201542:	f1b8 0f00 	cmp.w	r8, #0
  201546:	d001      	beq.n	20154c <oqWriteTimeout+0x5c>
      nfy(oqp);
  201548:	4620      	mov	r0, r4
  20154a:	47c0      	blx	r8
  20154c:	2300      	movs	r3, #0
  20154e:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  201552:	3d01      	subs	r5, #1
    w++;
  201554:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  201558:	d019      	beq.n	20158e <oqWriteTimeout+0x9e>
  20155a:	2320      	movs	r3, #32
  20155c:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  201560:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201562:	465e      	mov	r6, fp
    while (oqIsFullI(oqp)) {
  201564:	2b00      	cmp	r3, #0
  201566:	d1dc      	bne.n	201522 <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201568:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  20156c:	4592      	cmp	sl, r2
  20156e:	d812      	bhi.n	201596 <oqWriteTimeout+0xa6>
  201570:	4a0c      	ldr	r2, [pc, #48]	; (2015a4 <oqWriteTimeout+0xb4>)
  201572:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  201574:	9a01      	ldr	r2, [sp, #4]
  201576:	1a51      	subs	r1, r2, r1
  201578:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  20157a:	4589      	cmp	r9, r1
  20157c:	d305      	bcc.n	20158a <oqWriteTimeout+0x9a>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
  20157e:	4620      	mov	r0, r4
  201580:	f7ff ff9e 	bl	2014c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201584:	2800      	cmp	r0, #0
  201586:	d0ca      	beq.n	20151e <oqWriteTimeout+0x2e>
  201588:	2300      	movs	r3, #0
  20158a:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  20158e:	4638      	mov	r0, r7
  201590:	b003      	add	sp, #12
  201592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201596:	4649      	mov	r1, r9
  201598:	4620      	mov	r0, r4
  20159a:	f7ff ff91 	bl	2014c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  20159e:	2800      	cmp	r0, #0
  2015a0:	d0bd      	beq.n	20151e <oqWriteTimeout+0x2e>
  2015a2:	e7f1      	b.n	201588 <oqWriteTimeout+0x98>
  2015a4:	200008a0 	.word	0x200008a0
	...

002015b0 <_writet.lto_priv.49>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  2015b0:	3030      	adds	r0, #48	; 0x30
  2015b2:	f7ff bf9d 	b.w	2014f0 <oqWriteTimeout>
  2015b6:	bf00      	nop
	...

002015c0 <_write.lto_priv.43>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  2015c0:	3030      	adds	r0, #48	; 0x30
  2015c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2015c6:	f7ff bf93 	b.w	2014f0 <oqWriteTimeout>
  2015ca:	bf00      	nop
  2015cc:	0000      	movs	r0, r0
	...

002015d0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  2015d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  2015d2:	4604      	mov	r4, r0
  2015d4:	460f      	mov	r7, r1
  2015d6:	4616      	mov	r6, r2
  2015d8:	2320      	movs	r3, #32
  2015da:	f383 8811 	msr	BASEPRI, r3
  2015de:	e003      	b.n	2015e8 <oqPutTimeout+0x18>
  2015e0:	f7ff ff6e 	bl	2014c0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  2015e4:	2800      	cmp	r0, #0
  2015e6:	db19      	blt.n	20161c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  2015e8:	68a5      	ldr	r5, [r4, #8]
  2015ea:	4631      	mov	r1, r6
  2015ec:	4620      	mov	r0, r4
  2015ee:	2d00      	cmp	r5, #0
  2015f0:	d0f6      	beq.n	2015e0 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  2015f2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  2015f4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  2015f6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  2015f8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  2015fa:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  2015fc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  2015fe:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  201600:	6962      	ldr	r2, [r4, #20]
  201602:	6923      	ldr	r3, [r4, #16]
  201604:	429a      	cmp	r2, r3
  201606:	d301      	bcc.n	20160c <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  201608:	68e3      	ldr	r3, [r4, #12]
  20160a:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  20160c:	69e3      	ldr	r3, [r4, #28]
  20160e:	b10b      	cbz	r3, 201614 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  201610:	4620      	mov	r0, r4
  201612:	4798      	blx	r3
  201614:	2000      	movs	r0, #0
  201616:	f380 8811 	msr	BASEPRI, r0
}
  20161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  20161c:	f385 8811 	msr	BASEPRI, r5
  201620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201622:	bf00      	nop
	...

00201630 <_putt.lto_priv.47>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  201630:	3030      	adds	r0, #48	; 0x30
  201632:	f7ff bfcd 	b.w	2015d0 <oqPutTimeout>
  201636:	bf00      	nop
	...

00201640 <_put.lto_priv.45>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  201640:	3030      	adds	r0, #48	; 0x30
  201642:	f64f 72ff 	movw	r2, #65535	; 0xffff
  201646:	f7ff bfc3 	b.w	2015d0 <oqPutTimeout>
  20164a:	bf00      	nop
  20164c:	0000      	movs	r0, r0
	...

00201650 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  201650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201654:	4699      	mov	r9, r3
  201656:	b083      	sub	sp, #12
  201658:	4604      	mov	r4, r0
  20165a:	460e      	mov	r6, r1
  20165c:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  20165e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  201662:	2320      	movs	r3, #32
  201664:	f383 8811 	msr	BASEPRI, r3
  201668:	4b26      	ldr	r3, [pc, #152]	; (201704 <iqReadTimeout+0xb4>)
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  20166a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t r = 0;
  20166e:	2700      	movs	r7, #0
  201670:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201672:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  201676:	fa19 f383 	uxtah	r3, r9, r3
  20167a:	b29b      	uxth	r3, r3
  20167c:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  20167e:	68a3      	ldr	r3, [r4, #8]
  201680:	b313      	cbz	r3, 2016c8 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
  201682:	69a1      	ldr	r1, [r4, #24]
  201684:	f106 0b01 	add.w	fp, r6, #1
    iqp->q_counter--;
  201688:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  20168a:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  20168c:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  20168e:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  201690:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201692:	780b      	ldrb	r3, [r1, #0]
  201694:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  201696:	69a1      	ldr	r1, [r4, #24]
  201698:	6923      	ldr	r3, [r4, #16]
  20169a:	4299      	cmp	r1, r3
  20169c:	d301      	bcc.n	2016a2 <iqReadTimeout+0x52>
      iqp->q_rdptr = iqp->q_buffer;
  20169e:	68e3      	ldr	r3, [r4, #12]
  2016a0:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  2016a2:	f1b8 0f00 	cmp.w	r8, #0
  2016a6:	d001      	beq.n	2016ac <iqReadTimeout+0x5c>
      nfy(iqp);
  2016a8:	4620      	mov	r0, r4
  2016aa:	47c0      	blx	r8
  2016ac:	2300      	movs	r3, #0
  2016ae:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  2016b2:	3d01      	subs	r5, #1
    r++;
  2016b4:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  2016b8:	d019      	beq.n	2016ee <iqReadTimeout+0x9e>
  2016ba:	2320      	movs	r3, #32
  2016bc:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  2016c0:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  2016c2:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
  2016c4:	2b00      	cmp	r3, #0
  2016c6:	d1dc      	bne.n	201682 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2016c8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  2016cc:	4592      	cmp	sl, r2
  2016ce:	d812      	bhi.n	2016f6 <iqReadTimeout+0xa6>
  2016d0:	4a0c      	ldr	r2, [pc, #48]	; (201704 <iqReadTimeout+0xb4>)
  2016d2:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  2016d4:	9a01      	ldr	r2, [sp, #4]
  2016d6:	1a51      	subs	r1, r2, r1
  2016d8:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  2016da:	4589      	cmp	r9, r1
  2016dc:	d305      	bcc.n	2016ea <iqReadTimeout+0x9a>
  2016de:	4620      	mov	r0, r4
  2016e0:	f7ff feee 	bl	2014c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2016e4:	2800      	cmp	r0, #0
  2016e6:	d0ca      	beq.n	20167e <iqReadTimeout+0x2e>
  2016e8:	2300      	movs	r3, #0
  2016ea:	f383 8811 	msr	BASEPRI, r3
}
  2016ee:	4638      	mov	r0, r7
  2016f0:	b003      	add	sp, #12
  2016f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  2016f6:	4649      	mov	r1, r9
  2016f8:	4620      	mov	r0, r4
  2016fa:	f7ff fee1 	bl	2014c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2016fe:	2800      	cmp	r0, #0
  201700:	d0bd      	beq.n	20167e <iqReadTimeout+0x2e>
  201702:	e7f1      	b.n	2016e8 <iqReadTimeout+0x98>
  201704:	200008a0 	.word	0x200008a0
	...

00201710 <_readt.lto_priv.50>:
}

static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  201710:	300c      	adds	r0, #12
  201712:	f7ff bf9d 	b.w	201650 <iqReadTimeout>
  201716:	bf00      	nop
	...

00201720 <_read.lto_priv.44>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  201720:	300c      	adds	r0, #12
  201722:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201726:	f7ff bf93 	b.w	201650 <iqReadTimeout>
  20172a:	bf00      	nop
  20172c:	0000      	movs	r0, r0
	...

00201730 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  201730:	b570      	push	{r4, r5, r6, lr}
  201732:	2320      	movs	r3, #32
  201734:	4604      	mov	r4, r0
  201736:	460e      	mov	r6, r1
  201738:	f383 8811 	msr	BASEPRI, r3
  20173c:	e003      	b.n	201746 <iqGetTimeout+0x16>
  20173e:	f7ff febf 	bl	2014c0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201742:	2800      	cmp	r0, #0
  201744:	db19      	blt.n	20177a <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  201746:	68a5      	ldr	r5, [r4, #8]
  201748:	4631      	mov	r1, r6
  20174a:	4620      	mov	r0, r4
  20174c:	2d00      	cmp	r5, #0
  20174e:	d0f6      	beq.n	20173e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  201750:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  201752:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201754:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201756:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  201758:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  20175a:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  20175c:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  20175e:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201760:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  201762:	d301      	bcc.n	201768 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  201764:	68e3      	ldr	r3, [r4, #12]
  201766:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  201768:	69e3      	ldr	r3, [r4, #28]
  20176a:	b10b      	cbz	r3, 201770 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  20176c:	4620      	mov	r0, r4
  20176e:	4798      	blx	r3
  201770:	2300      	movs	r3, #0
  201772:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  201776:	4628      	mov	r0, r5
}
  201778:	bd70      	pop	{r4, r5, r6, pc}
  20177a:	f385 8811 	msr	BASEPRI, r5
  20177e:	bd70      	pop	{r4, r5, r6, pc}

00201780 <_gett.lto_priv.48>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  201780:	300c      	adds	r0, #12
  201782:	f7ff bfd5 	b.w	201730 <iqGetTimeout>
  201786:	bf00      	nop
	...

00201790 <_get.lto_priv.46>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  201790:	300c      	adds	r0, #12
  201792:	f64f 71ff 	movw	r1, #65535	; 0xffff
  201796:	f7ff bfcb 	b.w	201730 <iqGetTimeout>
  20179a:	bf00      	nop
  20179c:	0000      	movs	r0, r0
	...

002017a0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  2017a0:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  2017a2:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  2017a4:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  2017a6:	4b08      	ldr	r3, [pc, #32]	; (2017c8 <chSchReadyI+0x28>)
  2017a8:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  2017aa:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  2017ae:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  2017b0:	689a      	ldr	r2, [r3, #8]
  2017b2:	428a      	cmp	r2, r1
  2017b4:	d2fb      	bcs.n	2017ae <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  2017b6:	685a      	ldr	r2, [r3, #4]
}
  2017b8:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  2017ba:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  2017bc:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  2017be:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  2017c0:	605c      	str	r4, [r3, #4]
}
  2017c2:	bc10      	pop	{r4}
  2017c4:	4770      	bx	lr
  2017c6:	bf00      	nop
  2017c8:	200008a0 	.word	0x200008a0
  2017cc:	00000000 	.word	0x00000000

002017d0 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
  2017d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  2017d4:	4c5f      	ldr	r4, [pc, #380]	; (201954 <VectorDC+0x184>)
  2017d6:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t cr1 = u->CR1;
  2017d8:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  2017da:	69f5      	ldr	r5, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  2017dc:	072a      	lsls	r2, r5, #28
  u->ICR = isr;
  2017de:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  2017e0:	d152      	bne.n	201888 <VectorDC+0xb8>
  if (isr & USART_ISR_LBDF) {
  2017e2:	05eb      	lsls	r3, r5, #23
  2017e4:	d445      	bmi.n	201872 <VectorDC+0xa2>
  if (isr & USART_ISR_RXNE) {
  2017e6:	06a8      	lsls	r0, r5, #26
  2017e8:	d417      	bmi.n	20181a <VectorDC+0x4a>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  2017ea:	0639      	lsls	r1, r7, #24
  2017ec:	d501      	bpl.n	2017f2 <VectorDC+0x22>
  2017ee:	062a      	lsls	r2, r5, #24
  2017f0:	d465      	bmi.n	2018be <VectorDC+0xee>
  if (isr & USART_ISR_TC) {
  2017f2:	066b      	lsls	r3, r5, #25
  2017f4:	d50d      	bpl.n	201812 <VectorDC+0x42>
  2017f6:	2320      	movs	r3, #32
  2017f8:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  2017fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
  2017fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  201800:	429a      	cmp	r2, r3
  201802:	f000 8086 	beq.w	201912 <VectorDC+0x142>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  201806:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  20180a:	2300      	movs	r3, #0
  20180c:	6037      	str	r7, [r6, #0]
  20180e:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
}
  201812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
  201816:	f7ff ba03 	b.w	200c20 <_port_irq_epilogue>
  20181a:	2320      	movs	r3, #32
  20181c:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  201820:	6a72      	ldr	r2, [r6, #36]	; 0x24
  201822:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  201826:	6963      	ldr	r3, [r4, #20]
  201828:	ea01 0802 	and.w	r8, r1, r2
  20182c:	2b00      	cmp	r3, #0
  20182e:	d078      	beq.n	201922 <VectorDC+0x152>
  if (iqIsFullI(iqp)) {
  201830:	6a23      	ldr	r3, [r4, #32]
  201832:	6a62      	ldr	r2, [r4, #36]	; 0x24
  201834:	4293      	cmp	r3, r2
  201836:	d078      	beq.n	20192a <VectorDC+0x15a>
  iqp->q_counter++;
  201838:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  20183a:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
  20183c:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  20183e:	6221      	str	r1, [r4, #32]
  iqp->q_counter++;
  201840:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  201842:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  201846:	6a22      	ldr	r2, [r4, #32]
  201848:	69e3      	ldr	r3, [r4, #28]
  20184a:	429a      	cmp	r2, r3
  20184c:	d25e      	bcs.n	20190c <VectorDC+0x13c>
  return (bool)(tqp->next != (const thread_t *)tqp);
  20184e:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  201850:	4a41      	ldr	r2, [pc, #260]	; (201958 <VectorDC+0x188>)
  201852:	4293      	cmp	r3, r2
  201854:	d009      	beq.n	20186a <VectorDC+0x9a>
  tqp->next             = tp->queue.next;
  201856:	6819      	ldr	r1, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  201858:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  20185c:	4618      	mov	r0, r3
  20185e:	60e1      	str	r1, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  201860:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  201862:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  201866:	f7ff ff9b 	bl	2017a0 <chSchReadyI>
  20186a:	2300      	movs	r3, #0
  20186c:	f383 8811 	msr	BASEPRI, r3
  201870:	e7bb      	b.n	2017ea <VectorDC+0x1a>
  201872:	2320      	movs	r3, #32
  201874:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  201878:	f44f 7000 	mov.w	r0, #512	; 0x200
  20187c:	f000 ff28 	bl	2026d0 <chEvtBroadcastFlagsI.constprop.31>
  201880:	2300      	movs	r3, #0
  201882:	f383 8811 	msr	BASEPRI, r3
  201886:	e7ae      	b.n	2017e6 <VectorDC+0x16>
    sts |= SD_OVERRUN_ERROR;
  201888:	f015 0f08 	tst.w	r5, #8
  20188c:	bf0c      	ite	eq
  20188e:	2000      	moveq	r0, #0
  201890:	2080      	movne	r0, #128	; 0x80
  if (isr & USART_ISR_PE)
  201892:	07eb      	lsls	r3, r5, #31
  201894:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  201898:	bf48      	it	mi
  20189a:	f040 0020 	orrmi.w	r0, r0, #32
  if (isr & USART_ISR_FE)
  20189e:	07a9      	lsls	r1, r5, #30
    sts |= SD_FRAMING_ERROR;
  2018a0:	bf48      	it	mi
  2018a2:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (isr & USART_ISR_NE)
  2018a6:	076a      	lsls	r2, r5, #29
    sts |= SD_NOISE_ERROR;
  2018a8:	bf48      	it	mi
  2018aa:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  2018ae:	f383 8811 	msr	BASEPRI, r3
  2018b2:	f000 ff0d 	bl	2026d0 <chEvtBroadcastFlagsI.constprop.31>
  2018b6:	2300      	movs	r3, #0
  2018b8:	f383 8811 	msr	BASEPRI, r3
  2018bc:	e791      	b.n	2017e2 <VectorDC+0x12>
  2018be:	2320      	movs	r3, #32
  2018c0:	f383 8811 	msr	BASEPRI, r3
  if (oqIsEmptyI(oqp)) {
  2018c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  2018c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
  2018c8:	429a      	cmp	r2, r3
  2018ca:	d036      	beq.n	20193a <VectorDC+0x16a>
  oqp->q_counter++;
  2018cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  2018ce:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  2018d0:	6c21      	ldr	r1, [r4, #64]	; 0x40
  oqp->q_counter++;
  2018d2:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  2018d4:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  2018d6:	4288      	cmp	r0, r1
  oqp->q_counter++;
  2018d8:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  2018da:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  2018de:	d301      	bcc.n	2018e4 <VectorDC+0x114>
    oqp->q_rdptr = oqp->q_buffer;
  2018e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  2018e2:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  2018e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  2018e6:	4a1d      	ldr	r2, [pc, #116]	; (20195c <VectorDC+0x18c>)
  2018e8:	4293      	cmp	r3, r2
  2018ea:	d009      	beq.n	201900 <VectorDC+0x130>
  tqp->next             = tp->queue.next;
  2018ec:	6819      	ldr	r1, [r3, #0]
  tp->u.rdymsg = msg;
  2018ee:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  2018f2:	4618      	mov	r0, r3
  2018f4:	6321      	str	r1, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  2018f6:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  2018f8:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  2018fc:	f7ff ff50 	bl	2017a0 <chSchReadyI>
      u->TDR = b;
  201900:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  201904:	2300      	movs	r3, #0
  201906:	f383 8811 	msr	BASEPRI, r3
  20190a:	e772      	b.n	2017f2 <VectorDC+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  20190c:	69a3      	ldr	r3, [r4, #24]
  20190e:	6223      	str	r3, [r4, #32]
  201910:	e79d      	b.n	20184e <VectorDC+0x7e>
    if (oqIsEmptyI(&sdp->oqueue))
  201912:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  201914:	2b00      	cmp	r3, #0
  201916:	f43f af76 	beq.w	201806 <VectorDC+0x36>
  20191a:	2010      	movs	r0, #16
  20191c:	f000 fed8 	bl	2026d0 <chEvtBroadcastFlagsI.constprop.31>
  201920:	e771      	b.n	201806 <VectorDC+0x36>
  201922:	2004      	movs	r0, #4
  201924:	f000 fed4 	bl	2026d0 <chEvtBroadcastFlagsI.constprop.31>
  201928:	e782      	b.n	201830 <VectorDC+0x60>
  if (iqIsFullI(iqp)) {
  20192a:	6962      	ldr	r2, [r4, #20]
  20192c:	2a00      	cmp	r2, #0
  20192e:	d083      	beq.n	201838 <VectorDC+0x68>
  201930:	f44f 6080 	mov.w	r0, #1024	; 0x400
  201934:	f000 fecc 	bl	2026d0 <chEvtBroadcastFlagsI.constprop.31>
  201938:	e797      	b.n	20186a <VectorDC+0x9a>
  if (oqIsEmptyI(oqp)) {
  20193a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  20193c:	2a00      	cmp	r2, #0
  20193e:	d0c5      	beq.n	2018cc <VectorDC+0xfc>
  201940:	2008      	movs	r0, #8
  201942:	f000 fec5 	bl	2026d0 <chEvtBroadcastFlagsI.constprop.31>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  201946:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  20194a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  20194e:	6033      	str	r3, [r6, #0]
  201950:	e7d8      	b.n	201904 <VectorDC+0x134>
  201952:	bf00      	nop
  201954:	20000ac4 	.word	0x20000ac4
  201958:	20000ad0 	.word	0x20000ad0
  20195c:	20000af4 	.word	0x20000af4

00201960 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
  201960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
  201962:	4b23      	ldr	r3, [pc, #140]	; (2019f0 <Vector88+0x90>)
  ADC1->SR = 0;
  201964:	2100      	movs	r1, #0
  sr = ADC1->SR;
  201966:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
  201968:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
  20196a:	0693      	lsls	r3, r2, #26
  20196c:	d535      	bpl.n	2019da <Vector88+0x7a>
  20196e:	4c21      	ldr	r4, [pc, #132]	; (2019f4 <Vector88+0x94>)
  201970:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  201972:	6802      	ldr	r2, [r0, #0]
  201974:	6853      	ldr	r3, [r2, #4]
  201976:	2b00      	cmp	r3, #0
  201978:	d02f      	beq.n	2019da <Vector88+0x7a>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
  20197a:	6921      	ldr	r1, [r4, #16]
  20197c:	b369      	cbz	r1, 2019da <Vector88+0x7a>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  20197e:	6813      	ldr	r3, [r2, #0]
  201980:	f023 031f 	bic.w	r3, r3, #31
  201984:	6013      	str	r3, [r2, #0]
  201986:	6813      	ldr	r3, [r2, #0]
  201988:	f013 0301 	ands.w	r3, r3, #1
  20198c:	d1fb      	bne.n	201986 <Vector88+0x26>
  20198e:	7a07      	ldrb	r7, [r0, #8]
  201990:	223d      	movs	r2, #61	; 0x3d
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201992:	688d      	ldr	r5, [r1, #8]
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
  201994:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
  201996:	6846      	ldr	r6, [r0, #4]
  201998:	fa02 f707 	lsl.w	r7, r2, r7
  adcp->adc->CR1 = 0;
  20199c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  20199e:	6037      	str	r7, [r6, #0]
  adcp->adc->CR1 = 0;
  2019a0:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  2019a2:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  2019a4:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  2019a6:	b1fd      	cbz	r5, 2019e8 <Vector88+0x88>
  2019a8:	2305      	movs	r3, #5
  2019aa:	4812      	ldr	r0, [pc, #72]	; (2019f4 <Vector88+0x94>)
  2019ac:	7023      	strb	r3, [r4, #0]
  2019ae:	47a8      	blx	r5
  2019b0:	7823      	ldrb	r3, [r4, #0]
  2019b2:	2b05      	cmp	r3, #5
  2019b4:	d015      	beq.n	2019e2 <Vector88+0x82>
  2019b6:	2300      	movs	r3, #0
  2019b8:	6123      	str	r3, [r4, #16]
  2019ba:	2320      	movs	r3, #32
  2019bc:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  2019c0:	6963      	ldr	r3, [r4, #20]
  2019c2:	b13b      	cbz	r3, 2019d4 <Vector88+0x74>
    tp->u.rdymsg = msg;
  2019c4:	f04f 31ff 	mov.w	r1, #4294967295
    *trp = NULL;
  2019c8:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  2019ca:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
  2019cc:	6259      	str	r1, [r3, #36]	; 0x24
    *trp = NULL;
  2019ce:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
  2019d0:	f7ff fee6 	bl	2017a0 <chSchReadyI>
  2019d4:	2300      	movs	r3, #0
  2019d6:	f383 8811 	msr	BASEPRI, r3
}
  2019da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  2019de:	f7ff b91f 	b.w	200c20 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  2019e2:	2302      	movs	r3, #2
  2019e4:	7023      	strb	r3, [r4, #0]
  2019e6:	e7e6      	b.n	2019b6 <Vector88+0x56>
  2019e8:	2302      	movs	r3, #2
  2019ea:	6125      	str	r5, [r4, #16]
  2019ec:	7023      	strb	r3, [r4, #0]
  2019ee:	e7e4      	b.n	2019ba <Vector88+0x5a>
  2019f0:	40012000 	.word	0x40012000
  2019f4:	2000083c 	.word	0x2000083c
	...

00201a00 <adc_lld_serve_rx_interrupt.lto_priv.39>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
  201a00:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
  201a04:	b570      	push	{r4, r5, r6, lr}
  201a06:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
  201a08:	d031      	beq.n	201a6e <adc_lld_serve_rx_interrupt.lto_priv.39+0x6e>
  dmaStreamDisable(adcp->dmastp);
  201a0a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  201a0c:	6803      	ldr	r3, [r0, #0]
  201a0e:	681a      	ldr	r2, [r3, #0]
  201a10:	f022 021f 	bic.w	r2, r2, #31
  201a14:	601a      	str	r2, [r3, #0]
  201a16:	6819      	ldr	r1, [r3, #0]
  201a18:	f011 0101 	ands.w	r1, r1, #1
  201a1c:	d1fb      	bne.n	201a16 <adc_lld_serve_rx_interrupt.lto_priv.39+0x16>
  201a1e:	7a03      	ldrb	r3, [r0, #8]
  201a20:	223d      	movs	r2, #61	; 0x3d
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  201a22:	6925      	ldr	r5, [r4, #16]
  adcp->adc->CR2 = ADC_CR2_ADON;
  201a24:	2601      	movs	r6, #1
  dmaStreamDisable(adcp->dmastp);
  201a26:	6840      	ldr	r0, [r0, #4]
  201a28:	409a      	lsls	r2, r3
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  201a2a:	68ad      	ldr	r5, [r5, #8]
  adcp->adc->CR1 = 0;
  201a2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  201a2e:	6002      	str	r2, [r0, #0]
  adcp->adc->CR1 = 0;
  201a30:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 = 0;
  201a32:	6099      	str	r1, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  201a34:	609e      	str	r6, [r3, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  201a36:	2d00      	cmp	r5, #0
  201a38:	d030      	beq.n	201a9c <adc_lld_serve_rx_interrupt.lto_priv.39+0x9c>
  201a3a:	2305      	movs	r3, #5
  201a3c:	4620      	mov	r0, r4
  201a3e:	7023      	strb	r3, [r4, #0]
  201a40:	47a8      	blx	r5
  201a42:	7823      	ldrb	r3, [r4, #0]
  201a44:	2b05      	cmp	r3, #5
  201a46:	d067      	beq.n	201b18 <adc_lld_serve_rx_interrupt.lto_priv.39+0x118>
  201a48:	2300      	movs	r3, #0
  201a4a:	6123      	str	r3, [r4, #16]
  201a4c:	2320      	movs	r3, #32
  201a4e:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  201a52:	6963      	ldr	r3, [r4, #20]
  201a54:	b13b      	cbz	r3, 201a66 <adc_lld_serve_rx_interrupt.lto_priv.39+0x66>
    *trp = NULL;
  201a56:	2100      	movs	r1, #0
    tp->u.rdymsg = msg;
  201a58:	f04f 32ff 	mov.w	r2, #4294967295
    (void) chSchReadyI(tp);
  201a5c:	4618      	mov	r0, r3
    *trp = NULL;
  201a5e:	6161      	str	r1, [r4, #20]
    tp->u.rdymsg = msg;
  201a60:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
  201a62:	f7ff fe9d 	bl	2017a0 <chSchReadyI>
  201a66:	2300      	movs	r3, #0
  201a68:	f383 8811 	msr	BASEPRI, r3
  201a6c:	bd70      	pop	{r4, r5, r6, pc}
    if (adcp->grpp != NULL) {
  201a6e:	6905      	ldr	r5, [r0, #16]
  201a70:	b19d      	cbz	r5, 201a9a <adc_lld_serve_rx_interrupt.lto_priv.39+0x9a>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
  201a72:	068a      	lsls	r2, r1, #26
  201a74:	d50f      	bpl.n	201a96 <adc_lld_serve_rx_interrupt.lto_priv.39+0x96>
        _adc_isr_full_code(adcp);
  201a76:	782b      	ldrb	r3, [r5, #0]
  201a78:	b1eb      	cbz	r3, 201ab6 <adc_lld_serve_rx_interrupt.lto_priv.39+0xb6>
  201a7a:	686b      	ldr	r3, [r5, #4]
  201a7c:	b16b      	cbz	r3, 201a9a <adc_lld_serve_rx_interrupt.lto_priv.39+0x9a>
  201a7e:	68c2      	ldr	r2, [r0, #12]
  201a80:	2a01      	cmp	r2, #1
  201a82:	d94c      	bls.n	201b1e <adc_lld_serve_rx_interrupt.lto_priv.39+0x11e>
  201a84:	0852      	lsrs	r2, r2, #1
  201a86:	886d      	ldrh	r5, [r5, #2]
  201a88:	6884      	ldr	r4, [r0, #8]
  201a8a:	0051      	lsls	r1, r2, #1
  201a8c:	fb05 4101 	mla	r1, r5, r1, r4
}
  201a90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
  201a94:	4718      	bx	r3
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
  201a96:	06cb      	lsls	r3, r1, #27
  201a98:	d404      	bmi.n	201aa4 <adc_lld_serve_rx_interrupt.lto_priv.39+0xa4>
  201a9a:	bd70      	pop	{r4, r5, r6, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  201a9c:	2302      	movs	r3, #2
  201a9e:	6125      	str	r5, [r4, #16]
  201aa0:	7023      	strb	r3, [r4, #0]
  201aa2:	e7d3      	b.n	201a4c <adc_lld_serve_rx_interrupt.lto_priv.39+0x4c>
        _adc_isr_half_code(adcp);
  201aa4:	686b      	ldr	r3, [r5, #4]
  201aa6:	2b00      	cmp	r3, #0
  201aa8:	d0f7      	beq.n	201a9a <adc_lld_serve_rx_interrupt.lto_priv.39+0x9a>
  201aaa:	68c2      	ldr	r2, [r0, #12]
  201aac:	6881      	ldr	r1, [r0, #8]
  201aae:	0852      	lsrs	r2, r2, #1
}
  201ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_half_code(adcp);
  201ab4:	4718      	bx	r3
  dmaStreamDisable(adcp->dmastp);
  201ab6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  201ab8:	6802      	ldr	r2, [r0, #0]
  201aba:	6813      	ldr	r3, [r2, #0]
  201abc:	f023 031f 	bic.w	r3, r3, #31
  201ac0:	6013      	str	r3, [r2, #0]
  201ac2:	6813      	ldr	r3, [r2, #0]
  201ac4:	f013 0301 	ands.w	r3, r3, #1
  201ac8:	d1fb      	bne.n	201ac2 <adc_lld_serve_rx_interrupt.lto_priv.39+0xc2>
  201aca:	7a02      	ldrb	r2, [r0, #8]
  201acc:	213d      	movs	r1, #61	; 0x3d
        _adc_isr_full_code(adcp);
  201ace:	686d      	ldr	r5, [r5, #4]
  adcp->adc->CR2 = ADC_CR2_ADON;
  201ad0:	2601      	movs	r6, #1
  dmaStreamDisable(adcp->dmastp);
  201ad2:	6840      	ldr	r0, [r0, #4]
  201ad4:	4091      	lsls	r1, r2
  adcp->adc->CR1 = 0;
  201ad6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  201ad8:	6001      	str	r1, [r0, #0]
  adcp->adc->CR1 = 0;
  201ada:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  201adc:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  201ade:	6096      	str	r6, [r2, #8]
        _adc_isr_full_code(adcp);
  201ae0:	b1ad      	cbz	r5, 201b0e <adc_lld_serve_rx_interrupt.lto_priv.39+0x10e>
  201ae2:	2304      	movs	r3, #4
  201ae4:	68e2      	ldr	r2, [r4, #12]
  201ae6:	68a1      	ldr	r1, [r4, #8]
  201ae8:	4620      	mov	r0, r4
  201aea:	7023      	strb	r3, [r4, #0]
  201aec:	47a8      	blx	r5
  201aee:	7823      	ldrb	r3, [r4, #0]
  201af0:	2b04      	cmp	r3, #4
  201af2:	d00c      	beq.n	201b0e <adc_lld_serve_rx_interrupt.lto_priv.39+0x10e>
  201af4:	2320      	movs	r3, #32
  201af6:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  201afa:	6963      	ldr	r3, [r4, #20]
  201afc:	2b00      	cmp	r3, #0
  201afe:	d0b2      	beq.n	201a66 <adc_lld_serve_rx_interrupt.lto_priv.39+0x66>
    *trp = NULL;
  201b00:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  201b02:	4618      	mov	r0, r3
    *trp = NULL;
  201b04:	6162      	str	r2, [r4, #20]
    tp->u.rdymsg = msg;
  201b06:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
  201b08:	f7ff fe4a 	bl	2017a0 <chSchReadyI>
  201b0c:	e7ab      	b.n	201a66 <adc_lld_serve_rx_interrupt.lto_priv.39+0x66>
  201b0e:	2202      	movs	r2, #2
  201b10:	2300      	movs	r3, #0
  201b12:	7022      	strb	r2, [r4, #0]
  201b14:	6123      	str	r3, [r4, #16]
  201b16:	e7ed      	b.n	201af4 <adc_lld_serve_rx_interrupt.lto_priv.39+0xf4>
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  201b18:	2302      	movs	r3, #2
  201b1a:	7023      	strb	r3, [r4, #0]
  201b1c:	e794      	b.n	201a48 <adc_lld_serve_rx_interrupt.lto_priv.39+0x48>
        _adc_isr_full_code(adcp);
  201b1e:	6881      	ldr	r1, [r0, #8]
}
  201b20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
  201b24:	4718      	bx	r3
  201b26:	bf00      	nop
	...

00201b30 <chThdExit>:
void chThdExit(msg_t msg) {
  201b30:	b538      	push	{r3, r4, r5, lr}
  201b32:	2220      	movs	r2, #32
  201b34:	4603      	mov	r3, r0
  201b36:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  201b3a:	4a10      	ldr	r2, [pc, #64]	; (201b7c <chThdExit+0x4c>)
  201b3c:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  201b3e:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  201b42:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  201b44:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  201b46:	4285      	cmp	r5, r0
  201b48:	d006      	beq.n	201b58 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  201b4a:	6803      	ldr	r3, [r0, #0]
  201b4c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  201b4e:	f7ff fe27 	bl	2017a0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  201b52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  201b54:	42a8      	cmp	r0, r5
  201b56:	d1f8      	bne.n	201b4a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  201b58:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  201b5c:	b943      	cbnz	r3, 201b70 <chThdExit+0x40>
  201b5e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  201b62:	079b      	lsls	r3, r3, #30
  201b64:	d104      	bne.n	201b70 <chThdExit+0x40>
    REG_REMOVE(tp);
  201b66:	6922      	ldr	r2, [r4, #16]
  201b68:	6963      	ldr	r3, [r4, #20]
  201b6a:	611a      	str	r2, [r3, #16]
  201b6c:	6922      	ldr	r2, [r4, #16]
  201b6e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  201b70:	200f      	movs	r0, #15
}
  201b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  201b76:	f7ff bb0b 	b.w	201190 <chSchGoSleepS>
  201b7a:	bf00      	nop
  201b7c:	200008a0 	.word	0x200008a0

00201b80 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  201b80:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  201b82:	4f12      	ldr	r7, [pc, #72]	; (201bcc <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  201b84:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  201b86:	4d12      	ldr	r5, [pc, #72]	; (201bd0 <__init_ram_areas+0x50>)
  201b88:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  201b8c:	4c11      	ldr	r4, [pc, #68]	; (201bd4 <__init_ram_areas+0x54>)
  201b8e:	4b12      	ldr	r3, [pc, #72]	; (201bd8 <__init_ram_areas+0x58>)
  201b90:	4912      	ldr	r1, [pc, #72]	; (201bdc <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  201b92:	429c      	cmp	r4, r3
  201b94:	d911      	bls.n	201bba <__init_ram_areas+0x3a>
  201b96:	3904      	subs	r1, #4
  201b98:	461a      	mov	r2, r3
      *p = *tp;
  201b9a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  201b9e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  201ba2:	4294      	cmp	r4, r2
  201ba4:	d8f9      	bhi.n	201b9a <__init_ram_areas+0x1a>
  201ba6:	43da      	mvns	r2, r3
  201ba8:	4414      	add	r4, r2
  201baa:	f024 0403 	bic.w	r4, r4, #3
  201bae:	3404      	adds	r4, #4
  201bb0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  201bb2:	429d      	cmp	r5, r3
  201bb4:	d903      	bls.n	201bbe <__init_ram_areas+0x3e>
      *p = 0;
  201bb6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  201bba:	429d      	cmp	r5, r3
  201bbc:	d8fb      	bhi.n	201bb6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  201bbe:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  201bc0:	4577      	cmp	r7, lr
  201bc2:	d202      	bcs.n	201bca <__init_ram_areas+0x4a>
  201bc4:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  201bc8:	e7e3      	b.n	201b92 <__init_ram_areas+0x12>
  201bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201bcc:	08002734 	.word	0x08002734
  201bd0:	20020044 	.word	0x20020044
  201bd4:	20020044 	.word	0x20020044
  201bd8:	20020044 	.word	0x20020044
  201bdc:	08002930 	.word	0x08002930

00201be0 <__default_exit>:
void __default_exit(void) {
  201be0:	e7fe      	b.n	201be0 <__default_exit>
  201be2:	bf00      	nop
	...

00201bf0 <__late_init>:
void __late_init(void) {}
  201bf0:	4770      	bx	lr
  201bf2:	bf00      	nop
	...

00201c00 <__core_init>:
void __core_init(void) {
  201c00:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  201c02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201c06:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  201c0a:	4c1b      	ldr	r4, [pc, #108]	; (201c78 <__core_init+0x78>)
  201c0c:	2200      	movs	r2, #0
  201c0e:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  201c12:	6963      	ldr	r3, [r4, #20]
  201c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  201c18:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  201c1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201c1e:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  201c22:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  201c26:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  201c2a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  201c2e:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  201c32:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  201c36:	f3c3 334e 	ubfx	r3, r3, #13, #15
  201c3a:	07b7      	lsls	r7, r6, #30
  201c3c:	015d      	lsls	r5, r3, #5
  201c3e:	ea05 000e 	and.w	r0, r5, lr
  201c42:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  201c44:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  201c46:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  201c4a:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  201c4c:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  201c50:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  201c54:	1c53      	adds	r3, r2, #1
  201c56:	d1f6      	bne.n	201c46 <__core_init+0x46>
  201c58:	3d20      	subs	r5, #32
    } while(sets--);
  201c5a:	f115 0f20 	cmn.w	r5, #32
  201c5e:	d1ee      	bne.n	201c3e <__core_init+0x3e>
  201c60:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  201c64:	6963      	ldr	r3, [r4, #20]
  201c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  201c6a:	6163      	str	r3, [r4, #20]
  201c6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201c70:	f3bf 8f6f 	isb	sy
  201c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201c76:	bf00      	nop
  201c78:	e000ed00 	.word	0xe000ed00
  201c7c:	00000000 	.word	0x00000000

00201c80 <main>:

/*
 * Application entry point.
 */
int main(void)
{
  201c80:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  tqp->next = (thread_t *)tqp;
  201c84:	f8df b26c 	ldr.w	fp, [pc, #620]	; 201ef4 <main+0x274>
  201c88:	b089      	sub	sp, #36	; 0x24
  ch.rlist.prio = NOPRIO;
  201c8a:	2400      	movs	r4, #0
  ch.vtlist.delta = (systime_t)-1;
  201c8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  201c90:	f10b 031c 	add.w	r3, fp, #28
  tmp->best       = (rtcnt_t)-1;
  201c94:	f04f 32ff 	mov.w	r2, #4294967295
  tmp->cumulative = (rttime_t)0;
  201c98:	2600      	movs	r6, #0
  201c9a:	2700      	movs	r7, #0
  chTMStartMeasurementX(&tm);
  201c9c:	a802      	add	r0, sp, #8
  ch.vtlist.delta = (systime_t)-1;
  201c9e:	f8ab 1024 	strh.w	r1, [fp, #36]	; 0x24
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  201ca2:	f8cb 301c 	str.w	r3, [fp, #28]
  REG_INSERT(tp);
  201ca6:	f10b 052c 	add.w	r5, fp, #44	; 0x2c
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  201caa:	f8cb 3020 	str.w	r3, [fp, #32]
  tmp->best       = (rtcnt_t)-1;
  201cae:	9202      	str	r2, [sp, #8]
  201cb0:	f8cb b000 	str.w	fp, [fp]
  tqp->prev = (thread_t *)tqp;
  201cb4:	f8cb b004 	str.w	fp, [fp, #4]
  ch.rlist.newer = (thread_t *)&ch.rlist;
  201cb8:	f8cb b010 	str.w	fp, [fp, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  201cbc:	f8cb b014 	str.w	fp, [fp, #20]
  ch.rlist.prio = NOPRIO;
  201cc0:	f8cb 4008 	str.w	r4, [fp, #8]
  ch.vtlist.systime = (systime_t)0;
  201cc4:	f8ab 4026 	strh.w	r4, [fp, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  201cc8:	f8cb 4070 	str.w	r4, [fp, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
  201ccc:	9403      	str	r4, [sp, #12]
  tmp->last       = (rtcnt_t)0;
  201cce:	9404      	str	r4, [sp, #16]
  tmp->n          = (ucnt_t)0;
  201cd0:	9405      	str	r4, [sp, #20]
  tmp->cumulative = (rttime_t)0;
  201cd2:	e9cd 6706 	strd	r6, r7, [sp, #24]
  chTMStartMeasurementX(&tm);
  201cd6:	f000 fcf3 	bl	2026c0 <chTMStartMeasurementX.constprop.34>
  chTMStopMeasurementX(&tm);
  201cda:	a802      	add	r0, sp, #8
  201cdc:	f7ff fb60 	bl	2013a0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  201ce0:	4b70      	ldr	r3, [pc, #448]	; (201ea4 <main+0x224>)
  201ce2:	4971      	ldr	r1, [pc, #452]	; (201ea8 <main+0x228>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  201ce4:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  nextmem = __heap_base__;
  201ce8:	4a70      	ldr	r2, [pc, #448]	; (201eac <main+0x22c>)
  tp->prio      = prio;
  201cea:	2780      	movs	r7, #128	; 0x80
  201cec:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
  201cee:	f103 0e10 	add.w	lr, r3, #16
  201cf2:	496f      	ldr	r1, [pc, #444]	; (201eb0 <main+0x230>)
  endmem  = __heap_end__;
  201cf4:	4e6f      	ldr	r6, [pc, #444]	; (201eb4 <main+0x234>)
  nextmem = __heap_base__;
  201cf6:	6011      	str	r1, [r2, #0]
  tp->refs      = (trefs_t)1;
  201cf8:	2201      	movs	r2, #1
  endmem  = __heap_end__;
  201cfa:	496f      	ldr	r1, [pc, #444]	; (201eb8 <main+0x238>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  201cfc:	f88b 404d 	strb.w	r4, [fp, #77]	; 0x4d
  201d00:	600e      	str	r6, [r1, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  201d02:	496e      	ldr	r1, [pc, #440]	; (201ebc <main+0x23c>)
  ch.tm.offset = tm.last;
  201d04:	9804      	ldr	r0, [sp, #16]
  201d06:	68ce      	ldr	r6, [r1, #12]
  201d08:	f8cb 0070 	str.w	r0, [fp, #112]	; 0x70
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  201d0c:	ea06 060c 	and.w	r6, r6, ip
  reg_value  =  (reg_value                                   |
  201d10:	486b      	ldr	r0, [pc, #428]	; (201ec0 <main+0x240>)
  tp->name      = name;
  201d12:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 201ef8 <main+0x278>
  201d16:	4330      	orrs	r0, r6
  REG_INSERT(tp);
  201d18:	f8db 6014 	ldr.w	r6, [fp, #20]
  tp->prio      = prio;
  201d1c:	f8cb 7034 	str.w	r7, [fp, #52]	; 0x34
  tp->realprio  = prio;
  201d20:	f8cb 7068 	str.w	r7, [fp, #104]	; 0x68
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  201d24:	4f67      	ldr	r7, [pc, #412]	; (201ec4 <main+0x244>)
  tp->epending  = (eventmask_t)0;
  201d26:	f8cb 4060 	str.w	r4, [fp, #96]	; 0x60
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  201d2a:	619c      	str	r4, [r3, #24]
  201d2c:	f8c3 e010 	str.w	lr, [r3, #16]
  tqp->prev = (thread_t *)tqp;
  201d30:	f8c3 e014 	str.w	lr, [r3, #20]
  tlp->next = (thread_t *)tlp;
  201d34:	f10b 0e54 	add.w	lr, fp, #84	; 0x54
  REG_INSERT(tp);
  201d38:	f8cb 6040 	str.w	r6, [fp, #64]	; 0x40
  tp->refs      = (trefs_t)1;
  201d3c:	f88b 204e 	strb.w	r2, [fp, #78]	; 0x4e
  tp->mtxlist   = NULL;
  201d40:	f8cb 4064 	str.w	r4, [fp, #100]	; 0x64
  REG_INSERT(tp);
  201d44:	f8cb b03c 	str.w	fp, [fp, #60]	; 0x3c
  tp->name      = name;
  201d48:	f8cb c044 	str.w	ip, [fp, #68]	; 0x44
  REG_INSERT(tp);
  201d4c:	6135      	str	r5, [r6, #16]
  tqp->next = (thread_t *)tqp;
  201d4e:	f10b 0658 	add.w	r6, fp, #88	; 0x58
  SCB->AIRCR =  reg_value;
  201d52:	60c8      	str	r0, [r1, #12]
  201d54:	68f8      	ldr	r0, [r7, #12]
  H_NEXT(&default_heap.header) = NULL;
  201d56:	609c      	str	r4, [r3, #8]
  201d58:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  H_PAGES(&default_heap.header) = 0;
  201d5c:	60dc      	str	r4, [r3, #12]
  201d5e:	f8cb 5014 	str.w	r5, [fp, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  201d62:	f8cb 5018 	str.w	r5, [fp, #24]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  201d66:	2520      	movs	r5, #32
  tlp->next = (thread_t *)tlp;
  201d68:	f8cb e054 	str.w	lr, [fp, #84]	; 0x54
  201d6c:	f04f 0e10 	mov.w	lr, #16
  DWT->LAR = 0xC5ACCE55U;
  201d70:	4b55      	ldr	r3, [pc, #340]	; (201ec8 <main+0x248>)
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  201d72:	f8cb 4048 	str.w	r4, [fp, #72]	; 0x48
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  201d76:	f88b 204c 	strb.w	r2, [fp, #76]	; 0x4c
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  201d7a:	60f8      	str	r0, [r7, #12]
  DWT->LAR = 0xC5ACCE55U;
  201d7c:	4853      	ldr	r0, [pc, #332]	; (201ecc <main+0x24c>)
  tqp->next = (thread_t *)tqp;
  201d7e:	f8cb 6058 	str.w	r6, [fp, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  201d82:	f8cb 605c 	str.w	r6, [fp, #92]	; 0x5c
  201d86:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  201d8a:	6818      	ldr	r0, [r3, #0]
  201d8c:	4310      	orrs	r0, r2
  201d8e:	6018      	str	r0, [r3, #0]
  201d90:	f881 e01f 	strb.w	lr, [r1, #31]
  201d94:	f881 5022 	strb.w	r5, [r1, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201d98:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
  201d9c:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201d9e:	f385 8811 	msr	BASEPRI, r5
  tp->wabase = tdp->wbase;
  201da2:	4b4b      	ldr	r3, [pc, #300]	; (201ed0 <main+0x250>)
  tp->state     = CH_STATE_WTSTART;
  201da4:	2502      	movs	r5, #2
  REG_INSERT(tp);
  201da6:	f8db 1014 	ldr.w	r1, [fp, #20]
  tp->prio      = prio;
  201daa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201dae:	f103 066c 	add.w	r6, r3, #108	; 0x6c
  tp->realprio  = prio;
  201db2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  REG_INSERT(tp);
  201db6:	f103 0090 	add.w	r0, r3, #144	; 0x90
  tp->refs      = (trefs_t)1;
  201dba:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201dbe:	4a45      	ldr	r2, [pc, #276]	; (201ed4 <main+0x254>)
  201dc0:	4f45      	ldr	r7, [pc, #276]	; (201ed8 <main+0x258>)
  201dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  tp->name      = name;
  201dc6:	4a45      	ldr	r2, [pc, #276]	; (201edc <main+0x25c>)
  tp->state     = CH_STATE_WTSTART;
  201dc8:	f883 50b0 	strb.w	r5, [r3, #176]	; 0xb0
  tqp->next = (thread_t *)tqp;
  201dcc:	f103 05bc 	add.w	r5, r3, #188	; 0xbc
  REG_INSERT(tp);
  201dd0:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  tp->flags     = CH_FLAG_MODE_STATIC;
  201dd4:	f883 40b1 	strb.w	r4, [r3, #177]	; 0xb1
  tp->epending  = (eventmask_t)0;
  201dd8:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201ddc:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
  tlp->next = (thread_t *)tlp;
  201de0:	f103 06b8 	add.w	r6, r3, #184	; 0xb8
  tp->name      = name;
  201de4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201de8:	671c      	str	r4, [r3, #112]	; 0x70
  tp->mtxlist   = NULL;
  201dea:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
  REG_INSERT(tp);
  201dee:	f8c3 b0a0 	str.w	fp, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  201df2:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201df6:	66df      	str	r7, [r3, #108]	; 0x6c
  REG_INSERT(tp);
  201df8:	6108      	str	r0, [r1, #16]
  thread_t *otp = currp;
  201dfa:	f8db 2018 	ldr.w	r2, [fp, #24]
  ntp->u.rdymsg = msg;
  201dfe:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  if (ntp->prio <= otp->prio) {
  201e02:	6891      	ldr	r1, [r2, #8]
  201e04:	f8cb 0014 	str.w	r0, [fp, #20]
  201e08:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  201e0c:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  201e10:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
  201e14:	2900      	cmp	r1, #0
  201e16:	f000 837f 	beq.w	202518 <main+0x898>
  cp = (thread_t *)&ch.rlist.queue;
  201e1a:	465a      	mov	r2, fp
  tp->state = CH_STATE_READY;
  201e1c:	f883 40b0 	strb.w	r4, [r3, #176]	; 0xb0
    cp = cp->queue.next;
  201e20:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
  201e22:	6891      	ldr	r1, [r2, #8]
  201e24:	2900      	cmp	r1, #0
  201e26:	d1fb      	bne.n	201e20 <main+0x1a0>
  tp->queue.next             = cp;
  201e28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
  201e2c:	6854      	ldr	r4, [r2, #4]
  201e2e:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
  201e32:	6020      	str	r0, [r4, #0]
  cp->queue.prev             = tp;
  201e34:	6050      	str	r0, [r2, #4]
  201e36:	f381 8811 	msr	BASEPRI, r1
  rccResetAHB1(~0);
  201e3a:	4b29      	ldr	r3, [pc, #164]	; (201ee0 <main+0x260>)
  201e3c:	f04f 32ff 	mov.w	r2, #4294967295
  PWR->CR1 |= PWR_CR1_DBP;
  201e40:	4c28      	ldr	r4, [pc, #160]	; (201ee4 <main+0x264>)
  rccResetAHB1(~0);
  201e42:	6918      	ldr	r0, [r3, #16]
  201e44:	611a      	str	r2, [r3, #16]
  201e46:	6119      	str	r1, [r3, #16]
  rccResetAHB2(~0);
  201e48:	6958      	ldr	r0, [r3, #20]
  201e4a:	615a      	str	r2, [r3, #20]
  201e4c:	6159      	str	r1, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  201e4e:	6a18      	ldr	r0, [r3, #32]
  201e50:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  201e54:	6218      	str	r0, [r3, #32]
  201e56:	6219      	str	r1, [r3, #32]
  rccResetAPB2(~0);
  201e58:	6a58      	ldr	r0, [r3, #36]	; 0x24
  201e5a:	625a      	str	r2, [r3, #36]	; 0x24
  201e5c:	6259      	str	r1, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  201e5e:	6822      	ldr	r2, [r4, #0]
  201e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  201e64:	6022      	str	r2, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  201e66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  201e68:	f402 7240 	and.w	r2, r2, #768	; 0x300
  201e6c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  201e70:	d003      	beq.n	201e7a <main+0x1fa>
    RCC->BDCR = RCC_BDCR_BDRST;
  201e72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  201e76:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  201e78:	6719      	str	r1, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201e7a:	4b19      	ldr	r3, [pc, #100]	; (201ee0 <main+0x260>)
  201e7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  201e7e:	4618      	mov	r0, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201e80:	f042 0219 	orr.w	r2, r2, #25
  201e84:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  201e86:	6f03      	ldr	r3, [r0, #112]	; 0x70
  201e88:	079b      	lsls	r3, r3, #30
  201e8a:	d5fc      	bpl.n	201e86 <main+0x206>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  201e8c:	4d15      	ldr	r5, [pc, #84]	; (201ee4 <main+0x264>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  201e8e:	2400      	movs	r4, #0
  201e90:	4815      	ldr	r0, [pc, #84]	; (201ee8 <main+0x268>)
  201e92:	686a      	ldr	r2, [r5, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
  201e94:	4623      	mov	r3, r4
  dma_streams_mask = 0U;
  201e96:	4e15      	ldr	r6, [pc, #84]	; (201eec <main+0x26c>)
  201e98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  201e9c:	606a      	str	r2, [r5, #4]
  201e9e:	4a14      	ldr	r2, [pc, #80]	; (201ef0 <main+0x270>)
  201ea0:	6014      	str	r4, [r2, #0]
  201ea2:	e02d      	b.n	201f00 <main+0x280>
  201ea4:	200009f0 	.word	0x200009f0
  201ea8:	002010b1 	.word	0x002010b1
  201eac:	20000a98 	.word	0x20000a98
  201eb0:	20020048 	.word	0x20020048
  201eb4:	20080000 	.word	0x20080000
  201eb8:	20000a94 	.word	0x20000a94
  201ebc:	e000ed00 	.word	0xe000ed00
  201ec0:	05fa0300 	.word	0x05fa0300
  201ec4:	e000edf0 	.word	0xe000edf0
  201ec8:	e0001000 	.word	0xe0001000
  201ecc:	c5acce55 	.word	0xc5acce55
  201ed0:	20000918 	.word	0x20000918
  201ed4:	002002e5 	.word	0x002002e5
  201ed8:	00201171 	.word	0x00201171
  201edc:	080028c4 	.word	0x080028c4
  201ee0:	40023800 	.word	0x40023800
  201ee4:	40007000 	.word	0x40007000
  201ee8:	080027c0 	.word	0x080027c0
  201eec:	40026010 	.word	0x40026010
  201ef0:	20000a90 	.word	0x20000a90
  201ef4:	200008a0 	.word	0x200008a0
  201ef8:	0800289c 	.word	0x0800289c
  201efc:	f850 6c0c 	ldr.w	r6, [r0, #-12]
    dma_isr_redir[i].dma_func = NULL;
  201f00:	4ad1      	ldr	r2, [pc, #836]	; (202248 <main+0x5c8>)
  201f02:	300c      	adds	r0, #12
    _stm32_dma_streams[i].stream->CR = 0U;
  201f04:	6033      	str	r3, [r6, #0]
    dma_isr_redir[i].dma_func = NULL;
  201f06:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  201f0a:	3101      	adds	r1, #1
  201f0c:	2910      	cmp	r1, #16
  201f0e:	d1f5      	bne.n	201efc <main+0x27c>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
  201f10:	f04f 36ff 	mov.w	r6, #4294967295
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  201f14:	f8df e398 	ldr.w	lr, [pc, #920]	; 2022b0 <main+0x630>
  201f18:	4ccc      	ldr	r4, [pc, #816]	; (20224c <main+0x5cc>)
  201f1a:	f240 75ff 	movw	r5, #2047	; 0x7ff
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
  201f1e:	4acc      	ldr	r2, [pc, #816]	; (202250 <main+0x5d0>)
  gpiop->ODR     = config->odr;
  201f20:	f64f 70ff 	movw	r0, #65535	; 0xffff
  DMA1->LIFCR = 0xFFFFFFFFU;
  201f24:	60a6      	str	r6, [r4, #8]
  201f26:	f64b 787e 	movw	r8, #49022	; 0xbf7e
  DMA1->HIFCR = 0xFFFFFFFFU;
  201f2a:	60e6      	str	r6, [r4, #12]
  gpiop->AFRH    = config->afrh;
  201f2c:	f44f 0c30 	mov.w	ip, #11534336	; 0xb00000
  DMA2->LIFCR = 0xFFFFFFFFU;
  201f30:	6096      	str	r6, [r2, #8]
  gpiop->OSPEEDR = config->ospeedr;
  201f32:	f06f 4a70 	mvn.w	sl, #4026531840	; 0xf0000000
  DMA2->HIFCR = 0xFFFFFFFFU;
  201f36:	60d6      	str	r6, [r2, #12]
  201f38:	f46f 1740 	mvn.w	r7, #3145728	; 0x300000
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  201f3c:	f8de 2030 	ldr.w	r2, [lr, #48]	; 0x30
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  201f40:	4cc4      	ldr	r4, [pc, #784]	; (202254 <main+0x5d4>)
  201f42:	432a      	orrs	r2, r5
  201f44:	f8ce 2030 	str.w	r2, [lr, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  201f48:	f8de 2050 	ldr.w	r2, [lr, #80]	; 0x50
  201f4c:	ea42 0905 	orr.w	r9, r2, r5
  gpiop->OTYPER  = config->otyper;
  201f50:	4dc1      	ldr	r5, [pc, #772]	; (202258 <main+0x5d8>)
  sdp->vmt = &vmt;
  201f52:	4ac2      	ldr	r2, [pc, #776]	; (20225c <main+0x5dc>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  201f54:	f8ce 9050 	str.w	r9, [lr, #80]	; 0x50
  gpiop->PUPDR   = config->pupdr;
  201f58:	f8df 9358 	ldr.w	r9, [pc, #856]	; 2022b4 <main+0x634>
  gpiop->OTYPER  = config->otyper;
  201f5c:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201f5e:	60ae      	str	r6, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  201f60:	f8c5 900c 	str.w	r9, [r5, #12]
  gpiop->AFRL    = config->afrl;
  201f64:	f8df 9350 	ldr.w	r9, [pc, #848]	; 2022b8 <main+0x638>
  gpiop->ODR     = config->odr;
  201f68:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
  201f6a:	f8c5 9020 	str.w	r9, [r5, #32]
  gpiop->AFRH    = config->afrh;
  201f6e:	f8df 934c 	ldr.w	r9, [pc, #844]	; 2022bc <main+0x63c>
  201f72:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201f76:	f8df 9348 	ldr.w	r9, [pc, #840]	; 2022c0 <main+0x640>
  201f7a:	f8c5 9000 	str.w	r9, [r5]
  gpiop->OTYPER  = config->otyper;
  201f7e:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  201f82:	f8c5 6408 	str.w	r6, [r5, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  201f86:	f106 468a 	add.w	r6, r6, #1157627904	; 0x45000000
  iqp->q_buffer  = bp;
  201f8a:	f8df 9338 	ldr.w	r9, [pc, #824]	; 2022c4 <main+0x644>
  201f8e:	f106 1655 	add.w	r6, r6, #5570645	; 0x550055
  201f92:	f506 56a8 	add.w	r6, r6, #5376	; 0x1500
  201f96:	f8c5 640c 	str.w	r6, [r5, #1036]	; 0x40c
  gpiop->MODER   = config->moder;
  201f9a:	4eb1      	ldr	r6, [pc, #708]	; (202260 <main+0x5e0>)
  gpiop->ODR     = config->odr;
  201f9c:	f8c5 8414 	str.w	r8, [r5, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  201fa0:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201fa4:	f8c5 c424 	str.w	ip, [r5, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  201fa8:	f44f 2c20 	mov.w	ip, #655360	; 0xa0000
  201fac:	f8c5 6400 	str.w	r6, [r5, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  201fb0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
  gpiop->PUPDR   = config->pupdr;
  201fb4:	4eab      	ldr	r6, [pc, #684]	; (202264 <main+0x5e4>)
  gpiop->OTYPER  = config->otyper;
  201fb6:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201fb8:	f8c5 a008 	str.w	sl, [r5, #8]
  gpiop->MODER   = config->moder;
  201fbc:	f04f 6a08 	mov.w	sl, #142606336	; 0x8800000
  gpiop->PUPDR   = config->pupdr;
  201fc0:	60ee      	str	r6, [r5, #12]
  gpiop->AFRL    = config->afrl;
  201fc2:	4ea9      	ldr	r6, [pc, #676]	; (202268 <main+0x5e8>)
  gpiop->ODR     = config->odr;
  201fc4:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
  201fc6:	622e      	str	r6, [r5, #32]
  gpiop->MODER   = config->moder;
  201fc8:	f640 2608 	movw	r6, #2568	; 0xa08
  gpiop->AFRH    = config->afrh;
  201fcc:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201fce:	602e      	str	r6, [r5, #0]
  gpiop->PUPDR   = config->pupdr;
  201fd0:	f04f 3655 	mov.w	r6, #1431655765	; 0x55555555
  gpiop->OTYPER  = config->otyper;
  201fd4:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  201fd8:	f8c5 7408 	str.w	r7, [r5, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  201fdc:	4fa3      	ldr	r7, [pc, #652]	; (20226c <main+0x5ec>)
  oqp->q_buffer  = bp;
  201fde:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 2022c8 <main+0x648>
  201fe2:	f8c5 740c 	str.w	r7, [r5, #1036]	; 0x40c
  gpiop->AFRH    = config->afrh;
  201fe6:	2777      	movs	r7, #119	; 0x77
  gpiop->ODR     = config->odr;
  201fe8:	f8c5 0414 	str.w	r0, [r5, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  201fec:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201ff0:	f8c5 7424 	str.w	r7, [r5, #1060]	; 0x424
  gpiop->OSPEEDR = config->ospeedr;
  201ff4:	270f      	movs	r7, #15
  gpiop->MODER   = config->moder;
  201ff6:	f8c5 c400 	str.w	ip, [r5, #1024]	; 0x400
  gpiop->OSPEEDR = config->ospeedr;
  201ffa:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 2022cc <main+0x64c>
  gpiop->OTYPER  = config->otyper;
  201ffe:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  202002:	f8c5 c808 	str.w	ip, [r5, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  202006:	f8c5 680c 	str.w	r6, [r5, #2060]	; 0x80c
  gpiop->OTYPER  = config->otyper;
  20200a:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 2022d0 <main+0x650>
  gpiop->ODR     = config->odr;
  20200e:	f8c5 0814 	str.w	r0, [r5, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  202012:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  202016:	f8c5 3824 	str.w	r3, [r5, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  20201a:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  20201e:	4d94      	ldr	r5, [pc, #592]	; (202270 <main+0x5f0>)
  gpiop->OTYPER  = config->otyper;
  202020:	f8cc 3004 	str.w	r3, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
  202024:	f8cc 5008 	str.w	r5, [ip, #8]
  gpiop->OTYPER  = config->otyper;
  202028:	4d92      	ldr	r5, [pc, #584]	; (202274 <main+0x5f4>)
  gpiop->PUPDR   = config->pupdr;
  20202a:	f8cc 600c 	str.w	r6, [ip, #12]
  gpiop->ODR     = config->odr;
  20202e:	f8cc 0014 	str.w	r0, [ip, #20]
  gpiop->AFRL    = config->afrl;
  202032:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
  202036:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
  20203a:	f8cc 3000 	str.w	r3, [ip]
  gpiop->OSPEEDR = config->ospeedr;
  20203e:	f8df c294 	ldr.w	ip, [pc, #660]	; 2022d4 <main+0x654>
  gpiop->OTYPER  = config->otyper;
  202042:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  202044:	f8c5 c008 	str.w	ip, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  202048:	f8df c28c 	ldr.w	ip, [pc, #652]	; 2022d8 <main+0x658>
  20204c:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->AFRH    = config->afrh;
  202050:	f8df c288 	ldr.w	ip, [pc, #648]	; 2022dc <main+0x65c>
  gpiop->ODR     = config->odr;
  202054:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
  202056:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
  202058:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
  20205c:	f04f 0c01 	mov.w	ip, #1
  gpiop->MODER   = config->moder;
  202060:	f8c5 a000 	str.w	sl, [r5]
  gpiop->PUPDR   = config->pupdr;
  202064:	f8df a278 	ldr.w	sl, [pc, #632]	; 2022e0 <main+0x660>
  gpiop->OTYPER  = config->otyper;
  202068:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  20206c:	f8c5 7408 	str.w	r7, [r5, #1032]	; 0x408
  tqp->next = (thread_t *)tqp;
  202070:	f104 0718 	add.w	r7, r4, #24
  gpiop->PUPDR   = config->pupdr;
  202074:	f8c5 a40c 	str.w	sl, [r5, #1036]	; 0x40c
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202078:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  gpiop->ODR     = config->odr;
  20207c:	f8c5 0414 	str.w	r0, [r5, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  202080:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  202084:	f8c5 3424 	str.w	r3, [r5, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  202088:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  20208c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
  202090:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  202092:	60ab      	str	r3, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  202094:	60ee      	str	r6, [r5, #12]
  adcp->config   = NULL;
  202096:	6063      	str	r3, [r4, #4]
  gpiop->ODR     = config->odr;
  202098:	6168      	str	r0, [r5, #20]
  adcp->samples  = NULL;
  20209a:	60a3      	str	r3, [r4, #8]
  gpiop->AFRL    = config->afrl;
  20209c:	622b      	str	r3, [r5, #32]
  adcp->depth    = 0;
  20209e:	60e3      	str	r3, [r4, #12]
  gpiop->AFRH    = config->afrh;
  2020a0:	626b      	str	r3, [r5, #36]	; 0x24
  adcp->grpp     = NULL;
  2020a2:	6123      	str	r3, [r4, #16]
  gpiop->MODER   = config->moder;
  2020a4:	602b      	str	r3, [r5, #0]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
  2020a6:	6163      	str	r3, [r4, #20]
  gpiop->OTYPER  = config->otyper;
  2020a8:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
  2020ac:	6223      	str	r3, [r4, #32]
  gpiop->OSPEEDR = config->ospeedr;
  2020ae:	f8c5 3408 	str.w	r3, [r5, #1032]	; 0x408
  2020b2:	61a7      	str	r7, [r4, #24]
  gpiop->PUPDR   = config->pupdr;
  2020b4:	f8c5 640c 	str.w	r6, [r5, #1036]	; 0x40c
  tqp->prev = (thread_t *)tqp;
  2020b8:	61e7      	str	r7, [r4, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2020ba:	f06f 073f 	mvn.w	r7, #63	; 0x3f
  gpiop->ODR     = config->odr;
  2020be:	f8c5 0414 	str.w	r0, [r5, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  2020c2:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  2020c6:	f8c5 3424 	str.w	r3, [r5, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  2020ca:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  2020ce:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  2020d2:	f8c5 3808 	str.w	r3, [r5, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  2020d6:	f8c5 680c 	str.w	r6, [r5, #2060]	; 0x80c
  2020da:	f04f 0660 	mov.w	r6, #96	; 0x60
  gpiop->ODR     = config->odr;
  2020de:	f8c5 0814 	str.w	r0, [r5, #2068]	; 0x814
  ADCD1.adc = ADC1;
  2020e2:	4865      	ldr	r0, [pc, #404]	; (202278 <main+0x5f8>)
  gpiop->AFRL    = config->afrl;
  2020e4:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  2020e8:	f8c5 3824 	str.w	r3, [r5, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  2020ec:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  2020f0:	4615      	mov	r5, r2
  2020f2:	62a0      	str	r0, [r4, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  2020f4:	4861      	ldr	r0, [pc, #388]	; (20227c <main+0x5fc>)
  adcp->state    = ADC_STOP;
  2020f6:	f884 c000 	strb.w	ip, [r4]
  2020fa:	62e0      	str	r0, [r4, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
  2020fc:	4860      	ldr	r0, [pc, #384]	; (202280 <main+0x600>)
  2020fe:	6320      	str	r0, [r4, #48]	; 0x30
  202100:	4860      	ldr	r0, [pc, #384]	; (202284 <main+0x604>)
  202102:	f880 6312 	strb.w	r6, [r0, #786]	; 0x312
  tqp->next = (thread_t *)tqp;
  202106:	f102 060c 	add.w	r6, r2, #12
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20210a:	f8c0 a180 	str.w	sl, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20210e:	f8c0 a000 	str.w	sl, [r0]
  PWMD3.channels = STM32_TIM3_CHANNELS;
  202112:	f04f 0a04 	mov.w	sl, #4
  202116:	60d6      	str	r6, [r2, #12]
  tqp->prev = (thread_t *)tqp;
  202118:	6116      	str	r6, [r2, #16]
#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3);
  iqObjectInit(&SD3.iqueue, sd_in_buf3, sizeof sd_in_buf3, NULL, &SD3);
  oqObjectInit(&SD3.oqueue, sd_out_buf3, sizeof sd_out_buf3, notify3, &SD3);
  SD3.usart = USART3;
  SD3.clock = STM32_USART3CLK;
  20211a:	4e5b      	ldr	r6, [pc, #364]	; (202288 <main+0x608>)
  iqp->q_counter = 0;
  20211c:	6153      	str	r3, [r2, #20]
  20211e:	6596      	str	r6, [r2, #88]	; 0x58
  202120:	4e5a      	ldr	r6, [pc, #360]	; (20228c <main+0x60c>)
  oqp->q_counter = size;
  202122:	6391      	str	r1, [r2, #56]	; 0x38
  202124:	f845 6b04 	str.w	r6, [r5], #4
  GPTD4.tim = STM32_TIM4;
  202128:	4e59      	ldr	r6, [pc, #356]	; (202290 <main+0x610>)
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  20212a:	6055      	str	r5, [r2, #4]
  20212c:	4d59      	ldr	r5, [pc, #356]	; (202294 <main+0x614>)
  iqp->q_top     = bp + size;
  20212e:	495a      	ldr	r1, [pc, #360]	; (202298 <main+0x618>)
  202130:	60f5      	str	r5, [r6, #12]
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  202132:	4d5a      	ldr	r5, [pc, #360]	; (20229c <main+0x61c>)
  sdp->state = SD_STOP;
  202134:	f882 c008 	strb.w	ip, [r2, #8]
  iqp->q_buffer  = bp;
  202138:	f8c2 9018 	str.w	r9, [r2, #24]
  iqp->q_rdptr   = bp;
  20213c:	f8c2 9024 	str.w	r9, [r2, #36]	; 0x24
  iqp->q_wrptr   = bp;
  202140:	f8c2 9020 	str.w	r9, [r2, #32]
  tqp->next = (thread_t *)tqp;
  202144:	f102 0930 	add.w	r9, r2, #48	; 0x30
  iqp->q_top     = bp + size;
  202148:	61d1      	str	r1, [r2, #28]
  oqp->q_top     = bp + size;
  20214a:	f108 0110 	add.w	r1, r8, #16
  oqp->q_buffer  = bp;
  20214e:	f8c2 803c 	str.w	r8, [r2, #60]	; 0x3c
  oqp->q_rdptr   = bp;
  202152:	f8c2 8048 	str.w	r8, [r2, #72]	; 0x48
  oqp->q_wrptr   = bp;
  202156:	f8c2 8044 	str.w	r8, [r2, #68]	; 0x44
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  20215a:	f886 c000 	strb.w	ip, [r6]
  20215e:	f885 c000 	strb.w	ip, [r5]
  oqp->q_notify  = onfy;
  202162:	f8df 8180 	ldr.w	r8, [pc, #384]	; 2022e4 <main+0x664>
  PWMD3.tim = STM32_TIM3;
  202166:	f8df c180 	ldr.w	ip, [pc, #384]	; 2022e8 <main+0x668>
  oqp->q_top     = bp + size;
  20216a:	6411      	str	r1, [r2, #64]	; 0x40
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20216c:	2180      	movs	r1, #128	; 0x80
  oqp->q_notify  = onfy;
  20216e:	f8c2 804c 	str.w	r8, [r2, #76]	; 0x4c
  202172:	f8c2 9030 	str.w	r9, [r2, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
  202176:	f8c2 9034 	str.w	r9, [r2, #52]	; 0x34
  20217a:	f8c5 c018 	str.w	ip, [r5, #24]
  SD3.usart = USART3;
  20217e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 2022ec <main+0x66c>
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  202182:	f8df c16c 	ldr.w	ip, [pc, #364]	; 2022f0 <main+0x670>
  202186:	f8df 916c 	ldr.w	r9, [pc, #364]	; 2022f4 <main+0x674>
  iqp->q_notify  = infy;
  20218a:	6293      	str	r3, [r2, #40]	; 0x28
  20218c:	f8c2 8054 	str.w	r8, [r2, #84]	; 0x54
  202190:	f04f 0820 	mov.w	r8, #32
  gptp->config = NULL;
  202194:	6073      	str	r3, [r6, #4]
  pwmp->config   = NULL;
  202196:	606b      	str	r3, [r5, #4]
  pwmp->enabled  = 0;
  202198:	60eb      	str	r3, [r5, #12]
  iqp->q_link    = link;
  20219a:	62d2      	str	r2, [r2, #44]	; 0x2c
  oqp->q_link    = link;
  20219c:	6512      	str	r2, [r2, #80]	; 0x50
  PWMD3.channels = STM32_TIM3_CHANNELS;
  20219e:	f885 a010 	strb.w	sl, [r5, #16]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2021a2:	f880 7327 	strb.w	r7, [r0, #807]	; 0x327
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2021a6:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2021aa:	6041      	str	r1, [r0, #4]
  2021ac:	f8cc 9004 	str.w	r9, [ip, #4]
  SysTick->VAL = 0;
  2021b0:	f8cc 3008 	str.w	r3, [ip, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  2021b4:	2307      	movs	r3, #7
  2021b6:	f8cc 3000 	str.w	r3, [ip]

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  2021ba:	f880 1c23 	strb.w	r1, [r0, #3107]	; 0xc23
  2021be:	f388 8811 	msr	BASEPRI, r8
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  2021c2:	7a13      	ldrb	r3, [r2, #8]
  2021c4:	2b01      	cmp	r3, #1
  2021c6:	f000 81c9 	beq.w	20255c <main+0x8dc>
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2021ca:	6d93      	ldr	r3, [r2, #88]	; 0x58
  u->ICR = 0xFFFFFFFFU;
  2021cc:	f04f 30ff 	mov.w	r0, #4294967295
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2021d0:	4933      	ldr	r1, [pc, #204]	; (2022a0 <main+0x620>)
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  2021d2:	f04f 0c40 	mov.w	ip, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  2021d6:	f04f 0e01 	mov.w	lr, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  2021da:	f240 182d 	movw	r8, #301	; 0x12d
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2021de:	fba1 3103 	umull	r3, r1, r1, r3
  USART_TypeDef *u = sdp->usart;
  2021e2:	6d53      	ldr	r3, [r2, #84]	; 0x54
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2021e4:	0c09      	lsrs	r1, r1, #16
  2021e6:	60d9      	str	r1, [r3, #12]
  sdp->state = SD_READY;
  2021e8:	2102      	movs	r1, #2
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  2021ea:	f8c3 c004 	str.w	ip, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  2021ee:	f8c3 e008 	str.w	lr, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  2021f2:	f8c3 8000 	str.w	r8, [r3]
  2021f6:	f04f 0800 	mov.w	r8, #0
  u->ICR = 0xFFFFFFFFU;
  2021fa:	6218      	str	r0, [r3, #32]
  2021fc:	7211      	strb	r1, [r2, #8]
    sdp->rxmask = 0xFF;
  2021fe:	f882 005c 	strb.w	r0, [r2, #92]	; 0x5c
  202202:	f388 8811 	msr	BASEPRI, r8
* @note     Stable for repeated calls 
*/
void debug_stream_init( void )
{
    sdStart( debug_serial, &sd_st_cfg );
    palSetPadMode( GPIOD, 8, PAL_MODE_ALTERNATE(7) );
  202206:	f240 3282 	movw	r2, #898	; 0x382
  20220a:	f44f 7180 	mov.w	r1, #256	; 0x100
  20220e:	4825      	ldr	r0, [pc, #148]	; (2022a4 <main+0x624>)
  202210:	f7ff f84e 	bl	2012b0 <_pal_lld_setgroupmode>
    palSetPadMode( GPIOD, 9, PAL_MODE_ALTERNATE(7) );
  202214:	f240 3282 	movw	r2, #898	; 0x382
  202218:	f44f 7100 	mov.w	r1, #512	; 0x200
  20221c:	4821      	ldr	r0, [pc, #132]	; (2022a4 <main+0x624>)
  20221e:	f7ff f847 	bl	2012b0 <_pal_lld_setgroupmode>
  202222:	2320      	movs	r3, #32
  202224:	f383 8811 	msr	BASEPRI, r3
  if (gptp->state == GPT_STOP) {
  202228:	7833      	ldrb	r3, [r6, #0]
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
  20222a:	4a1f      	ldr	r2, [pc, #124]	; (2022a8 <main+0x628>)
  20222c:	2b01      	cmp	r3, #1
  20222e:	6072      	str	r2, [r6, #4]
  202230:	f000 8223 	beq.w	20267a <main+0x9fa>
  202234:	68b3      	ldr	r3, [r6, #8]
  202236:	4a1d      	ldr	r2, [pc, #116]	; (2022ac <main+0x62c>)
  202238:	095b      	lsrs	r3, r3, #5
  20223a:	fba2 2303 	umull	r2, r3, r2, r3
  20223e:	09db      	lsrs	r3, r3, #7
  202240:	3b01      	subs	r3, #1
  202242:	b29b      	uxth	r3, r3
  202244:	e058      	b.n	2022f8 <main+0x678>
  202246:	bf00      	nop
  202248:	20000a10 	.word	0x20000a10
  20224c:	40026000 	.word	0x40026000
  202250:	40026400 	.word	0x40026400
  202254:	2000083c 	.word	0x2000083c
  202258:	40020000 	.word	0x40020000
  20225c:	20000ac4 	.word	0x20000ac4
  202260:	18004001 	.word	0x18004001
  202264:	01555051 	.word	0x01555051
  202268:	00bb00b0 	.word	0x00bb00b0
  20226c:	55505555 	.word	0x55505555
  202270:	003fcfff 	.word	0x003fcfff
  202274:	40021800 	.word	0x40021800
  202278:	40012000 	.word	0x40012000
  20227c:	08002844 	.word	0x08002844
  202280:	00022c16 	.word	0x00022c16
  202284:	e000e100 	.word	0xe000e100
  202288:	0337f980 	.word	0x0337f980
  20228c:	080028cc 	.word	0x080028cc
  202290:	20000870 	.word	0x20000870
  202294:	40000800 	.word	0x40000800
  202298:	20000ab0 	.word	0x20000ab0
  20229c:	20000880 	.word	0x20000880
  2022a0:	91a2b3c5 	.word	0x91a2b3c5
  2022a4:	40020c00 	.word	0x40020c00
  2022a8:	080028b4 	.word	0x080028b4
  2022ac:	0a7c5ac5 	.word	0x0a7c5ac5
  2022b0:	40023800 	.word	0x40023800
  2022b4:	40005551 	.word	0x40005551
  2022b8:	b0000bb0 	.word	0xb0000bb0
  2022bc:	000aaa0a 	.word	0x000aaa0a
  2022c0:	2aae8028 	.word	0x2aae8028
  2022c4:	20000aa0 	.word	0x20000aa0
  2022c8:	20000ab0 	.word	0x20000ab0
  2022cc:	cffffff3 	.word	0xcffffff3
  2022d0:	40021400 	.word	0x40021400
  2022d4:	3cccf000 	.word	0x3cccf000
  2022d8:	51155555 	.word	0x51155555
  2022dc:	00b0b000 	.word	0x00b0b000
  2022e0:	55555550 	.word	0x55555550
  2022e4:	00200c11 	.word	0x00200c11
  2022e8:	40000400 	.word	0x40000400
  2022ec:	40004800 	.word	0x40004800
  2022f0:	e000e010 	.word	0xe000e010
  2022f4:	00034bbf 	.word	0x00034bbf
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  2022f8:	68f1      	ldr	r1, [r6, #12]
  2022fa:	2200      	movs	r2, #0
  gptp->tim->CR2 = gptp->config->cr2;
  2022fc:	2020      	movs	r0, #32
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
  2022fe:	f04f 0e02 	mov.w	lr, #2
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  202302:	600a      	str	r2, [r1, #0]
  gptp->tim->CR2 = gptp->config->cr2;
  202304:	6048      	str	r0, [r1, #4]
  202306:	f886 e000 	strb.w	lr, [r6]
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
  20230a:	628b      	str	r3, [r1, #40]	; 0x28
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  20230c:	610a      	str	r2, [r1, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  20230e:	60ca      	str	r2, [r1, #12]
  202310:	f382 8811 	msr	BASEPRI, r2
  202314:	f380 8811 	msr	BASEPRI, r0
  if (adcp->state == ADC_STOP) {
  202318:	7823      	ldrb	r3, [r4, #0]
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
  20231a:	6062      	str	r2, [r4, #4]
  20231c:	2b01      	cmp	r3, #1
  20231e:	f000 8124 	beq.w	20256a <main+0x8ea>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
  202322:	2302      	movs	r3, #2
  202324:	2700      	movs	r7, #0
  202326:	7023      	strb	r3, [r4, #0]
  202328:	f387 8811 	msr	BASEPRI, r7
	debug_stream_init( );

	    gptStart(&GPTD4, &gpt4cfg1);
		// ADC driver
		adcStart(&ADCD1, NULL);
		palSetLineMode( LINE_ADC123_IN3, PAL_MODE_INPUT_ANALOG );   // PA3
  20232c:	2203      	movs	r2, #3
  20232e:	2108      	movs	r1, #8
  202330:	48b5      	ldr	r0, [pc, #724]	; (202608 <main+0x988>)
  202332:	f7fe ffbd 	bl	2012b0 <_pal_lld_setgroupmode>
  202336:	f04f 0e20 	mov.w	lr, #32
  20233a:	f38e 8811 	msr	BASEPRI, lr
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
  20233e:	2003      	movs	r0, #3
    mode |= STM32_DMA_CR_CIRC;
  202340:	6b23      	ldr	r3, [r4, #48]	; 0x30
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  202342:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  adcp->depth    = depth;
  202344:	2101      	movs	r1, #1
  adcp->state    = ADC_ACTIVE;
  202346:	7020      	strb	r0, [r4, #0]
    mode |= STM32_DMA_CR_CIRC;
  202348:	f443 7880 	orr.w	r8, r3, #256	; 0x100
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  20234c:	6812      	ldr	r2, [r2, #0]
  adcp->adc->SMPR1 = grpp->smpr1;
  20234e:	f04f 0c06 	mov.w	ip, #6
  adcp->samples  = samples;
  202352:	4bae      	ldr	r3, [pc, #696]	; (20260c <main+0x98c>)
  adcp->grpp     = grpp;
  202354:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 20263c <main+0x9bc>
  adcp->depth    = depth;
  202358:	60e1      	str	r1, [r4, #12]
  adcp->grpp     = grpp;
  20235a:	f8c4 9010 	str.w	r9, [r4, #16]
  adcp->adc->SMPR2 = grpp->smpr2;
  20235e:	f44f 6940 	mov.w	r9, #3072	; 0xc00
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  202362:	60d3      	str	r3, [r2, #12]
  adcp->samples  = samples;
  202364:	60a3      	str	r3, [r4, #8]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
  202366:	6051      	str	r1, [r2, #4]
  dmaStreamSetMode(adcp->dmastp, mode);
  202368:	f8c2 8000 	str.w	r8, [r2]
  dmaStreamEnable(adcp->dmastp);
  20236c:	f8d2 8000 	ldr.w	r8, [r2]
  adcp->adc->SR    = 0;
  202370:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  dmaStreamEnable(adcp->dmastp);
  202372:	ea48 0401 	orr.w	r4, r8, r1
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
  202376:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 202640 <main+0x9c0>
  dmaStreamEnable(adcp->dmastp);
  20237a:	6014      	str	r4, [r2, #0]
    adcp->adc->CR2 = cr2;
  20237c:	4aa4      	ldr	r2, [pc, #656]	; (202610 <main+0x990>)
  adcp->adc->SR    = 0;
  20237e:	601f      	str	r7, [r3, #0]
  adcp->adc->SMPR1 = grpp->smpr1;
  202380:	f8c3 c00c 	str.w	ip, [r3, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
  202384:	f8c3 9010 	str.w	r9, [r3, #16]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
  202388:	62df      	str	r7, [r3, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
  20238a:	631f      	str	r7, [r3, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
  20238c:	6358      	str	r0, [r3, #52]	; 0x34
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
  20238e:	f8c3 8004 	str.w	r8, [r3, #4]
    adcp->adc->CR2 = cr2;
  202392:	609a      	str	r2, [r3, #8]
  202394:	f387 8811 	msr	BASEPRI, r7
  202398:	f38e 8811 	msr	BASEPRI, lr
  if (NULL != gptp->config->callback)
  20239c:	6872      	ldr	r2, [r6, #4]
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  20239e:	2464      	movs	r4, #100	; 0x64
  2023a0:	68f3      	ldr	r3, [r6, #12]
  if (NULL != gptp->config->callback)
  2023a2:	6852      	ldr	r2, [r2, #4]
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
  2023a4:	7030      	strb	r0, [r6, #0]
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  2023a6:	62dc      	str	r4, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  2023a8:	6159      	str	r1, [r3, #20]
  gptp->tim->CNT = 0;                           /* Reset counter.           */
  2023aa:	625f      	str	r7, [r3, #36]	; 0x24
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  2023ac:	611f      	str	r7, [r3, #16]
  if (NULL != gptp->config->callback)
  2023ae:	b112      	cbz	r2, 2023b6 <main+0x736>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
  2023b0:	68da      	ldr	r2, [r3, #12]
  2023b2:	430a      	orrs	r2, r1
  2023b4:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  2023b6:	2285      	movs	r2, #133	; 0x85
  2023b8:	2600      	movs	r6, #0
  2023ba:	601a      	str	r2, [r3, #0]
  2023bc:	f386 8811 	msr	BASEPRI, r6

		adcStartConversion(&ADCD1, &adcgrpcfg1, samples1, ADC1_BUF_DEPTH);
		gptStartContinuous(&GPTD4, gpt4cfg1.frequency/1000);

	    palSetLineMode( PAL_LINE( GPIOB, 0 ), PAL_MODE_ALTERNATE(2) );
  2023c0:	f44f 7281 	mov.w	r2, #258	; 0x102
  2023c4:	2101      	movs	r1, #1
  2023c6:	4893      	ldr	r0, [pc, #588]	; (202614 <main+0x994>)
  2023c8:	f7fe ff72 	bl	2012b0 <_pal_lld_setgroupmode>
  2023cc:	2320      	movs	r3, #32
  2023ce:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  2023d2:	4c91      	ldr	r4, [pc, #580]	; (202618 <main+0x998>)
  if (pwmp->state == PWM_STOP) {
  2023d4:	782b      	ldrb	r3, [r5, #0]
  pwmp->period = config->period;
  2023d6:	6861      	ldr	r1, [r4, #4]
  2023d8:	2b01      	cmp	r3, #1
  pwmp->config = config;
  2023da:	606c      	str	r4, [r5, #4]
  pwmp->period = config->period;
  2023dc:	60a9      	str	r1, [r5, #8]
  2023de:	f000 809e 	beq.w	20251e <main+0x89e>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
  2023e2:	69ab      	ldr	r3, [r5, #24]
  2023e4:	601e      	str	r6, [r3, #0]
    if (pwmp->channels > 4) {
  2023e6:	7c2a      	ldrb	r2, [r5, #16]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
  2023e8:	635e      	str	r6, [r3, #52]	; 0x34
    if (pwmp->channels > 4) {
  2023ea:	2a04      	cmp	r2, #4
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
  2023ec:	639e      	str	r6, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
  2023ee:	63de      	str	r6, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
  2023f0:	641e      	str	r6, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
  2023f2:	d901      	bls.n	2023f8 <main+0x778>
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
  2023f4:	659e      	str	r6, [r3, #88]	; 0x58
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
  2023f6:	65de      	str	r6, [r3, #92]	; 0x5c
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  2023f8:	2000      	movs	r0, #0
  2023fa:	696a      	ldr	r2, [r5, #20]
  2023fc:	6258      	str	r0, [r3, #36]	; 0x24
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  2023fe:	6826      	ldr	r6, [r4, #0]
  pwmp->tim->ARR  = pwmp->period - 1;
  202400:	1e4f      	subs	r7, r1, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  202402:	68e0      	ldr	r0, [r4, #12]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  202404:	fbb2 f1f6 	udiv	r1, r2, r6
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  202408:	f000 020f 	and.w	r2, r0, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  20240c:	3901      	subs	r1, #1
  pwmp->tim->CR2  = pwmp->config->cr2;
  20240e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  202410:	2a01      	cmp	r2, #1
  pwmp->tim->PSC  = psc;
  202412:	6299      	str	r1, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
  202414:	62df      	str	r7, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
  202416:	6058      	str	r0, [r3, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  202418:	d003      	beq.n	202422 <main+0x7a2>
  ccer = 0;
  20241a:	2a02      	cmp	r2, #2
  20241c:	bf0c      	ite	eq
  20241e:	2203      	moveq	r2, #3
  202420:	2200      	movne	r2, #0
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  202422:	6961      	ldr	r1, [r4, #20]
  202424:	f001 010f 	and.w	r1, r1, #15
  202428:	2901      	cmp	r1, #1
  20242a:	d003      	beq.n	202434 <main+0x7b4>
  20242c:	2902      	cmp	r1, #2
  20242e:	d103      	bne.n	202438 <main+0x7b8>
    ccer |= STM32_TIM_CCER_CC2P;
  202430:	f042 0220 	orr.w	r2, r2, #32
    ccer |= STM32_TIM_CCER_CC2E;
  202434:	f042 0210 	orr.w	r2, r2, #16
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  202438:	69e1      	ldr	r1, [r4, #28]
  20243a:	f001 010f 	and.w	r1, r1, #15
  20243e:	2901      	cmp	r1, #1
  202440:	d003      	beq.n	20244a <main+0x7ca>
  202442:	2902      	cmp	r1, #2
  202444:	d103      	bne.n	20244e <main+0x7ce>
    ccer |= STM32_TIM_CCER_CC3P;
  202446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
  20244a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
  20244e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  202450:	f001 010f 	and.w	r1, r1, #15
  202454:	2901      	cmp	r1, #1
  202456:	d003      	beq.n	202460 <main+0x7e0>
  202458:	2902      	cmp	r1, #2
  20245a:	d103      	bne.n	202464 <main+0x7e4>
    ccer |= STM32_TIM_CCER_CC4P;
  20245c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
  202460:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  202464:	6c20      	ldr	r0, [r4, #64]	; 0x40
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  202466:	2100      	movs	r1, #0
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  202468:	2701      	movs	r7, #1
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  20246a:	2685      	movs	r6, #133	; 0x85
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  20246c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
  202470:	2402      	movs	r4, #2
  pwmp->tim->CCER  = ccer;
  202472:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  202474:	615f      	str	r7, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  202476:	6119      	str	r1, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  202478:	60d8      	str	r0, [r3, #12]
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  20247a:	601e      	str	r6, [r3, #0]
  pwmp->enabled = 0;
  20247c:	60e9      	str	r1, [r5, #12]
  pwmp->state = PWM_READY;
  20247e:	702c      	strb	r4, [r5, #0]
  202480:	f381 8811 	msr	BASEPRI, r1
  202484:	2320      	movs	r3, #32
  202486:	f383 8811 	msr	BASEPRI, r3
  20248a:	f8bb 4026 	ldrh.w	r4, [fp, #38]	; 0x26
  20248e:	b2a4      	uxth	r4, r4
  202490:	f381 8811 	msr	BASEPRI, r1
	    int duty_cycle = 0;

	    while (true)
	    {

	    	duty_cycle = 2.44*av;
  202494:	a75a      	add	r7, pc, #360	; (adr r7, 202600 <main+0x980>)
  202496:	e9d7 6700 	ldrd	r6, r7, [r7]
  20249a:	4689      	mov	r9, r1
	    	    	/*if( duty_cycle >= 10000 )
	    	    	{
	    	    		duty_cycle = 0;
	    	    	}*/
	    	pwmEnableChannel( &PWMD3, 2, duty_cycle );
	        sdWrite(&SD3,(uint8_t *)&value, 2);
  20249c:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 202644 <main+0x9c4>
	    	duty_cycle = 2.44*av;
  2024a0:	e9cd 6700 	strd	r6, r7, [sp]
  2024a4:	4b5d      	ldr	r3, [pc, #372]	; (20261c <main+0x99c>)
  2024a6:	2720      	movs	r7, #32
  2024a8:	8818      	ldrh	r0, [r3, #0]
  2024aa:	f7fe f879 	bl	2005a0 <__aeabi_i2d>
  2024ae:	e9dd 2300 	ldrd	r2, r3, [sp]
  2024b2:	f7fe f8db 	bl	20066c <__aeabi_dmul>
  2024b6:	f7fe faeb 	bl	200a90 <__aeabi_d2iz>
  2024ba:	f387 8811 	msr	BASEPRI, r7

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
  2024be:	68eb      	ldr	r3, [r5, #12]
    pwmp->tim->CCR[channel] = width;
  2024c0:	69aa      	ldr	r2, [r5, #24]
  2024c2:	f043 0304 	orr.w	r3, r3, #4
  2024c6:	63d0      	str	r0, [r2, #60]	; 0x3c
  2024c8:	60eb      	str	r3, [r5, #12]
  2024ca:	f389 8811 	msr	BASEPRI, r9
	        sdWrite(&SD3,(uint8_t *)&value, 2);
  2024ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2024d2:	4650      	mov	r0, sl
  2024d4:	2202      	movs	r2, #2
  2024d6:	4952      	ldr	r1, [pc, #328]	; (202620 <main+0x9a0>)
	        sdWrite(&SD3,(uint8_t *)&av, 2);
	    	//chprintf(((BaseSequentialStream *)&SD7), "ADCvalue=%d\tDuty_Cycle=%d\n\r", samples1[0],duty_cycle);
	    	//dbgprintf( "ADCvalue=%d\tSum=%d\tAv=%d\n\r",value, sum, av);
	    	prev = chThdSleepUntilWindowed(prev, prev + MS2ST(10));
  2024d8:	f104 080a 	add.w	r8, r4, #10
	        sdWrite(&SD3,(uint8_t *)&value, 2);
  2024dc:	f7ff f808 	bl	2014f0 <oqWriteTimeout>
	        sdWrite(&SD3,(uint8_t *)&av, 2);
  2024e0:	4650      	mov	r0, sl
  2024e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2024e6:	2202      	movs	r2, #2
  2024e8:	494c      	ldr	r1, [pc, #304]	; (20261c <main+0x99c>)
  2024ea:	f7ff f801 	bl	2014f0 <oqWriteTimeout>
	    	prev = chThdSleepUntilWindowed(prev, prev + MS2ST(10));
  2024ee:	fa1f f888 	uxth.w	r8, r8
  2024f2:	f387 8811 	msr	BASEPRI, r7
  2024f6:	f8bb 1026 	ldrh.w	r1, [fp, #38]	; 0x26
  2024fa:	b289      	uxth	r1, r1
  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
  2024fc:	1b0c      	subs	r4, r1, r4
  if (chVTIsTimeWithinX(time, prev, next)) {
  2024fe:	b2a4      	uxth	r4, r4
  202500:	2c09      	cmp	r4, #9
  202502:	d805      	bhi.n	202510 <main+0x890>
    chThdSleepS(next - time);
  202504:	eba8 0101 	sub.w	r1, r8, r1
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  202508:	2008      	movs	r0, #8
  20250a:	b289      	uxth	r1, r1
  20250c:	f7fe ff90 	bl	201430 <chSchGoSleepTimeoutS>
  202510:	f389 8811 	msr	BASEPRI, r9
  202514:	4644      	mov	r4, r8
  202516:	e7c5      	b.n	2024a4 <main+0x824>
  tp->state = CH_STATE_READY;
  202518:	f882 1020 	strb.w	r1, [r2, #32]
  20251c:	e7fe      	b.n	20251c <main+0x89c>
      rccEnableTIM3(FALSE);
  20251e:	4b41      	ldr	r3, [pc, #260]	; (202624 <main+0x9a4>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202520:	f04f 5e00 	mov.w	lr, #536870912	; 0x20000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202524:	f04f 0c70 	mov.w	ip, #112	; 0x70
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  202528:	f646 0768 	movw	r7, #26728	; 0x6868
      rccEnableTIM3(FALSE);
  20252c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  20252e:	f042 0202 	orr.w	r2, r2, #2
  202532:	641a      	str	r2, [r3, #64]	; 0x40
      rccResetTIM3();
  202534:	6a18      	ldr	r0, [r3, #32]
  202536:	4a3c      	ldr	r2, [pc, #240]	; (202628 <main+0x9a8>)
  202538:	f040 0002 	orr.w	r0, r0, #2
  20253c:	6218      	str	r0, [r3, #32]
  20253e:	621e      	str	r6, [r3, #32]
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  202540:	483a      	ldr	r0, [pc, #232]	; (20262c <main+0x9ac>)
  202542:	f882 c31d 	strb.w	ip, [r2, #797]	; 0x31d
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  202546:	69ab      	ldr	r3, [r5, #24]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202548:	f8c2 e180 	str.w	lr, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20254c:	f8c2 e000 	str.w	lr, [r2]
      pwmp->clock = STM32_TIMCLK1;
  202550:	4a37      	ldr	r2, [pc, #220]	; (202630 <main+0x9b0>)
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  202552:	619f      	str	r7, [r3, #24]
      pwmp->clock = STM32_TIMCLK1;
  202554:	616a      	str	r2, [r5, #20]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
  202556:	61df      	str	r7, [r3, #28]
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  202558:	6558      	str	r0, [r3, #84]	; 0x54
  20255a:	e750      	b.n	2023fe <main+0x77e>
      rccEnableUSART2(FALSE);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
      rccEnableUSART3(FALSE);
  20255c:	f8de 3040 	ldr.w	r3, [lr, #64]	; 0x40
  202560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  202564:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
  202568:	e62f      	b.n	2021ca <main+0x54a>
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
  20256a:	4932      	ldr	r1, [pc, #200]	; (202634 <main+0x9b4>)
      b = dmaStreamAllocate(adcp->dmastp,
  20256c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  20256e:	6808      	ldr	r0, [r1, #0]
  202570:	7a51      	ldrb	r1, [r2, #9]
  202572:	408b      	lsls	r3, r1
  202574:	4203      	tst	r3, r0
  202576:	d169      	bne.n	20264c <main+0x9cc>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
  202578:	4303      	orrs	r3, r0
  20257a:	4f2e      	ldr	r7, [pc, #184]	; (202634 <main+0x9b4>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  20257c:	482e      	ldr	r0, [pc, #184]	; (202638 <main+0x9b8>)
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  20257e:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 202648 <main+0x9c8>

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
  202582:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  202586:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);
  20258a:	603b      	str	r3, [r7, #0]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  20258c:	4f2a      	ldr	r7, [pc, #168]	; (202638 <main+0x9b8>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  20258e:	6044      	str	r4, [r0, #4]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  202590:	f847 e031 	str.w	lr, [r7, r1, lsl #3]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
  202594:	d004      	beq.n	2025a0 <main+0x920>
    rccEnableDMA1(false);
  202596:	4823      	ldr	r0, [pc, #140]	; (202624 <main+0x9a4>)
  202598:	6b01      	ldr	r1, [r0, #48]	; 0x30
  20259a:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  20259e:	6301      	str	r1, [r0, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
  2025a0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
  2025a4:	d004      	beq.n	2025b0 <main+0x930>
    rccEnableDMA2(false);
  2025a6:	491f      	ldr	r1, [pc, #124]	; (202624 <main+0x9a4>)
  2025a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  2025aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  2025ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  2025b0:	6813      	ldr	r3, [r2, #0]
  2025b2:	6819      	ldr	r1, [r3, #0]
  2025b4:	f021 011f 	bic.w	r1, r1, #31
  2025b8:	6019      	str	r1, [r3, #0]
  2025ba:	6819      	ldr	r1, [r3, #0]
  2025bc:	f011 0c01 	ands.w	ip, r1, #1
  2025c0:	d1fb      	bne.n	2025ba <main+0x93a>
  2025c2:	7a11      	ldrb	r1, [r2, #8]
  2025c4:	273d      	movs	r7, #61	; 0x3d
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
  2025c6:	2021      	movs	r0, #33	; 0x21
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025c8:	f8df e05c 	ldr.w	lr, [pc, #92]	; 202628 <main+0x9a8>
  dmaStreamDisable(dmastp);
  2025cc:	408f      	lsls	r7, r1
  2025ce:	6851      	ldr	r1, [r2, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025d0:	f04f 0801 	mov.w	r8, #1
  2025d4:	600f      	str	r7, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025d6:	2760      	movs	r7, #96	; 0x60
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  2025d8:	f8c3 c000 	str.w	ip, [r3]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
  2025dc:	6158      	str	r0, [r3, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
  2025de:	7a92      	ldrb	r2, [r2, #10]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025e0:	f002 0c1f 	and.w	ip, r2, #31
  2025e4:	0950      	lsrs	r0, r2, #5
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025e6:	4472      	add	r2, lr
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025e8:	fa08 f10c 	lsl.w	r1, r8, ip
  2025ec:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025f0:	f882 7300 	strb.w	r7, [r2, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025f4:	f8cc 1180 	str.w	r1, [ip, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025f8:	f84e 1020 	str.w	r1, [lr, r0, lsl #2]
  2025fc:	e027      	b.n	20264e <main+0x9ce>
  2025fe:	bf00      	nop
  202600:	b851eb85 	.word	0xb851eb85
  202604:	4003851e 	.word	0x4003851e
  202608:	40020000 	.word	0x40020000
  20260c:	20000a9c 	.word	0x20000a9c
  202610:	1c000301 	.word	0x1c000301
  202614:	40020400 	.word	0x40020400
  202618:	20020000 	.word	0x20020000
  20261c:	2000089c 	.word	0x2000089c
  202620:	20000ac0 	.word	0x20000ac0
  202624:	40023800 	.word	0x40023800
  202628:	e000e100 	.word	0xe000e100
  20262c:	01016868 	.word	0x01016868
  202630:	066ff300 	.word	0x066ff300
  202634:	20000a90 	.word	0x20000a90
  202638:	20000a10 	.word	0x20000a10
  20263c:	08002874 	.word	0x08002874
  202640:	04000100 	.word	0x04000100
  202644:	20000af4 	.word	0x20000af4
  202648:	00201a01 	.word	0x00201a01
  20264c:	6813      	ldr	r3, [r2, #0]
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
  20264e:	4918      	ldr	r1, [pc, #96]	; (2026b0 <main+0xa30>)
    adcp->adc->CR1 = 0;
  202650:	2000      	movs	r0, #0
      rccEnableADC1(FALSE);
  202652:	4a18      	ldr	r2, [pc, #96]	; (2026b4 <main+0xa34>)
    adcp->adc->CR2 = ADC_CR2_ADON;
  202654:	2701      	movs	r7, #1
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
  202656:	6099      	str	r1, [r3, #8]
      rccEnableADC1(FALSE);
  202658:	6c53      	ldr	r3, [r2, #68]	; 0x44
  20265a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  20265e:	6453      	str	r3, [r2, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
  202660:	f8d1 32b8 	ldr.w	r3, [r1, #696]	; 0x2b8
    adcp->adc->CR1 = 0;
  202664:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
  202666:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
  20266a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20266e:	f8c1 32b8 	str.w	r3, [r1, #696]	; 0x2b8
    adcp->adc->CR1 = 0;
  202672:	6050      	str	r0, [r2, #4]
    adcp->adc->CR2 = 0;
  202674:	6090      	str	r0, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
  202676:	6097      	str	r7, [r2, #8]
  202678:	e653      	b.n	202322 <main+0x6a2>
      rccEnableTIM4(FALSE);
  20267a:	4a0e      	ldr	r2, [pc, #56]	; (2026b4 <main+0xa34>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20267c:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202680:	490d      	ldr	r1, [pc, #52]	; (2026b8 <main+0xa38>)
  202682:	f04f 0c70 	mov.w	ip, #112	; 0x70
  202686:	6c13      	ldr	r3, [r2, #64]	; 0x40
  202688:	f043 0304 	orr.w	r3, r3, #4
  20268c:	6413      	str	r3, [r2, #64]	; 0x40
      gptp->clock = STM32_TIMCLK1;
  20268e:	f240 4337 	movw	r3, #1079	; 0x437
      rccResetTIM4();
  202692:	6a10      	ldr	r0, [r2, #32]
  202694:	f040 0004 	orr.w	r0, r0, #4
  202698:	6210      	str	r0, [r2, #32]
  20269a:	f8c2 8020 	str.w	r8, [r2, #32]
      gptp->clock = STM32_TIMCLK1;
  20269e:	4a07      	ldr	r2, [pc, #28]	; (2026bc <main+0xa3c>)
  2026a0:	f881 c31e 	strb.w	ip, [r1, #798]	; 0x31e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2026a4:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
  2026a8:	60b2      	str	r2, [r6, #8]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2026aa:	f8c1 e000 	str.w	lr, [r1]
  2026ae:	e623      	b.n	2022f8 <main+0x678>
  2026b0:	4001204c 	.word	0x4001204c
  2026b4:	40023800 	.word	0x40023800
  2026b8:	e000e100 	.word	0xe000e100
  2026bc:	066ff300 	.word	0x066ff300

002026c0 <chTMStartMeasurementX.constprop.34>:
  return DWT->CYCCNT;
  2026c0:	4b01      	ldr	r3, [pc, #4]	; (2026c8 <chTMStartMeasurementX.constprop.34+0x8>)
  2026c2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
  2026c4:	6083      	str	r3, [r0, #8]
  2026c6:	4770      	bx	lr
  2026c8:	e0001000 	.word	0xe0001000
  2026cc:	00000000 	.word	0x00000000

002026d0 <chEvtBroadcastFlagsI.constprop.31>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  2026d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  2026d2:	4f17      	ldr	r7, [pc, #92]	; (202730 <chEvtBroadcastFlagsI.constprop.31+0x60>)
  2026d4:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  2026d8:	42bc      	cmp	r4, r7
  2026da:	d021      	beq.n	202720 <chEvtBroadcastFlagsI.constprop.31+0x50>
  2026dc:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  2026de:	2600      	movs	r6, #0
  2026e0:	e002      	b.n	2026e8 <chEvtBroadcastFlagsI.constprop.31+0x18>
    elp = elp->next;
  2026e2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2026e4:	42bc      	cmp	r4, r7
  2026e6:	d01b      	beq.n	202720 <chEvtBroadcastFlagsI.constprop.31+0x50>
    elp->flags |= flags;
  2026e8:	68e3      	ldr	r3, [r4, #12]
  2026ea:	432b      	orrs	r3, r5
  2026ec:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  2026ee:	b115      	cbz	r5, 2026f6 <chEvtBroadcastFlagsI.constprop.31+0x26>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  2026f0:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  2026f2:	4213      	tst	r3, r2
  2026f4:	d0f5      	beq.n	2026e2 <chEvtBroadcastFlagsI.constprop.31+0x12>
      chEvtSignalI(elp->listener, elp->events);
  2026f6:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  2026f8:	68a3      	ldr	r3, [r4, #8]
  2026fa:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2026fc:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  202700:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  202702:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  202704:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  202706:	d00c      	beq.n	202722 <chEvtBroadcastFlagsI.constprop.31+0x52>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  202708:	2a0b      	cmp	r2, #11
  20270a:	d1ea      	bne.n	2026e2 <chEvtBroadcastFlagsI.constprop.31+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  20270c:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  20270e:	ea32 0303 	bics.w	r3, r2, r3
  202712:	d1e6      	bne.n	2026e2 <chEvtBroadcastFlagsI.constprop.31+0x12>
    tp->u.rdymsg = MSG_OK;
  202714:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  202716:	f7ff f843 	bl	2017a0 <chSchReadyI>
    elp = elp->next;
  20271a:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  20271c:	42bc      	cmp	r4, r7
  20271e:	d1e3      	bne.n	2026e8 <chEvtBroadcastFlagsI.constprop.31+0x18>
  202720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  202722:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  202724:	4213      	tst	r3, r2
  202726:	d0dc      	beq.n	2026e2 <chEvtBroadcastFlagsI.constprop.31+0x12>
    tp->u.rdymsg = MSG_OK;
  202728:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  20272a:	f7ff f839 	bl	2017a0 <chSchReadyI>
  20272e:	e7f4      	b.n	20271a <chEvtBroadcastFlagsI.constprop.31+0x4a>
  202730:	20000ac4 	.word	0x20000ac4
