
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f001 fae7 	bl	2017f0 <__core_init>
  200222:	f000 fd15 	bl	200c50 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f001 fa81 	bl	201770 <__init_ram_areas>
  20026e:	f001 fab7 	bl	2017e0 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f000 f935 	bl	2004f0 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f001 ba9b 	b.w	2017d0 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	08001d78 	.word	0x08001d78
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020044 	.word	0x20020044
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000ac8 	.word	0x20000ac8
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f001 fa0e 	bl	201710 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f000 ffec 	bl	2012d0 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>
  2002fc:	0000      	movs	r0, r0
	...

00200300 <notify7>:

#if STM32_SERIAL_USE_UART7 || defined(__DOXYGEN__)
static void notify7(io_queue_t *qp) {

  (void)qp;
  UART7->CR1 |= USART_CR1_TXEIE;
  200300:	4a02      	ldr	r2, [pc, #8]	; (20030c <notify7+0xc>)
  200302:	6813      	ldr	r3, [r2, #0]
  200304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  200308:	6013      	str	r3, [r2, #0]
  20030a:	4770      	bx	lr
  20030c:	40007800 	.word	0x40007800

00200310 <notify8>:

#if STM32_SERIAL_USE_UART8 || defined(__DOXYGEN__)
static void notify8(io_queue_t *qp) {

  (void)qp;
  UART8->CR1 |= USART_CR1_TXEIE;
  200310:	4a02      	ldr	r2, [pc, #8]	; (20031c <notify8+0xc>)
  200312:	6813      	ldr	r3, [r2, #0]
  200314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  200318:	6013      	str	r3, [r2, #0]
  20031a:	4770      	bx	lr
  20031c:	40007c00 	.word	0x40007c00

00200320 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
  200320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  200324:	6d46      	ldr	r6, [r0, #84]	; 0x54
static void serve_interrupt(SerialDriver *sdp) {
  200326:	4604      	mov	r4, r0
  uint32_t cr1 = u->CR1;
  200328:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  20032a:	69f5      	ldr	r5, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  20032c:	072a      	lsls	r2, r5, #28
  u->ICR = isr;
  20032e:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  200330:	d154      	bne.n	2003dc <serve_interrupt+0xbc>
  if (isr & USART_ISR_LBDF) {
  200332:	05eb      	lsls	r3, r5, #23
  200334:	d446      	bmi.n	2003c4 <serve_interrupt+0xa4>
  if (isr & USART_ISR_RXNE) {
  200336:	06a8      	lsls	r0, r5, #26
  200338:	d417      	bmi.n	20036a <serve_interrupt+0x4a>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  20033a:	0639      	lsls	r1, r7, #24
  20033c:	d501      	bpl.n	200342 <serve_interrupt+0x22>
  20033e:	062a      	lsls	r2, r5, #24
  200340:	d468      	bmi.n	200414 <serve_interrupt+0xf4>
  if (isr & USART_ISR_TC) {
  200342:	066b      	lsls	r3, r5, #25
  200344:	d50f      	bpl.n	200366 <serve_interrupt+0x46>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200346:	2320      	movs	r3, #32
  200348:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  20034c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  20034e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  200350:	429a      	cmp	r2, r3
  200352:	f000 8089 	beq.w	200468 <serve_interrupt+0x148>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  200356:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  20035a:	2300      	movs	r3, #0
  20035c:	6037      	str	r7, [r6, #0]
  20035e:	f383 8811 	msr	BASEPRI, r3
  200362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  200366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  20036a:	2320      	movs	r3, #32
  20036c:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  200370:	6a72      	ldr	r2, [r6, #36]	; 0x24
  200372:	f894 805c 	ldrb.w	r8, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  200376:	6963      	ldr	r3, [r4, #20]
  200378:	ea08 0802 	and.w	r8, r8, r2
  20037c:	2b00      	cmp	r3, #0
  20037e:	d07c      	beq.n	20047a <serve_interrupt+0x15a>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
  200380:	6a23      	ldr	r3, [r4, #32]
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
  200382:	f104 010c 	add.w	r1, r4, #12
  200386:	6a62      	ldr	r2, [r4, #36]	; 0x24
  200388:	4293      	cmp	r3, r2
  20038a:	d07b      	beq.n	200484 <serve_interrupt+0x164>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
  20038c:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  20038e:	1c58      	adds	r0, r3, #1
  iqp->q_counter++;
  200390:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  200392:	6220      	str	r0, [r4, #32]
  iqp->q_counter++;
  200394:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  200396:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  20039a:	6a22      	ldr	r2, [r4, #32]
  20039c:	69e3      	ldr	r3, [r4, #28]
  20039e:	429a      	cmp	r2, r3
  2003a0:	d25f      	bcs.n	200462 <serve_interrupt+0x142>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
  2003a2:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  2003a4:	4299      	cmp	r1, r3
  2003a6:	d009      	beq.n	2003bc <serve_interrupt+0x9c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
  2003a8:	681a      	ldr	r2, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  2003aa:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  2003ae:	4618      	mov	r0, r3
  2003b0:	60e2      	str	r2, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  2003b2:	6051      	str	r1, [r2, #4]
  tp->u.rdymsg = msg;
  2003b4:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  2003b8:	f001 f962 	bl	201680 <chSchReadyI>
  2003bc:	2300      	movs	r3, #0
  2003be:	f383 8811 	msr	BASEPRI, r3
  2003c2:	e7ba      	b.n	20033a <serve_interrupt+0x1a>
  2003c4:	2320      	movs	r3, #32
  2003c6:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  2003ca:	f44f 7100 	mov.w	r1, #512	; 0x200
  2003ce:	1d20      	adds	r0, r4, #4
  2003d0:	f001 f96e 	bl	2016b0 <chEvtBroadcastFlagsI>
  2003d4:	2300      	movs	r3, #0
  2003d6:	f383 8811 	msr	BASEPRI, r3
  2003da:	e7ac      	b.n	200336 <serve_interrupt+0x16>
    sts |= SD_OVERRUN_ERROR;
  2003dc:	f015 0f08 	tst.w	r5, #8
  2003e0:	bf0c      	ite	eq
  2003e2:	2100      	moveq	r1, #0
  2003e4:	2180      	movne	r1, #128	; 0x80
  if (isr & USART_ISR_PE)
  2003e6:	07eb      	lsls	r3, r5, #31
  2003e8:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  2003ec:	bf48      	it	mi
  2003ee:	f041 0120 	orrmi.w	r1, r1, #32
  if (isr & USART_ISR_FE)
  2003f2:	07a8      	lsls	r0, r5, #30
    sts |= SD_FRAMING_ERROR;
  2003f4:	bf48      	it	mi
  2003f6:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (isr & USART_ISR_NE)
  2003fa:	076a      	lsls	r2, r5, #29
    sts |= SD_NOISE_ERROR;
  2003fc:	bf48      	it	mi
  2003fe:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  200402:	f383 8811 	msr	BASEPRI, r3
  200406:	1d20      	adds	r0, r4, #4
  200408:	f001 f952 	bl	2016b0 <chEvtBroadcastFlagsI>
  20040c:	2300      	movs	r3, #0
  20040e:	f383 8811 	msr	BASEPRI, r3
  200412:	e78e      	b.n	200332 <serve_interrupt+0x12>
  200414:	2320      	movs	r3, #32
  200416:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
  20041a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b = oqGetI(&sdp->oqueue);
  20041c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  200420:	6c62      	ldr	r2, [r4, #68]	; 0x44
  200422:	429a      	cmp	r2, r3
  200424:	d037      	beq.n	200496 <serve_interrupt+0x176>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  200426:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  200428:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  20042a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  oqp->q_counter++;
  20042c:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  20042e:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  200430:	4288      	cmp	r0, r1
  oqp->q_counter++;
  200432:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  200434:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  200438:	d301      	bcc.n	20043e <serve_interrupt+0x11e>
    oqp->q_rdptr = oqp->q_buffer;
  20043a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  20043c:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  20043e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  200440:	459e      	cmp	lr, r3
  200442:	d008      	beq.n	200456 <serve_interrupt+0x136>
  tqp->next             = tp->queue.next;
  200444:	681a      	ldr	r2, [r3, #0]
  tp->u.rdymsg = msg;
  200446:	2100      	movs	r1, #0
  (void) chSchReadyI(tp);
  200448:	4618      	mov	r0, r3
  20044a:	6322      	str	r2, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  20044c:	f8c2 e004 	str.w	lr, [r2, #4]
  tp->u.rdymsg = msg;
  200450:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  200452:	f001 f915 	bl	201680 <chSchReadyI>
      u->TDR = b;
  200456:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  20045a:	2300      	movs	r3, #0
  20045c:	f383 8811 	msr	BASEPRI, r3
  200460:	e76f      	b.n	200342 <serve_interrupt+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  200462:	69a3      	ldr	r3, [r4, #24]
  200464:	6223      	str	r3, [r4, #32]
  200466:	e79c      	b.n	2003a2 <serve_interrupt+0x82>
    if (oqIsEmptyI(&sdp->oqueue))
  200468:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  20046a:	2b00      	cmp	r3, #0
  20046c:	f43f af73 	beq.w	200356 <serve_interrupt+0x36>
  200470:	1d20      	adds	r0, r4, #4
  200472:	2110      	movs	r1, #16
  200474:	f001 f91c 	bl	2016b0 <chEvtBroadcastFlagsI>
  200478:	e76d      	b.n	200356 <serve_interrupt+0x36>
  20047a:	2104      	movs	r1, #4
  20047c:	1860      	adds	r0, r4, r1
  20047e:	f001 f917 	bl	2016b0 <chEvtBroadcastFlagsI>
  200482:	e77d      	b.n	200380 <serve_interrupt+0x60>
  if (iqIsFullI(iqp)) {
  200484:	6962      	ldr	r2, [r4, #20]
  200486:	2a00      	cmp	r2, #0
  200488:	d080      	beq.n	20038c <serve_interrupt+0x6c>
  20048a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  20048e:	1d20      	adds	r0, r4, #4
  200490:	f001 f90e 	bl	2016b0 <chEvtBroadcastFlagsI>
  200494:	e792      	b.n	2003bc <serve_interrupt+0x9c>
  if (oqIsEmptyI(oqp)) {
  200496:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  200498:	2a00      	cmp	r2, #0
  20049a:	d0c4      	beq.n	200426 <serve_interrupt+0x106>
  20049c:	2108      	movs	r1, #8
  20049e:	1d20      	adds	r0, r4, #4
  2004a0:	f001 f906 	bl	2016b0 <chEvtBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  2004a4:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  2004a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  2004ac:	6033      	str	r3, [r6, #0]
  2004ae:	e7d4      	b.n	20045a <serve_interrupt+0x13a>

002004b0 <Vector18C>:
/**
 * @brief   UART8 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART8_HANDLER) {
  2004b0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD8);
  2004b2:	4803      	ldr	r0, [pc, #12]	; (2004c0 <Vector18C+0x10>)
  2004b4:	f7ff ff34 	bl	200320 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
  2004b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2004bc:	f000 be48 	b.w	201150 <_port_irq_epilogue>
  2004c0:	20000854 	.word	0x20000854
	...

002004d0 <Vector188>:
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
  2004d0:	b508      	push	{r3, lr}
  serve_interrupt(&SD7);
  2004d2:	4803      	ldr	r0, [pc, #12]	; (2004e0 <Vector188+0x10>)
  2004d4:	f7ff ff24 	bl	200320 <serve_interrupt>
}
  2004d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2004dc:	f000 be38 	b.w	201150 <_port_irq_epilogue>
  2004e0:	20000a68 	.word	0x20000a68
	...

002004f0 <main>:
  tqp->next = (thread_t *)tqp;
  2004f0:	4cbd      	ldr	r4, [pc, #756]	; (2007e8 <main+0x2f8>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
  2004f2:	2500      	movs	r5, #0
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
  2004f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  2004f8:	f04f 32ff 	mov.w	r2, #4294967295
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  2004fc:	f104 031c 	add.w	r3, r4, #28
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
  200500:	2600      	movs	r6, #0
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  200502:	f64f 08ff 	movw	r8, #63743	; 0xf8ff
    .cr1    = 0,
    .cr2    = 0,
    .cr3    = 0
};
int main(void)
{
  200506:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  20050a:	b089      	sub	sp, #36	; 0x24
  20050c:	2700      	movs	r7, #0
  20050e:	6024      	str	r4, [r4, #0]
  chTMStartMeasurementX(&tm);
  200510:	a802      	add	r0, sp, #8
  tqp->prev = (thread_t *)tqp;
  200512:	6064      	str	r4, [r4, #4]
  ch.vtlist.delta = (systime_t)-1;
  200514:	84a1      	strh	r1, [r4, #36]	; 0x24
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  200516:	61e3      	str	r3, [r4, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  200518:	6223      	str	r3, [r4, #32]
  tmp->best       = (rtcnt_t)-1;
  20051a:	9202      	str	r2, [sp, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
  20051c:	6124      	str	r4, [r4, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  20051e:	6164      	str	r4, [r4, #20]
  ch.rlist.prio = NOPRIO;
  200520:	60a5      	str	r5, [r4, #8]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
  200522:	84e5      	strh	r5, [r4, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  200524:	6725      	str	r5, [r4, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
  200526:	9503      	str	r5, [sp, #12]
  tmp->last       = (rtcnt_t)0;
  200528:	9504      	str	r5, [sp, #16]
  tmp->n          = (ucnt_t)0;
  20052a:	9505      	str	r5, [sp, #20]
  tmp->cumulative = (rttime_t)0;
  20052c:	e9cd 6706 	strd	r6, r7, [sp, #24]
  chTMStartMeasurementX(&tm);
  200530:	f001 f99e 	bl	201870 <chTMStartMeasurementX.constprop.13>
  chTMStopMeasurementX(&tm);
  200534:	a802      	add	r0, sp, #8
  200536:	f000 fea3 	bl	201280 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  20053a:	4bac      	ldr	r3, [pc, #688]	; (2007ec <main+0x2fc>)
  20053c:	49ac      	ldr	r1, [pc, #688]	; (2007f0 <main+0x300>)
  tp->prio      = prio;
  20053e:	f04f 0e80 	mov.w	lr, #128	; 0x80
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
  200542:	4aac      	ldr	r2, [pc, #688]	; (2007f4 <main+0x304>)
  REG_INSERT(tp);
  200544:	f104 062c 	add.w	r6, r4, #44	; 0x2c
  200548:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
  20054a:	f103 0c10 	add.w	ip, r3, #16
  20054e:	49aa      	ldr	r1, [pc, #680]	; (2007f8 <main+0x308>)
  endmem  = __heap_end__;
  200550:	4faa      	ldr	r7, [pc, #680]	; (2007fc <main+0x30c>)
  nextmem = __heap_base__;
  200552:	6011      	str	r1, [r2, #0]
  tp->refs      = (trefs_t)1;
  200554:	2201      	movs	r2, #1
  endmem  = __heap_end__;
  200556:	49aa      	ldr	r1, [pc, #680]	; (200800 <main+0x310>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  200558:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
  20055c:	600f      	str	r7, [r1, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  20055e:	49a9      	ldr	r1, [pc, #676]	; (200804 <main+0x314>)
  ch.tm.offset = tm.last;
  200560:	9804      	ldr	r0, [sp, #16]
  200562:	68cf      	ldr	r7, [r1, #12]
  200564:	6720      	str	r0, [r4, #112]	; 0x70
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  200566:	ea07 0708 	and.w	r7, r7, r8
  reg_value  =  (reg_value                                   |
  20056a:	48a7      	ldr	r0, [pc, #668]	; (200808 <main+0x318>)
  tp->prio      = prio;
  20056c:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
  tp->realprio  = prio;
  200570:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
  200574:	4338      	orrs	r0, r7

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  200576:	f8df e2e8 	ldr.w	lr, [pc, #744]	; 200860 <main+0x370>
  REG_INSERT(tp);
  20057a:	6967      	ldr	r7, [r4, #20]
  tp->name      = name;
  20057c:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 200864 <main+0x374>
  tp->epending  = (eventmask_t)0;
  200580:	6625      	str	r5, [r4, #96]	; 0x60
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  200582:	619d      	str	r5, [r3, #24]
  200584:	f8c3 c010 	str.w	ip, [r3, #16]
  tqp->prev = (thread_t *)tqp;
  200588:	f8c3 c014 	str.w	ip, [r3, #20]
  tlp->next = (thread_t *)tlp;
  20058c:	f104 0c54 	add.w	ip, r4, #84	; 0x54
  REG_INSERT(tp);
  200590:	6427      	str	r7, [r4, #64]	; 0x40
  tp->refs      = (trefs_t)1;
  200592:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
  tp->mtxlist   = NULL;
  200596:	6665      	str	r5, [r4, #100]	; 0x64
  REG_INSERT(tp);
  200598:	63e4      	str	r4, [r4, #60]	; 0x3c
  tp->name      = name;
  20059a:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  REG_INSERT(tp);
  20059e:	613e      	str	r6, [r7, #16]
  tqp->next = (thread_t *)tqp;
  2005a0:	f104 0758 	add.w	r7, r4, #88	; 0x58
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  2005a4:	60c8      	str	r0, [r1, #12]
  2005a6:	f8de 000c 	ldr.w	r0, [lr, #12]
  H_NEXT(&default_heap.header) = NULL;
  2005aa:	609d      	str	r5, [r3, #8]
  2005ac:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  H_PAGES(&default_heap.header) = 0;
  2005b0:	60dd      	str	r5, [r3, #12]
  2005b2:	6166      	str	r6, [r4, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  2005b4:	61a6      	str	r6, [r4, #24]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  2005b6:	2620      	movs	r6, #32
  tlp->next = (thread_t *)tlp;
  2005b8:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
  2005bc:	f04f 0c10 	mov.w	ip, #16
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
  2005c0:	4b92      	ldr	r3, [pc, #584]	; (20080c <main+0x31c>)
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  2005c2:	64a5      	str	r5, [r4, #72]	; 0x48
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  2005c4:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  2005c8:	f8ce 000c 	str.w	r0, [lr, #12]
  DWT->LAR = 0xC5ACCE55U;
  2005cc:	4890      	ldr	r0, [pc, #576]	; (200810 <main+0x320>)
  tqp->next = (thread_t *)tqp;
  2005ce:	65a7      	str	r7, [r4, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  2005d0:	65e7      	str	r7, [r4, #92]	; 0x5c
  2005d2:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  2005d6:	6818      	ldr	r0, [r3, #0]
  2005d8:	4310      	orrs	r0, r2
  2005da:	6018      	str	r0, [r3, #0]
  2005dc:	f881 c01f 	strb.w	ip, [r1, #31]
  2005e0:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  2005e4:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
  2005e8:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2005ea:	f386 8811 	msr	BASEPRI, r6
  tp->wabase = tdp->wbase;
  2005ee:	4b89      	ldr	r3, [pc, #548]	; (200814 <main+0x324>)
  tp->state     = CH_STATE_WTSTART;
  2005f0:	2602      	movs	r6, #2
  REG_INSERT(tp);
  2005f2:	6960      	ldr	r0, [r4, #20]
  tp->prio      = prio;
  2005f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  2005f8:	f103 076c 	add.w	r7, r3, #108	; 0x6c
  tp->realprio  = prio;
  2005fc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  REG_INSERT(tp);
  200600:	f103 0190 	add.w	r1, r3, #144	; 0x90
  tp->refs      = (trefs_t)1;
  200604:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200608:	4a83      	ldr	r2, [pc, #524]	; (200818 <main+0x328>)
  20060a:	f8df e25c 	ldr.w	lr, [pc, #604]	; 200868 <main+0x378>
  20060e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  tp->name      = name;
  200612:	4a82      	ldr	r2, [pc, #520]	; (20081c <main+0x32c>)
  tp->state     = CH_STATE_WTSTART;
  200614:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
  tqp->next = (thread_t *)tqp;
  200618:	f103 06bc 	add.w	r6, r3, #188	; 0xbc
  REG_INSERT(tp);
  20061c:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  tp->flags     = CH_FLAG_MODE_STATIC;
  200620:	f883 50b1 	strb.w	r5, [r3, #177]	; 0xb1
  tp->epending  = (eventmask_t)0;
  200624:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200628:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
  tlp->next = (thread_t *)tlp;
  20062c:	f103 07b8 	add.w	r7, r3, #184	; 0xb8
  tp->name      = name;
  200630:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200634:	671d      	str	r5, [r3, #112]	; 0x70
  tp->mtxlist   = NULL;
  200636:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
  REG_INSERT(tp);
  20063a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  20063e:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200642:	f8c3 e06c 	str.w	lr, [r3, #108]	; 0x6c
  REG_INSERT(tp);
  200646:	6101      	str	r1, [r0, #16]
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
  200648:	69a2      	ldr	r2, [r4, #24]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
  20064a:	f8c3 50b4 	str.w	r5, [r3, #180]	; 0xb4

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
  20064e:	6890      	ldr	r0, [r2, #8]
  200650:	6161      	str	r1, [r4, #20]
  200652:	f8c3 70b8 	str.w	r7, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  200656:	f8c3 60bc 	str.w	r6, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  20065a:	f8c3 60c0 	str.w	r6, [r3, #192]	; 0xc0
  20065e:	2800      	cmp	r0, #0
  200660:	f000 82e8 	beq.w	200c34 <main+0x744>
  tp->state = CH_STATE_READY;
  200664:	f883 50b0 	strb.w	r5, [r3, #176]	; 0xb0
    cp = cp->queue.next;
  200668:	6824      	ldr	r4, [r4, #0]
  } while (cp->prio >= tp->prio);
  20066a:	68a2      	ldr	r2, [r4, #8]
  20066c:	2a00      	cmp	r2, #0
  20066e:	d1fb      	bne.n	200668 <main+0x178>
  tp->queue.next             = cp;
  200670:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
  200674:	6860      	ldr	r0, [r4, #4]
  200676:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
  20067a:	6001      	str	r1, [r0, #0]
  cp->queue.prev             = tp;
  20067c:	6061      	str	r1, [r4, #4]
  20067e:	f382 8811 	msr	BASEPRI, r2
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  200682:	4b67      	ldr	r3, [pc, #412]	; (200820 <main+0x330>)
  200684:	f04f 31ff 	mov.w	r1, #4294967295
  PWR->CR1 |= PWR_CR1_DBP;
  200688:	4c66      	ldr	r4, [pc, #408]	; (200824 <main+0x334>)
  rccResetAHB1(~0);
  20068a:	6918      	ldr	r0, [r3, #16]
  20068c:	6119      	str	r1, [r3, #16]
  20068e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
  200690:	6958      	ldr	r0, [r3, #20]
  200692:	6159      	str	r1, [r3, #20]
  200694:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  200696:	6a18      	ldr	r0, [r3, #32]
  200698:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  20069c:	6218      	str	r0, [r3, #32]
  20069e:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
  2006a0:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2006a2:	6259      	str	r1, [r3, #36]	; 0x24
  2006a4:	625a      	str	r2, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  2006a6:	6821      	ldr	r1, [r4, #0]
  2006a8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  2006ac:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  2006ae:	6f19      	ldr	r1, [r3, #112]	; 0x70
  2006b0:	f401 7140 	and.w	r1, r1, #768	; 0x300
  2006b4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  2006b8:	d003      	beq.n	2006c2 <main+0x1d2>
    RCC->BDCR = RCC_BDCR_BDRST;
  2006ba:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  2006be:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  2006c0:	671a      	str	r2, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  2006c2:	4b57      	ldr	r3, [pc, #348]	; (200820 <main+0x330>)
  2006c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  2006c6:	461f      	mov	r7, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  2006c8:	f042 0219 	orr.w	r2, r2, #25
  2006cc:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  2006ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  2006d0:	079b      	lsls	r3, r3, #30
  2006d2:	d5fc      	bpl.n	2006ce <main+0x1de>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  2006d4:	f8df e14c 	ldr.w	lr, [pc, #332]	; 200824 <main+0x334>
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  2006d8:	f240 75ff 	movw	r5, #2047	; 0x7ff
  gpiop->OTYPER  = config->otyper;
  2006dc:	2300      	movs	r3, #0
  2006de:	4c52      	ldr	r4, [pc, #328]	; (200828 <main+0x338>)
  2006e0:	f8de 1004 	ldr.w	r1, [lr, #4]
  gpiop->ODR     = config->odr;
  2006e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
  2006e8:	f04f 36ff 	mov.w	r6, #4294967295
  gpiop->PUPDR   = config->pupdr;
  2006ec:	f8df 817c 	ldr.w	r8, [pc, #380]	; 20086c <main+0x37c>
  2006f0:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  gpiop->ODR     = config->odr;
  2006f4:	f64b 7b7e 	movw	fp, #49022	; 0xbf7e
  gpiop->AFRH    = config->afrh;
  2006f8:	f44f 0c30 	mov.w	ip, #11534336	; 0xb00000
  sdp->vmt = &vmt;
  2006fc:	4a4b      	ldr	r2, [pc, #300]	; (20082c <main+0x33c>)
  2006fe:	f8ce 1004 	str.w	r1, [lr, #4]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200702:	6b39      	ldr	r1, [r7, #48]	; 0x30
  iqp->q_buffer  = bp;
  200704:	f8df a168 	ldr.w	sl, [pc, #360]	; 200870 <main+0x380>
  200708:	ea41 0e05 	orr.w	lr, r1, r5
  20070c:	4948      	ldr	r1, [pc, #288]	; (200830 <main+0x340>)
  20070e:	f8df 9164 	ldr.w	r9, [pc, #356]	; 200874 <main+0x384>
  200712:	f8c7 e030 	str.w	lr, [r7, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200716:	f8d7 e050 	ldr.w	lr, [r7, #80]	; 0x50
  20071a:	ea4e 0505 	orr.w	r5, lr, r5
  oqp->q_buffer  = bp;
  20071e:	f8df e158 	ldr.w	lr, [pc, #344]	; 200878 <main+0x388>
  200722:	653d      	str	r5, [r7, #80]	; 0x50
  gpiop->AFRL    = config->afrl;
  200724:	4d43      	ldr	r5, [pc, #268]	; (200834 <main+0x344>)
  gpiop->OTYPER  = config->otyper;
  200726:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200728:	60a6      	str	r6, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  20072a:	f8c4 800c 	str.w	r8, [r4, #12]
  gpiop->ODR     = config->odr;
  20072e:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  200730:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
  200732:	4d41      	ldr	r5, [pc, #260]	; (200838 <main+0x348>)
  200734:	f8df 8144 	ldr.w	r8, [pc, #324]	; 20087c <main+0x38c>
  200738:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  20073a:	4d40      	ldr	r5, [pc, #256]	; (20083c <main+0x34c>)
  20073c:	6025      	str	r5, [r4, #0]
  gpiop->PUPDR   = config->pupdr;
  20073e:	f105 55d5 	add.w	r5, r5, #446693376	; 0x1aa00000
  gpiop->OTYPER  = config->otyper;
  200742:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->PUPDR   = config->pupdr;
  200746:	f505 25d2 	add.w	r5, r5, #430080	; 0x69000
  gpiop->OSPEEDR = config->ospeedr;
  20074a:	f8c4 6408 	str.w	r6, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  20074e:	f04f 3655 	mov.w	r6, #1431655765	; 0x55555555
  200752:	f205 552c 	addw	r5, r5, #1324	; 0x52c
  200756:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
  gpiop->MODER   = config->moder;
  20075a:	4d39      	ldr	r5, [pc, #228]	; (200840 <main+0x350>)
  gpiop->ODR     = config->odr;
  20075c:	f8c4 b414 	str.w	fp, [r4, #1044]	; 0x414
  gpiop->MODER   = config->moder;
  200760:	f04f 6b08 	mov.w	fp, #142606336	; 0x8800000
  gpiop->AFRL    = config->afrl;
  200764:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  200768:	f8c4 c424 	str.w	ip, [r4, #1060]	; 0x424
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  20076c:	f04f 0c01 	mov.w	ip, #1
  gpiop->MODER   = config->moder;
  200770:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  200774:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  200778:	f06f 4570 	mvn.w	r5, #4026531840	; 0xf0000000
  gpiop->OTYPER  = config->otyper;
  20077c:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20077e:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  200780:	4d30      	ldr	r5, [pc, #192]	; (200844 <main+0x354>)
  200782:	60e5      	str	r5, [r4, #12]
  gpiop->AFRL    = config->afrl;
  200784:	4d30      	ldr	r5, [pc, #192]	; (200848 <main+0x358>)
  gpiop->ODR     = config->odr;
  200786:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  200788:	6225      	str	r5, [r4, #32]
  gpiop->MODER   = config->moder;
  20078a:	f640 2508 	movw	r5, #2568	; 0xa08
  gpiop->AFRH    = config->afrh;
  20078e:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200790:	6025      	str	r5, [r4, #0]
  gpiop->OSPEEDR = config->ospeedr;
  200792:	f46f 1540 	mvn.w	r5, #3145728	; 0x300000
  gpiop->OTYPER  = config->otyper;
  200796:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  20079a:	f8c4 5408 	str.w	r5, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  20079e:	4d2b      	ldr	r5, [pc, #172]	; (20084c <main+0x35c>)
  2007a0:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
  gpiop->AFRH    = config->afrh;
  2007a4:	2577      	movs	r5, #119	; 0x77
  gpiop->ODR     = config->odr;
  2007a6:	f8c4 0414 	str.w	r0, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  2007aa:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  2007ae:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  2007b2:	f44f 2520 	mov.w	r5, #655360	; 0xa0000
  2007b6:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
  gpiop->OSPEEDR = config->ospeedr;
  2007ba:	4d25      	ldr	r5, [pc, #148]	; (200850 <main+0x360>)
  gpiop->OTYPER  = config->otyper;
  2007bc:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  2007c0:	f8c4 5808 	str.w	r5, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  2007c4:	f8c4 680c 	str.w	r6, [r4, #2060]	; 0x80c
  gpiop->OTYPER  = config->otyper;
  2007c8:	4d22      	ldr	r5, [pc, #136]	; (200854 <main+0x364>)
  gpiop->ODR     = config->odr;
  2007ca:	f8c4 0814 	str.w	r0, [r4, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  2007ce:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  2007d2:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  2007d6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  2007da:	4c1f      	ldr	r4, [pc, #124]	; (200858 <main+0x368>)
  gpiop->OTYPER  = config->otyper;
  2007dc:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2007de:	60ac      	str	r4, [r5, #8]
  gpiop->OTYPER  = config->otyper;
  2007e0:	4c1e      	ldr	r4, [pc, #120]	; (20085c <main+0x36c>)
  gpiop->PUPDR   = config->pupdr;
  2007e2:	60ee      	str	r6, [r5, #12]
  2007e4:	e04c      	b.n	200880 <main+0x390>
  2007e6:	bf00      	nop
  2007e8:	200008b4 	.word	0x200008b4
  2007ec:	20000a00 	.word	0x20000a00
  2007f0:	00200dc1 	.word	0x00200dc1
  2007f4:	20000a24 	.word	0x20000a24
  2007f8:	20020048 	.word	0x20020048
  2007fc:	20080000 	.word	0x20080000
  200800:	20000a20 	.word	0x20000a20
  200804:	e000ed00 	.word	0xe000ed00
  200808:	05fa0300 	.word	0x05fa0300
  20080c:	e0001000 	.word	0xe0001000
  200810:	c5acce55 	.word	0xc5acce55
  200814:	20000928 	.word	0x20000928
  200818:	002002e5 	.word	0x002002e5
  20081c:	08001cb8 	.word	0x08001cb8
  200820:	40023800 	.word	0x40023800
  200824:	40007000 	.word	0x40007000
  200828:	40020000 	.word	0x40020000
  20082c:	20000a68 	.word	0x20000a68
  200830:	20000854 	.word	0x20000854
  200834:	b0000bb0 	.word	0xb0000bb0
  200838:	000aaa0a 	.word	0x000aaa0a
  20083c:	2aae8028 	.word	0x2aae8028
  200840:	18004001 	.word	0x18004001
  200844:	01555051 	.word	0x01555051
  200848:	00bb00b0 	.word	0x00bb00b0
  20084c:	55505555 	.word	0x55505555
  200850:	cffffff3 	.word	0xcffffff3
  200854:	40021400 	.word	0x40021400
  200858:	003fcfff 	.word	0x003fcfff
  20085c:	40021800 	.word	0x40021800
  200860:	e000edf0 	.word	0xe000edf0
  200864:	08001ca0 	.word	0x08001ca0
  200868:	00200e81 	.word	0x00200e81
  20086c:	40005551 	.word	0x40005551
  200870:	20000a28 	.word	0x20000a28
  200874:	20000a38 	.word	0x20000a38
  200878:	20000a48 	.word	0x20000a48
  20087c:	20000a58 	.word	0x20000a58
  gpiop->ODR     = config->odr;
  200880:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
  200882:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
  200884:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200886:	602b      	str	r3, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
  200888:	4db6      	ldr	r5, [pc, #728]	; (200b64 <main+0x674>)
  gpiop->OTYPER  = config->otyper;
  20088a:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20088c:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  20088e:	4db6      	ldr	r5, [pc, #728]	; (200b68 <main+0x678>)
  200890:	60e5      	str	r5, [r4, #12]
  gpiop->AFRH    = config->afrh;
  200892:	4db6      	ldr	r5, [pc, #728]	; (200b6c <main+0x67c>)
  gpiop->ODR     = config->odr;
  200894:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  200896:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  200898:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->OSPEEDR = config->ospeedr;
  20089a:	250f      	movs	r5, #15
  gpiop->MODER   = config->moder;
  20089c:	f8c4 b000 	str.w	fp, [r4]
  gpiop->OTYPER  = config->otyper;
  2008a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  2008a4:	6063      	str	r3, [r4, #4]
  2008a6:	4693      	mov	fp, r2
  gpiop->OSPEEDR = config->ospeedr;
  2008a8:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  2008aa:	4db1      	ldr	r5, [pc, #708]	; (200b70 <main+0x680>)
  2008ac:	60e5      	str	r5, [r4, #12]
  gpiop->OTYPER  = config->otyper;
  2008ae:	4db1      	ldr	r5, [pc, #708]	; (200b74 <main+0x684>)
  gpiop->ODR     = config->odr;
  2008b0:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  2008b2:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  2008b4:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2008b6:	6023      	str	r3, [r4, #0]
  gpiop->OTYPER  = config->otyper;
  2008b8:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  2008bc:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  2008c0:	f8c4 640c 	str.w	r6, [r4, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
  2008c4:	f8c4 0414 	str.w	r0, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  2008c8:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  2008cc:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  2008d0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  2008d4:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  2008d8:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  2008dc:	f8c4 680c 	str.w	r6, [r4, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
  2008e0:	f8c4 0814 	str.w	r0, [r4, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  2008e4:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  2008e8:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  2008ec:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  gpiop->OTYPER  = config->otyper;
  2008f0:	606b      	str	r3, [r5, #4]
  2008f2:	4ca1      	ldr	r4, [pc, #644]	; (200b78 <main+0x688>)
  gpiop->OSPEEDR = config->ospeedr;
  2008f4:	60ab      	str	r3, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  2008f6:	60ee      	str	r6, [r5, #12]
  gpiop->ODR     = config->odr;
  2008f8:	6168      	str	r0, [r5, #20]

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  PWMD1.channels = STM32_TIM1_CHANNELS;
  PWMD1.tim = STM32_TIM1;
  2008fa:	48a0      	ldr	r0, [pc, #640]	; (200b7c <main+0x68c>)
  gpiop->AFRL    = config->afrl;
  2008fc:	622b      	str	r3, [r5, #32]
  2008fe:	4ea0      	ldr	r6, [pc, #640]	; (200b80 <main+0x690>)
  pwmp->config   = NULL;
  200900:	6063      	str	r3, [r4, #4]
  gpiop->AFRH    = config->afrh;
  200902:	626b      	str	r3, [r5, #36]	; 0x24
  pwmp->enabled  = 0;
  200904:	60e3      	str	r3, [r4, #12]
  gpiop->MODER   = config->moder;
  200906:	602b      	str	r3, [r5, #0]
  PWMD1.channels = STM32_TIM1_CHANNELS;
  200908:	f04f 0506 	mov.w	r5, #6
  PWMD1.tim = STM32_TIM1;
  20090c:	61a0      	str	r0, [r4, #24]

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
  PWMD3.channels = STM32_TIM3_CHANNELS;
  PWMD3.tim = STM32_TIM3;
  20090e:	f5a0 407c 	sub.w	r0, r0, #64512	; 0xfc00
  PWMD1.channels = STM32_TIM1_CHANNELS;
  200912:	7425      	strb	r5, [r4, #16]
  PWMD3.tim = STM32_TIM3;
  200914:	61b0      	str	r0, [r6, #24]
  PWMD3.channels = STM32_TIM3_CHANNELS;
  200916:	f04f 0004 	mov.w	r0, #4
  pwmp->state    = PWM_STOP;
  20091a:	4d9a      	ldr	r5, [pc, #616]	; (200b84 <main+0x694>)
  20091c:	7430      	strb	r0, [r6, #16]
#endif

#if STM32_PWM_USE_TIM4
  /* Driver initialization.*/
  pwmObjectInit(&PWMD4);
  PWMD4.channels = STM32_TIM4_CHANNELS;
  20091e:	7428      	strb	r0, [r5, #16]
  PWMD4.tim = STM32_TIM4;
  200920:	4899      	ldr	r0, [pc, #612]	; (200b88 <main+0x698>)
  200922:	f884 c000 	strb.w	ip, [r4]
  200926:	61a8      	str	r0, [r5, #24]
  200928:	4898      	ldr	r0, [pc, #608]	; (200b8c <main+0x69c>)
  20092a:	f886 c000 	strb.w	ip, [r6]
  pwmp->config   = NULL;
  20092e:	6073      	str	r3, [r6, #4]
  pwmp->enabled  = 0;
  200930:	60f3      	str	r3, [r6, #12]
  pwmp->state    = PWM_STOP;
  200932:	f885 c000 	strb.w	ip, [r5]
  pwmp->config   = NULL;
  200936:	606b      	str	r3, [r5, #4]
  pwmp->enabled  = 0;
  200938:	60eb      	str	r3, [r5, #12]
  20093a:	f84b 0b04 	str.w	r0, [fp], #4
  iqp->q_top     = bp + size;
  20093e:	f10a 0010 	add.w	r0, sl, #16
  iqp->q_counter = 0;
  200942:	6153      	str	r3, [r2, #20]
  iqp->q_top     = bp + size;
  200944:	61d0      	str	r0, [r2, #28]
  oqp->q_counter = size;
  200946:	2010      	movs	r0, #16
  iqp->q_buffer  = bp;
  200948:	f8c2 a018 	str.w	sl, [r2, #24]
  oqp->q_counter = size;
  20094c:	6390      	str	r0, [r2, #56]	; 0x38

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20094e:	f06f 003f 	mvn.w	r0, #63	; 0x3f
  iqp->q_rdptr   = bp;
  200952:	f8c2 a024 	str.w	sl, [r2, #36]	; 0x24
  iqp->q_wrptr   = bp;
  200956:	f8c2 a020 	str.w	sl, [r2, #32]
  20095a:	f8df a244 	ldr.w	sl, [pc, #580]	; 200ba0 <main+0x6b0>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  20095e:	f8c2 b004 	str.w	fp, [r2, #4]
  tqp->next = (thread_t *)tqp;
  200962:	f102 0b0c 	add.w	fp, r2, #12
  sdp->state = SD_STOP;
  200966:	f882 c008 	strb.w	ip, [r2, #8]
  iqp->q_notify  = infy;
  20096a:	6293      	str	r3, [r2, #40]	; 0x28
  20096c:	f881 c008 	strb.w	ip, [r1, #8]
  sdp->vmt = &vmt;
  200970:	468c      	mov	ip, r1
  iqp->q_link    = link;
  200972:	62d2      	str	r2, [r2, #44]	; 0x2c
  oqp->q_link    = link;
  200974:	6512      	str	r2, [r2, #80]	; 0x50
  200976:	f88a 0352 	strb.w	r0, [sl, #850]	; 0x352
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20097a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  oqp->q_buffer  = bp;
  20097e:	f8c2 e03c 	str.w	lr, [r2, #60]	; 0x3c
  200982:	f8ca 0188 	str.w	r0, [sl, #392]	; 0x188
  oqp->q_rdptr   = bp;
  200986:	f8c2 e048 	str.w	lr, [r2, #72]	; 0x48
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20098a:	f8ca 0008 	str.w	r0, [sl, #8]
  oqp->q_top     = bp + size;
  20098e:	f10e 0010 	add.w	r0, lr, #16
  oqp->q_wrptr   = bp;
  200992:	f8c2 e044 	str.w	lr, [r2, #68]	; 0x44
  200996:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  oqp->q_top     = bp + size;
  20099a:	9001      	str	r0, [sp, #4]
  20099c:	487b      	ldr	r0, [pc, #492]	; (200b8c <main+0x69c>)
  iqp->q_counter = 0;
  20099e:	614b      	str	r3, [r1, #20]
  2009a0:	f84c 0b04 	str.w	r0, [ip], #4
  2009a4:	f8c1 c004 	str.w	ip, [r1, #4]
  oqp->q_notify  = onfy;
  2009a8:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 200ba4 <main+0x6b4>
  oqp->q_top     = bp + size;
  2009ac:	9801      	ldr	r0, [sp, #4]
  oqp->q_notify  = onfy;
  2009ae:	f8c2 c04c 	str.w	ip, [r2, #76]	; 0x4c

#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7);
  iqObjectInit(&SD7.iqueue, sd_in_buf7, sizeof sd_in_buf7, NULL, &SD7);
  oqObjectInit(&SD7.oqueue, sd_out_buf7, sizeof sd_out_buf7, notify7, &SD7);
  SD7.usart = UART7;
  2009b2:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 200ba8 <main+0x6b8>
  oqp->q_top     = bp + size;
  2009b6:	6410      	str	r0, [r2, #64]	; 0x40
  2009b8:	f101 000c 	add.w	r0, r1, #12
  2009bc:	f8c2 c054 	str.w	ip, [r2, #84]	; 0x54
  SD7.clock = STM32_UART7CLK;
  2009c0:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 200bac <main+0x6bc>
  2009c4:	f8c2 b00c 	str.w	fp, [r2, #12]
  tqp->prev = (thread_t *)tqp;
  2009c8:	f8c2 b010 	str.w	fp, [r2, #16]
  iqp->q_top     = bp + size;
  2009cc:	f109 0b10 	add.w	fp, r9, #16
  tqp->next = (thread_t *)tqp;
  2009d0:	f8c2 e030 	str.w	lr, [r2, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
  2009d4:	f8c2 e034 	str.w	lr, [r2, #52]	; 0x34
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2009d8:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
  tqp->next = (thread_t *)tqp;
  2009dc:	60c8      	str	r0, [r1, #12]
  2009de:	f8c2 c058 	str.w	ip, [r2, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  2009e2:	6108      	str	r0, [r1, #16]
  oqp->q_counter = size;
  2009e4:	2010      	movs	r0, #16
  iqp->q_buffer  = bp;
  2009e6:	f8c1 9018 	str.w	r9, [r1, #24]
  iqp->q_rdptr   = bp;
  2009ea:	f8c1 9024 	str.w	r9, [r1, #36]	; 0x24
  iqp->q_wrptr   = bp;
  2009ee:	f8c1 9020 	str.w	r9, [r1, #32]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2009f2:	f06f 093f 	mvn.w	r9, #63	; 0x3f
  oqp->q_counter = size;
  2009f6:	6388      	str	r0, [r1, #56]	; 0x38
  oqp->q_top     = bp + size;
  2009f8:	4440      	add	r0, r8
  2009fa:	f88a 9353 	strb.w	r9, [sl, #851]	; 0x353
  tqp->next = (thread_t *)tqp;
  2009fe:	f101 0930 	add.w	r9, r1, #48	; 0x30
  iqp->q_top     = bp + size;
  200a02:	f8c1 b01c 	str.w	fp, [r1, #28]

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  200a06:	f04f 0b80 	mov.w	fp, #128	; 0x80
  iqp->q_notify  = infy;
  200a0a:	628b      	str	r3, [r1, #40]	; 0x28
#if STM32_SERIAL_USE_UART8
  sdObjectInit(&SD8);
  iqObjectInit(&SD8.iqueue, sd_in_buf8, sizeof sd_in_buf8, NULL, &SD8);
  oqObjectInit(&SD8.oqueue, sd_out_buf8, sizeof sd_out_buf8, notify8, &SD8);
  SD8.usart = UART8;
  SD8.clock = STM32_UART8CLK;
  200a0c:	f8c1 c058 	str.w	ip, [r1, #88]	; 0x58
  iqp->q_link    = link;
  200a10:	62c9      	str	r1, [r1, #44]	; 0x2c
  oqp->q_link    = link;
  200a12:	6509      	str	r1, [r1, #80]	; 0x50
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  200a14:	f8df c198 	ldr.w	ip, [pc, #408]	; 200bb0 <main+0x6c0>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200a18:	f8ca e188 	str.w	lr, [sl, #392]	; 0x188
  oqp->q_buffer  = bp;
  200a1c:	f8c1 803c 	str.w	r8, [r1, #60]	; 0x3c
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200a20:	f8ca e008 	str.w	lr, [sl, #8]
  200a24:	f8df e18c 	ldr.w	lr, [pc, #396]	; 200bb4 <main+0x6c4>
  oqp->q_rdptr   = bp;
  200a28:	f8c1 8048 	str.w	r8, [r1, #72]	; 0x48
  200a2c:	f8ce c004 	str.w	ip, [lr, #4]
  200a30:	f04f 0c20 	mov.w	ip, #32
  oqp->q_wrptr   = bp;
  200a34:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
  SysTick->VAL = 0;
  200a38:	f8ce 3008 	str.w	r3, [lr, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  200a3c:	2307      	movs	r3, #7
  oqp->q_notify  = onfy;
  200a3e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 200bb8 <main+0x6c8>
  200a42:	f8ce 3000 	str.w	r3, [lr]
  SD8.usart = UART8;
  200a46:	f8df e174 	ldr.w	lr, [pc, #372]	; 200bbc <main+0x6cc>
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  200a4a:	4b51      	ldr	r3, [pc, #324]	; (200b90 <main+0x6a0>)
  oqp->q_top     = bp + size;
  200a4c:	6408      	str	r0, [r1, #64]	; 0x40
  oqp->q_notify  = onfy;
  200a4e:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
  200a52:	f8c1 e054 	str.w	lr, [r1, #84]	; 0x54
  200a56:	f8c1 9030 	str.w	r9, [r1, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
  200a5a:	f8c1 9034 	str.w	r9, [r1, #52]	; 0x34
  200a5e:	f883 b023 	strb.w	fp, [r3, #35]	; 0x23
  200a62:	f38c 8811 	msr	BASEPRI, ip
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  200a66:	7a13      	ldrb	r3, [r2, #8]
  200a68:	2b01      	cmp	r3, #1
  200a6a:	f000 80e6 	beq.w	200c3a <main+0x74a>
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  200a6e:	6d91      	ldr	r1, [r2, #88]	; 0x58
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  200a70:	f04f 0c40 	mov.w	ip, #64	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  200a74:	4847      	ldr	r0, [pc, #284]	; (200b94 <main+0x6a4>)
  u->CR3 = config->cr3 | USART_CR3_EIE;
  200a76:	f04f 0801 	mov.w	r8, #1
  USART_TypeDef *u = sdp->usart;
  200a7a:	6d53      	ldr	r3, [r2, #84]	; 0x54
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  200a7c:	f240 1e2d 	movw	lr, #301	; 0x12d
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  200a80:	fba0 0101 	umull	r0, r1, r0, r1
  sdp->state = SD_READY;
  200a84:	f04f 0902 	mov.w	r9, #2
  u->ICR = 0xFFFFFFFFU;
  200a88:	f04f 30ff 	mov.w	r0, #4294967295
  200a8c:	2700      	movs	r7, #0
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  200a8e:	0c09      	lsrs	r1, r1, #16
  200a90:	60d9      	str	r1, [r3, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  200a92:	f8c3 c004 	str.w	ip, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  200a96:	f8c3 8008 	str.w	r8, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  200a9a:	f8c3 e000 	str.w	lr, [r3]
  u->ICR = 0xFFFFFFFFU;
  200a9e:	6218      	str	r0, [r3, #32]
  200aa0:	f882 9008 	strb.w	r9, [r2, #8]
    sdp->rxmask = 0xFF;
  200aa4:	f882 005c 	strb.w	r0, [r2, #92]	; 0x5c
  200aa8:	f387 8811 	msr	BASEPRI, r7
	 chSysInit();
	    halInit();

	    sdStart( &SD7, &sdcfg );
	    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );    // TX
  200aac:	f240 4202 	movw	r2, #1026	; 0x402
  200ab0:	f44f 7180 	mov.w	r1, #256	; 0x100
  200ab4:	4838      	ldr	r0, [pc, #224]	; (200b98 <main+0x6a8>)
  200ab6:	f04f 0a20 	mov.w	sl, #32
  200aba:	f000 fad1 	bl	201060 <_pal_lld_setgroupmode>
	    palSetPadMode( GPIOE, 7, PAL_MODE_ALTERNATE(8) );    // RX
  200abe:	f240 4202 	movw	r2, #1026	; 0x402
  200ac2:	2180      	movs	r1, #128	; 0x80
  200ac4:	4834      	ldr	r0, [pc, #208]	; (200b98 <main+0x6a8>)
  200ac6:	f000 facb 	bl	201060 <_pal_lld_setgroupmode>

	    palSetLineMode( PAL_LINE( GPIOB, 0 ), PAL_MODE_ALTERNATE(2) );
  200aca:	4641      	mov	r1, r8
  200acc:	f44f 7281 	mov.w	r2, #258	; 0x102
  200ad0:	4832      	ldr	r0, [pc, #200]	; (200b9c <main+0x6ac>)
  200ad2:	f000 fac5 	bl	201060 <_pal_lld_setgroupmode>
	    palSetLineMode( PAL_LINE( GPIOB, 7 ), PAL_MODE_ALTERNATE(2) );
  200ad6:	f44f 7281 	mov.w	r2, #258	; 0x102
  200ada:	2180      	movs	r1, #128	; 0x80
  200adc:	482f      	ldr	r0, [pc, #188]	; (200b9c <main+0x6ac>)
  200ade:	f000 fabf 	bl	201060 <_pal_lld_setgroupmode>
	    palSetLineMode( PAL_LINE( GPIOB, 14 ),PAL_MODE_ALTERNATE(1) );
  200ae2:	2282      	movs	r2, #130	; 0x82
  200ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  200ae8:	482c      	ldr	r0, [pc, #176]	; (200b9c <main+0x6ac>)
  200aea:	f000 fab9 	bl	201060 <_pal_lld_setgroupmode>
  200aee:	f38a 8811 	msr	BASEPRI, sl
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  200af2:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 200bc0 <main+0x6d0>
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  200af6:	4822      	ldr	r0, [pc, #136]	; (200b80 <main+0x690>)
  pwmp->period = config->period;
  200af8:	f8d8 3004 	ldr.w	r3, [r8, #4]
  pwmp->config = config;
  200afc:	f8c6 8004 	str.w	r8, [r6, #4]
  pwmp->period = config->period;
  200b00:	60b3      	str	r3, [r6, #8]
  pwm_lld_start(pwmp);
  200b02:	f000 f9dd 	bl	200ec0 <pwm_lld_start>
  pwmp->enabled = 0;
  200b06:	60f7      	str	r7, [r6, #12]
  pwmp->state = PWM_READY;
  200b08:	f886 9000 	strb.w	r9, [r6]
  200b0c:	f387 8811 	msr	BASEPRI, r7
  200b10:	f38a 8811 	msr	BASEPRI, sl
  pwmp->period = config->period;
  200b14:	f8d8 3004 	ldr.w	r3, [r8, #4]
  pwm_lld_start(pwmp);
  200b18:	481a      	ldr	r0, [pc, #104]	; (200b84 <main+0x694>)
  pwmp->config = config;
  200b1a:	f8c5 8004 	str.w	r8, [r5, #4]
  pwmp->period = config->period;
  200b1e:	60ab      	str	r3, [r5, #8]
  pwm_lld_start(pwmp);
  200b20:	f000 f9ce 	bl	200ec0 <pwm_lld_start>
  pwmp->enabled = 0;
  200b24:	60ef      	str	r7, [r5, #12]
  pwmp->state = PWM_READY;
  200b26:	f885 9000 	strb.w	r9, [r5]
  200b2a:	f387 8811 	msr	BASEPRI, r7
  200b2e:	f38a 8811 	msr	BASEPRI, sl
  pwmp->period = config->period;
  200b32:	f8d8 3004 	ldr.w	r3, [r8, #4]
  pwm_lld_start(pwmp);
  200b36:	4810      	ldr	r0, [pc, #64]	; (200b78 <main+0x688>)
  pwmp->config = config;
  200b38:	f8c4 8004 	str.w	r8, [r4, #4]
  pwmp->period = config->period;
  200b3c:	60a3      	str	r3, [r4, #8]
  pwm_lld_start(pwmp);
  200b3e:	f000 f9bf 	bl	200ec0 <pwm_lld_start>
  pwmp->enabled = 0;
  200b42:	60e7      	str	r7, [r4, #12]
  pwmp->state = PWM_READY;
  200b44:	f884 9000 	strb.w	r9, [r4]
  200b48:	f387 8811 	msr	BASEPRI, r7
	    int duty_cycle = 0;

	    while (true)
	    {
	    	duty_cycle += 500;
	    	    	if( duty_cycle >= 10000 )
  200b4c:	46b9      	mov	r9, r7
	    	duty_cycle += 500;
  200b4e:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
	    	    	if( duty_cycle >= 10000 )
  200b52:	f242 730f 	movw	r3, #9999	; 0x270f
  200b56:	429f      	cmp	r7, r3
  200b58:	463b      	mov	r3, r7
  200b5a:	dd33      	ble.n	200bc4 <main+0x6d4>
  200b5c:	2700      	movs	r7, #0
	    	    	{
	    	    		duty_cycle = 0;
  200b5e:	463b      	mov	r3, r7
  200b60:	e030      	b.n	200bc4 <main+0x6d4>
  200b62:	bf00      	nop
  200b64:	3cccf000 	.word	0x3cccf000
  200b68:	51155555 	.word	0x51155555
  200b6c:	00b0b000 	.word	0x00b0b000
  200b70:	55555550 	.word	0x55555550
  200b74:	40022800 	.word	0x40022800
  200b78:	20000800 	.word	0x20000800
  200b7c:	40010000 	.word	0x40010000
  200b80:	2000081c 	.word	0x2000081c
  200b84:	20000838 	.word	0x20000838
  200b88:	40000800 	.word	0x40000800
  200b8c:	08001cd0 	.word	0x08001cd0
  200b90:	e000ed00 	.word	0xe000ed00
  200b94:	91a2b3c5 	.word	0x91a2b3c5
  200b98:	40021000 	.word	0x40021000
  200b9c:	40020400 	.word	0x40020400
  200ba0:	e000e100 	.word	0xe000e100
  200ba4:	00200301 	.word	0x00200301
  200ba8:	40007800 	.word	0x40007800
  200bac:	0337f980 	.word	0x0337f980
  200bb0:	00034bbf 	.word	0x00034bbf
  200bb4:	e000e010 	.word	0xe000e010
  200bb8:	00200311 	.word	0x00200311
  200bbc:	40007c00 	.word	0x40007c00
  200bc0:	20020000 	.word	0x20020000
  200bc4:	f04f 0820 	mov.w	r8, #32
  200bc8:	f388 8811 	msr	BASEPRI, r8

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
  200bcc:	68f2      	ldr	r2, [r6, #12]
  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
#else
  if (channel < 4)
    pwmp->tim->CCR[channel] = width;
  200bce:	69b1      	ldr	r1, [r6, #24]
  200bd0:	f042 0204 	orr.w	r2, r2, #4
  200bd4:	63cb      	str	r3, [r1, #60]	; 0x3c
  200bd6:	60f2      	str	r2, [r6, #12]
  200bd8:	f389 8811 	msr	BASEPRI, r9
  200bdc:	f388 8811 	msr	BASEPRI, r8
  200be0:	68ea      	ldr	r2, [r5, #12]
  200be2:	69a9      	ldr	r1, [r5, #24]
  200be4:	f042 0202 	orr.w	r2, r2, #2
  200be8:	638b      	str	r3, [r1, #56]	; 0x38
  200bea:	60ea      	str	r2, [r5, #12]
  200bec:	f389 8811 	msr	BASEPRI, r9
  200bf0:	f388 8811 	msr	BASEPRI, r8
  200bf4:	68e2      	ldr	r2, [r4, #12]
  200bf6:	69a1      	ldr	r1, [r4, #24]
  200bf8:	f042 0202 	orr.w	r2, r2, #2
  200bfc:	638b      	str	r3, [r1, #56]	; 0x38
  200bfe:	60e2      	str	r2, [r4, #12]
  200c00:	f389 8811 	msr	BASEPRI, r9
  200c04:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  200c08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  200c0c:	2008      	movs	r0, #8
  200c0e:	f000 fb7f 	bl	201310 <chSchGoSleepTimeoutS>
  200c12:	f389 8811 	msr	BASEPRI, r9
  200c16:	f388 8811 	msr	BASEPRI, r8
  200c1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  200c1e:	2008      	movs	r0, #8
  200c20:	f000 fb76 	bl	201310 <chSchGoSleepTimeoutS>
  200c24:	f389 8811 	msr	BASEPRI, r9
	    	    	pwmEnableChannel( &PWMD4, 1, duty_cycle );
	    	    	pwmEnableChannel( &PWMD1, 1, duty_cycle );
	    	    	chThdSleepSeconds(1);
	        //sdWrite(&SD7, "582\r\n", 8);
	        chThdSleepSeconds( 1 );
	        chprintf(((BaseSequentialStream *)&SD7), "duty_cycle=%d\n\r", duty_cycle);
  200c28:	4906      	ldr	r1, [pc, #24]	; (200c44 <main+0x754>)
  200c2a:	463a      	mov	r2, r7
  200c2c:	4806      	ldr	r0, [pc, #24]	; (200c48 <main+0x758>)
  200c2e:	f000 fe27 	bl	201880 <chprintf.constprop.0>
  200c32:	e78c      	b.n	200b4e <main+0x65e>
  tp->state = CH_STATE_READY;
  200c34:	f882 0020 	strb.w	r0, [r2, #32]
  200c38:	e7fe      	b.n	200c38 <main+0x748>
      rccEnableUSART6(FALSE);
    }
#endif
#if STM32_SERIAL_USE_UART7
    if (&SD7 == sdp) {
      rccEnableUART7(FALSE);
  200c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  200c3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  200c40:	643b      	str	r3, [r7, #64]	; 0x40
  200c42:	e714      	b.n	200a6e <main+0x57e>
  200c44:	08001cc0 	.word	0x08001cc0
  200c48:	20000a68 	.word	0x20000a68
  200c4c:	00000000 	.word	0x00000000

00200c50 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  200c50:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  200c52:	4b33      	ldr	r3, [pc, #204]	; (200d20 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  200c54:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  200c58:	4a32      	ldr	r2, [pc, #200]	; (200d24 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  200c5a:	4c33      	ldr	r4, [pc, #204]	; (200d28 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  200c5c:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  200c5e:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  200c60:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  200c62:	681a      	ldr	r2, [r3, #0]
  200c64:	f042 0201 	orr.w	r2, r2, #1
  200c68:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  200c6a:	680b      	ldr	r3, [r1, #0]
  200c6c:	079b      	lsls	r3, r3, #30
  200c6e:	d5fc      	bpl.n	200c6a <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  200c70:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  200c72:	4a2b      	ldr	r2, [pc, #172]	; (200d20 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  200c74:	f023 0303 	bic.w	r3, r3, #3
  200c78:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  200c7a:	688b      	ldr	r3, [r1, #8]
  200c7c:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  200c7e:	6893      	ldr	r3, [r2, #8]
  200c80:	f013 030c 	ands.w	r3, r3, #12
  200c84:	d1fb      	bne.n	200c7e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  200c86:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  200c88:	4925      	ldr	r1, [pc, #148]	; (200d20 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  200c8a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  200c8e:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  200c90:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  200c92:	6813      	ldr	r3, [r2, #0]
  200c94:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  200c98:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  200c9a:	680b      	ldr	r3, [r1, #0]
  200c9c:	039d      	lsls	r5, r3, #14
  200c9e:	d5fc      	bpl.n	200c9a <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  200ca0:	4b22      	ldr	r3, [pc, #136]	; (200d2c <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  200ca2:	4820      	ldr	r0, [pc, #128]	; (200d24 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  200ca4:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  200ca6:	680b      	ldr	r3, [r1, #0]
  200ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  200cac:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  200cae:	6843      	ldr	r3, [r0, #4]
  200cb0:	045c      	lsls	r4, r3, #17
  200cb2:	d5fc      	bpl.n	200cae <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  200cb4:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  200cb6:	4a1b      	ldr	r2, [pc, #108]	; (200d24 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  200cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  200cbc:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  200cbe:	6853      	ldr	r3, [r2, #4]
  200cc0:	03d9      	lsls	r1, r3, #15
  200cc2:	d5fc      	bpl.n	200cbe <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  200cc4:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  200cc6:	4917      	ldr	r1, [pc, #92]	; (200d24 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  200cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  200ccc:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  200cce:	684b      	ldr	r3, [r1, #4]
  200cd0:	039a      	lsls	r2, r3, #14
  200cd2:	d5fc      	bpl.n	200cce <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  200cd4:	4a12      	ldr	r2, [pc, #72]	; (200d20 <__early_init+0xd0>)
  200cd6:	6813      	ldr	r3, [r2, #0]
  200cd8:	019b      	lsls	r3, r3, #6
  200cda:	d5fc      	bpl.n	200cd6 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  200cdc:	4b14      	ldr	r3, [pc, #80]	; (200d30 <__early_init+0xe0>)
  200cde:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  200ce2:	4d14      	ldr	r5, [pc, #80]	; (200d34 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  200ce4:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  200ce8:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  200cea:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  200cec:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  200cf0:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  200cf4:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  200cf6:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  200cf8:	4909      	ldr	r1, [pc, #36]	; (200d20 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  200cfa:	f043 0302 	orr.w	r3, r3, #2
  200cfe:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  200d00:	688b      	ldr	r3, [r1, #8]
  200d02:	f003 030c 	and.w	r3, r3, #12
  200d06:	2b08      	cmp	r3, #8
  200d08:	d1fa      	bne.n	200d00 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  200d0a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  200d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  200d10:	644b      	str	r3, [r1, #68]	; 0x44
  200d12:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  200d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  200d18:	bc30      	pop	{r4, r5}
  200d1a:	664b      	str	r3, [r1, #100]	; 0x64
  200d1c:	4770      	bx	lr
  200d1e:	bf00      	nop
  200d20:	40023800 	.word	0x40023800
  200d24:	40007000 	.word	0x40007000
  200d28:	10000400 	.word	0x10000400
  200d2c:	09406c08 	.word	0x09406c08
  200d30:	40023c00 	.word	0x40023c00
  200d34:	30999400 	.word	0x30999400
	...

00200d40 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
  200d40:	6983      	ldr	r3, [r0, #24]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  200d42:	b570      	push	{r4, r5, r6, lr}
  sr  = pwmp->tim->SR;
  200d44:	691c      	ldr	r4, [r3, #16]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  200d46:	4605      	mov	r5, r0
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  200d48:	68da      	ldr	r2, [r3, #12]
  200d4a:	4014      	ands	r4, r2
  200d4c:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  200d4e:	07a6      	lsls	r6, r4, #30
  pwmp->tim->SR = ~sr;
  200d50:	ea6f 0202 	mvn.w	r2, r2
  200d54:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  200d56:	d503      	bpl.n	200d60 <pwm_lld_serve_interrupt+0x20>
      (pwmp->config->channels[0].callback != NULL))
  200d58:	6843      	ldr	r3, [r0, #4]
  200d5a:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  200d5c:	b103      	cbz	r3, 200d60 <pwm_lld_serve_interrupt+0x20>
    pwmp->config->channels[0].callback(pwmp);
  200d5e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  200d60:	0760      	lsls	r0, r4, #29
  200d62:	d504      	bpl.n	200d6e <pwm_lld_serve_interrupt+0x2e>
      (pwmp->config->channels[1].callback != NULL))
  200d64:	686b      	ldr	r3, [r5, #4]
  200d66:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  200d68:	b10b      	cbz	r3, 200d6e <pwm_lld_serve_interrupt+0x2e>
    pwmp->config->channels[1].callback(pwmp);
  200d6a:	4628      	mov	r0, r5
  200d6c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  200d6e:	0721      	lsls	r1, r4, #28
  200d70:	d504      	bpl.n	200d7c <pwm_lld_serve_interrupt+0x3c>
      (pwmp->config->channels[2].callback != NULL))
  200d72:	686b      	ldr	r3, [r5, #4]
  200d74:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  200d76:	b10b      	cbz	r3, 200d7c <pwm_lld_serve_interrupt+0x3c>
    pwmp->config->channels[2].callback(pwmp);
  200d78:	4628      	mov	r0, r5
  200d7a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  200d7c:	06e2      	lsls	r2, r4, #27
  200d7e:	d504      	bpl.n	200d8a <pwm_lld_serve_interrupt+0x4a>
      (pwmp->config->channels[3].callback != NULL))
  200d80:	686b      	ldr	r3, [r5, #4]
  200d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  200d84:	b10b      	cbz	r3, 200d8a <pwm_lld_serve_interrupt+0x4a>
    pwmp->config->channels[3].callback(pwmp);
  200d86:	4628      	mov	r0, r5
  200d88:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
  200d8a:	07e3      	lsls	r3, r4, #31
  200d8c:	d506      	bpl.n	200d9c <pwm_lld_serve_interrupt+0x5c>
  200d8e:	686b      	ldr	r3, [r5, #4]
  200d90:	689b      	ldr	r3, [r3, #8]
  200d92:	b11b      	cbz	r3, 200d9c <pwm_lld_serve_interrupt+0x5c>
    pwmp->config->callback(pwmp);
  200d94:	4628      	mov	r0, r5
}
  200d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->callback(pwmp);
  200d9a:	4718      	bx	r3
  200d9c:	bd70      	pop	{r4, r5, r6, pc}
  200d9e:	bf00      	nop

00200da0 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
  200da0:	b480      	push	{r7}
  200da2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  200da4:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
  200da8:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  200daa:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200dae:	2300      	movs	r3, #0
  200db0:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
  200db4:	46bd      	mov	sp, r7
  200db6:	bc80      	pop	{r7}
  200db8:	4770      	bx	lr
  200dba:	bf00      	nop
  200dbc:	0000      	movs	r0, r0
	...

00200dc0 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  200dc0:	b470      	push	{r4, r5, r6}
  200dc2:	2320      	movs	r3, #32
  200dc4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200dc8:	4e0d      	ldr	r6, [pc, #52]	; (200e00 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  200dca:	1e4a      	subs	r2, r1, #1
  200dcc:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  200dce:	4c0d      	ldr	r4, [pc, #52]	; (200e04 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200dd0:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  200dd2:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  200dd4:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200dd6:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  200dd8:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200dda:	1858      	adds	r0, r3, r1
  200ddc:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  200dde:	1a23      	subs	r3, r4, r0
  200de0:	429a      	cmp	r2, r3
  200de2:	d806      	bhi.n	200df2 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  200de4:	4402      	add	r2, r0
  200de6:	2300      	movs	r3, #0
  200de8:	6032      	str	r2, [r6, #0]
  200dea:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  200dee:	bc70      	pop	{r4, r5, r6}
  200df0:	4770      	bx	lr
    return NULL;
  200df2:	2000      	movs	r0, #0
  200df4:	2300      	movs	r3, #0
  200df6:	f383 8811 	msr	BASEPRI, r3
}
  200dfa:	bc70      	pop	{r4, r5, r6}
  200dfc:	4770      	bx	lr
  200dfe:	bf00      	nop
  200e00:	20000a24 	.word	0x20000a24
  200e04:	20000a20 	.word	0x20000a20
	...

00200e10 <wakeup>:
  200e10:	2320      	movs	r3, #32
  200e12:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  200e16:	f890 3020 	ldrb.w	r3, [r0, #32]
  200e1a:	2b07      	cmp	r3, #7
  200e1c:	d80e      	bhi.n	200e3c <wakeup+0x2c>
  200e1e:	e8df f003 	tbb	[pc, r3]
  200e22:	0d28      	.short	0x0d28
  200e24:	0408240d 	.word	0x0408240d
  200e28:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
  200e2a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  200e2c:	6893      	ldr	r3, [r2, #8]
  200e2e:	3301      	adds	r3, #1
  200e30:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  200e32:	e890 000c 	ldmia.w	r0, {r2, r3}
  200e36:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  200e38:	6802      	ldr	r2, [r0, #0]
  200e3a:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  200e3c:	2200      	movs	r2, #0
  200e3e:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  200e40:	4b0e      	ldr	r3, [pc, #56]	; (200e7c <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  200e42:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  200e46:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  200e48:	f04f 34ff 	mov.w	r4, #4294967295
  200e4c:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  200e4e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  200e50:	689a      	ldr	r2, [r3, #8]
  200e52:	428a      	cmp	r2, r1
  200e54:	d2fb      	bcs.n	200e4e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  200e56:	685a      	ldr	r2, [r3, #4]
  200e58:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  200e5a:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  200e5c:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  200e5e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  200e60:	6058      	str	r0, [r3, #4]
  200e62:	f381 8811 	msr	BASEPRI, r1
}
  200e66:	bc10      	pop	{r4}
  200e68:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  200e6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  200e6c:	2200      	movs	r2, #0
  200e6e:	601a      	str	r2, [r3, #0]
  200e70:	e7e4      	b.n	200e3c <wakeup+0x2c>
  200e72:	2300      	movs	r3, #0
  200e74:	f383 8811 	msr	BASEPRI, r3
  200e78:	4770      	bx	lr
  200e7a:	bf00      	nop
  200e7c:	200008b4 	.word	0x200008b4

00200e80 <_idle_thread.lto_priv.27>:
static void _idle_thread(void *p) {
  200e80:	e7fe      	b.n	200e80 <_idle_thread.lto_priv.27>
  200e82:	bf00      	nop
	...

00200e90 <chSchGoSleepS>:
  thread_t *otp = currp;
  200e90:	4b08      	ldr	r3, [pc, #32]	; (200eb4 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  200e92:	681a      	ldr	r2, [r3, #0]
  200e94:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  200e96:	b430      	push	{r4, r5}
  otp->state = newstate;
  200e98:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  200e9c:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  200e9e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  200ea0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  200ea2:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  200ea4:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  200ea6:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  200eaa:	619a      	str	r2, [r3, #24]
}
  200eac:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  200eae:	f7ff ba11 	b.w	2002d4 <_port_switch>
  200eb2:	bf00      	nop
  200eb4:	200008b4 	.word	0x200008b4
	...

00200ec0 <pwm_lld_start>:
void pwm_lld_start(PWMDriver *pwmp) {
  200ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (pwmp->state == PWM_STOP) {
  200ec2:	7803      	ldrb	r3, [r0, #0]
  200ec4:	2b01      	cmp	r3, #1
  200ec6:	d05a      	beq.n	200f7e <pwm_lld_start+0xbe>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
  200ec8:	6983      	ldr	r3, [r0, #24]
  200eca:	2200      	movs	r2, #0
  200ecc:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
  200ece:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
  200ed0:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
  200ed2:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
  200ed4:	641a      	str	r2, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
  200ed6:	7c01      	ldrb	r1, [r0, #16]
  200ed8:	2904      	cmp	r1, #4
  200eda:	d849      	bhi.n	200f70 <pwm_lld_start+0xb0>
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  200edc:	2200      	movs	r2, #0
  200ede:	625a      	str	r2, [r3, #36]	; 0x24
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  200ee0:	6841      	ldr	r1, [r0, #4]
  200ee2:	6944      	ldr	r4, [r0, #20]
  200ee4:	680e      	ldr	r6, [r1, #0]
  pwmp->tim->ARR  = pwmp->period - 1;
  200ee6:	6885      	ldr	r5, [r0, #8]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  200ee8:	68ca      	ldr	r2, [r1, #12]
  pwmp->tim->CR2  = pwmp->config->cr2;
  200eea:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
  pwmp->tim->ARR  = pwmp->period - 1;
  200eec:	3d01      	subs	r5, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  200eee:	f002 020f 	and.w	r2, r2, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  200ef2:	fbb4 f0f6 	udiv	r0, r4, r6
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  200ef6:	2a01      	cmp	r2, #1
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  200ef8:	f100 30ff 	add.w	r0, r0, #4294967295
  pwmp->tim->PSC  = psc;
  200efc:	6298      	str	r0, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
  200efe:	62dd      	str	r5, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
  200f00:	605f      	str	r7, [r3, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  200f02:	d03a      	beq.n	200f7a <pwm_lld_start+0xba>
  200f04:	2a02      	cmp	r2, #2
  200f06:	d136      	bne.n	200f76 <pwm_lld_start+0xb6>
    ccer |= STM32_TIM_CCER_CC1E;
  200f08:	f042 0201 	orr.w	r2, r2, #1
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  200f0c:	6948      	ldr	r0, [r1, #20]
  200f0e:	f000 000f 	and.w	r0, r0, #15
  200f12:	2801      	cmp	r0, #1
  200f14:	d029      	beq.n	200f6a <pwm_lld_start+0xaa>
  200f16:	2802      	cmp	r0, #2
  200f18:	d025      	beq.n	200f66 <pwm_lld_start+0xa6>
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  200f1a:	69c8      	ldr	r0, [r1, #28]
  200f1c:	f000 000f 	and.w	r0, r0, #15
  200f20:	2801      	cmp	r0, #1
  200f22:	d01d      	beq.n	200f60 <pwm_lld_start+0xa0>
  200f24:	2802      	cmp	r0, #2
  200f26:	d019      	beq.n	200f5c <pwm_lld_start+0x9c>
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
  200f28:	6a48      	ldr	r0, [r1, #36]	; 0x24
  200f2a:	f000 000f 	and.w	r0, r0, #15
  200f2e:	2801      	cmp	r0, #1
  200f30:	d003      	beq.n	200f3a <pwm_lld_start+0x7a>
  200f32:	2802      	cmp	r0, #2
  200f34:	d103      	bne.n	200f3e <pwm_lld_start+0x7e>
    ccer |= STM32_TIM_CCER_CC4P;
  200f36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
  200f3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  200f3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  200f40:	2601      	movs	r6, #1
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  200f42:	2500      	movs	r5, #0
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
  200f44:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  200f48:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  200f4c:	2085      	movs	r0, #133	; 0x85
  pwmp->tim->CCER  = ccer;
  200f4e:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  200f50:	615e      	str	r6, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  200f52:	611d      	str	r5, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  200f54:	60d9      	str	r1, [r3, #12]
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
  200f56:	645c      	str	r4, [r3, #68]	; 0x44
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  200f58:	6018      	str	r0, [r3, #0]
  200f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccer |= STM32_TIM_CCER_CC3P;
  200f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
  200f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  200f64:	e7e0      	b.n	200f28 <pwm_lld_start+0x68>
    ccer |= STM32_TIM_CCER_CC2P;
  200f66:	f042 0220 	orr.w	r2, r2, #32
    ccer |= STM32_TIM_CCER_CC2E;
  200f6a:	f042 0210 	orr.w	r2, r2, #16
  200f6e:	e7d4      	b.n	200f1a <pwm_lld_start+0x5a>
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
  200f70:	659a      	str	r2, [r3, #88]	; 0x58
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
  200f72:	65da      	str	r2, [r3, #92]	; 0x5c
  200f74:	e7b2      	b.n	200edc <pwm_lld_start+0x1c>
  ccer = 0;
  200f76:	2200      	movs	r2, #0
  200f78:	e7c8      	b.n	200f0c <pwm_lld_start+0x4c>
  200f7a:	2200      	movs	r2, #0
  200f7c:	e7c4      	b.n	200f08 <pwm_lld_start+0x48>
    if (&PWMD1 == pwmp) {
  200f7e:	4b2f      	ldr	r3, [pc, #188]	; (20103c <pwm_lld_start+0x17c>)
  200f80:	4298      	cmp	r0, r3
  200f82:	d00d      	beq.n	200fa0 <pwm_lld_start+0xe0>
    if (&PWMD3 == pwmp) {
  200f84:	4b2e      	ldr	r3, [pc, #184]	; (201040 <pwm_lld_start+0x180>)
  200f86:	4298      	cmp	r0, r3
  200f88:	d02a      	beq.n	200fe0 <pwm_lld_start+0x120>
    if (&PWMD4 == pwmp) {
  200f8a:	4b2e      	ldr	r3, [pc, #184]	; (201044 <pwm_lld_start+0x184>)
  200f8c:	4298      	cmp	r0, r3
  200f8e:	d03e      	beq.n	20100e <pwm_lld_start+0x14e>
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  200f90:	6983      	ldr	r3, [r0, #24]
  200f92:	f646 0268 	movw	r2, #26728	; 0x6868
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  200f96:	492c      	ldr	r1, [pc, #176]	; (201048 <pwm_lld_start+0x188>)
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  200f98:	619a      	str	r2, [r3, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
  200f9a:	61da      	str	r2, [r3, #28]
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  200f9c:	6559      	str	r1, [r3, #84]	; 0x54
  200f9e:	e79f      	b.n	200ee0 <pwm_lld_start+0x20>
      rccEnableTIM1(FALSE);
  200fa0:	4a2a      	ldr	r2, [pc, #168]	; (20104c <pwm_lld_start+0x18c>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200fa2:	2570      	movs	r5, #112	; 0x70
  200fa4:	4b2a      	ldr	r3, [pc, #168]	; (201050 <pwm_lld_start+0x190>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200fa6:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  200faa:	6c51      	ldr	r1, [r2, #68]	; 0x44
  200fac:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
      rccResetTIM1();
  200fb0:	f04f 0e00 	mov.w	lr, #0
      pwmp->clock = STM32_TIMCLK2;
  200fb4:	4f27      	ldr	r7, [pc, #156]	; (201054 <pwm_lld_start+0x194>)
      rccEnableTIM1(FALSE);
  200fb6:	f041 0101 	orr.w	r1, r1, #1
  200fba:	6451      	str	r1, [r2, #68]	; 0x44
      rccResetTIM1();
  200fbc:	6a51      	ldr	r1, [r2, #36]	; 0x24
  200fbe:	f041 0101 	orr.w	r1, r1, #1
  200fc2:	6251      	str	r1, [r2, #36]	; 0x24
  200fc4:	f8c2 e024 	str.w	lr, [r2, #36]	; 0x24
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200fc8:	f883 5319 	strb.w	r5, [r3, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200fcc:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200fd0:	601e      	str	r6, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200fd2:	f883 531b 	strb.w	r5, [r3, #795]	; 0x31b
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200fd6:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200fda:	601c      	str	r4, [r3, #0]
      pwmp->clock = STM32_TIMCLK2;
  200fdc:	6147      	str	r7, [r0, #20]
  200fde:	e7d1      	b.n	200f84 <pwm_lld_start+0xc4>
      rccEnableTIM3(FALSE);
  200fe0:	4b1a      	ldr	r3, [pc, #104]	; (20104c <pwm_lld_start+0x18c>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200fe2:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200fe6:	4a1a      	ldr	r2, [pc, #104]	; (201050 <pwm_lld_start+0x190>)
      rccResetTIM3();
  200fe8:	2700      	movs	r7, #0
      rccEnableTIM3(FALSE);
  200fea:	6c19      	ldr	r1, [r3, #64]	; 0x40
  200fec:	2670      	movs	r6, #112	; 0x70
      pwmp->clock = STM32_TIMCLK1;
  200fee:	4d1a      	ldr	r5, [pc, #104]	; (201058 <pwm_lld_start+0x198>)
      rccEnableTIM3(FALSE);
  200ff0:	f041 0102 	orr.w	r1, r1, #2
  200ff4:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM3();
  200ff6:	6a19      	ldr	r1, [r3, #32]
  200ff8:	f041 0102 	orr.w	r1, r1, #2
  200ffc:	6219      	str	r1, [r3, #32]
  200ffe:	621f      	str	r7, [r3, #32]
  201000:	f882 631d 	strb.w	r6, [r2, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201004:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201008:	6014      	str	r4, [r2, #0]
      pwmp->clock = STM32_TIMCLK1;
  20100a:	6145      	str	r5, [r0, #20]
  20100c:	e7bd      	b.n	200f8a <pwm_lld_start+0xca>
      rccEnableTIM4(FALSE);
  20100e:	4b0f      	ldr	r3, [pc, #60]	; (20104c <pwm_lld_start+0x18c>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201010:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201014:	4a0e      	ldr	r2, [pc, #56]	; (201050 <pwm_lld_start+0x190>)
      rccResetTIM4();
  201016:	2700      	movs	r7, #0
      rccEnableTIM4(FALSE);
  201018:	6c19      	ldr	r1, [r3, #64]	; 0x40
  20101a:	2670      	movs	r6, #112	; 0x70
      pwmp->clock = STM32_TIMCLK1;
  20101c:	4d0e      	ldr	r5, [pc, #56]	; (201058 <pwm_lld_start+0x198>)
      rccEnableTIM4(FALSE);
  20101e:	f041 0104 	orr.w	r1, r1, #4
  201022:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM4();
  201024:	6a19      	ldr	r1, [r3, #32]
  201026:	f041 0104 	orr.w	r1, r1, #4
  20102a:	6219      	str	r1, [r3, #32]
  20102c:	621f      	str	r7, [r3, #32]
  20102e:	f882 631e 	strb.w	r6, [r2, #798]	; 0x31e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201032:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201036:	6014      	str	r4, [r2, #0]
      pwmp->clock = STM32_TIMCLK1;
  201038:	6145      	str	r5, [r0, #20]
  20103a:	e7a9      	b.n	200f90 <pwm_lld_start+0xd0>
  20103c:	20000800 	.word	0x20000800
  201040:	2000081c 	.word	0x2000081c
  201044:	20000838 	.word	0x20000838
  201048:	01016868 	.word	0x01016868
  20104c:	40023800 	.word	0x40023800
  201050:	e000e100 	.word	0xe000e100
  201054:	0cdfe600 	.word	0x0cdfe600
  201058:	066ff300 	.word	0x066ff300
  20105c:	00000000 	.word	0x00000000

00201060 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
  201060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  201064:	f002 0903 	and.w	r9, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  201068:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  20106c:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  201070:	f3c2 1e41 	ubfx	lr, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  201074:	2600      	movs	r6, #0
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  201076:	464f      	mov	r7, r9
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  201078:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  20107c:	f04f 0a0f 	mov.w	sl, #15
  201080:	e00e      	b.n	2010a0 <_pal_lld_setgroupmode+0x40>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  201082:	6a03      	ldr	r3, [r0, #32]
  201084:	ea23 0404 	bic.w	r4, r3, r4
  201088:	4325      	orrs	r5, r4
  20108a:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  20108c:	0849      	lsrs	r1, r1, #1
  20108e:	d047      	beq.n	201120 <_pal_lld_setgroupmode+0xc0>
      return;
    otyper <<= 1;
  201090:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  201094:	3601      	adds	r6, #1
    ospeedr <<= 2;
  201096:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
  20109a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
  20109e:	00bf      	lsls	r7, r7, #2
    if ((mask & 1) != 0) {
  2010a0:	07cb      	lsls	r3, r1, #31
  2010a2:	d5f3      	bpl.n	20108c <_pal_lld_setgroupmode+0x2c>
      m1 = 1 << bit;
  2010a4:	2301      	movs	r3, #1
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2010a6:	6845      	ldr	r5, [r0, #4]
      altrmask = altr << ((bit & 7) * 4);
  2010a8:	f006 0407 	and.w	r4, r6, #7
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  2010ac:	f1b9 0f02 	cmp.w	r9, #2
      m1 = 1 << bit;
  2010b0:	fa03 fb06 	lsl.w	fp, r3, r6
      m2 = 3 << (bit * 2);
  2010b4:	fa06 f303 	lsl.w	r3, r6, r3
      altrmask = altr << ((bit & 7) * 4);
  2010b8:	ea4f 0484 	mov.w	r4, r4, lsl #2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2010bc:	ea25 0b0b 	bic.w	fp, r5, fp
      m2 = 3 << (bit * 2);
  2010c0:	f04f 0503 	mov.w	r5, #3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2010c4:	ea4b 0b08 	orr.w	fp, fp, r8
      m2 = 3 << (bit * 2);
  2010c8:	fa05 f303 	lsl.w	r3, r5, r3
      altrmask = altr << ((bit & 7) * 4);
  2010cc:	fa02 f504 	lsl.w	r5, r2, r4
      m4 = 15 << ((bit & 7) * 4);
  2010d0:	fa0a f404 	lsl.w	r4, sl, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2010d4:	f8c0 b004 	str.w	fp, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  2010d8:	ea6f 0303 	mvn.w	r3, r3
  2010dc:	f8d0 b008 	ldr.w	fp, [r0, #8]
  2010e0:	ea0b 0b03 	and.w	fp, fp, r3
  2010e4:	ea4b 0b0c 	orr.w	fp, fp, ip
  2010e8:	f8c0 b008 	str.w	fp, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  2010ec:	f8d0 b00c 	ldr.w	fp, [r0, #12]
  2010f0:	ea03 0b0b 	and.w	fp, r3, fp
  2010f4:	ea4b 0b0e 	orr.w	fp, fp, lr
  2010f8:	f8c0 b00c 	str.w	fp, [r0, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  2010fc:	d012      	beq.n	201124 <_pal_lld_setgroupmode+0xc4>
        port->MODER   = (port->MODER & ~m2) | moder;
  2010fe:	f8d0 b000 	ldr.w	fp, [r0]
        if (bit < 8)
  201102:	2e07      	cmp	r6, #7
        port->MODER   = (port->MODER & ~m2) | moder;
  201104:	ea03 030b 	and.w	r3, r3, fp
  201108:	ea43 0307 	orr.w	r3, r3, r7
  20110c:	6003      	str	r3, [r0, #0]
        if (bit < 8)
  20110e:	d9b8      	bls.n	201082 <_pal_lld_setgroupmode+0x22>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  201110:	6a43      	ldr	r3, [r0, #36]	; 0x24
    if (!mask)
  201112:	0849      	lsrs	r1, r1, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  201114:	ea23 0404 	bic.w	r4, r3, r4
  201118:	ea45 0504 	orr.w	r5, r5, r4
  20111c:	6245      	str	r5, [r0, #36]	; 0x24
    if (!mask)
  20111e:	d1b7      	bne.n	201090 <_pal_lld_setgroupmode+0x30>
  201120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bit < 8)
  201124:	2e07      	cmp	r6, #7
  201126:	d80a      	bhi.n	20113e <_pal_lld_setgroupmode+0xde>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  201128:	f8d0 b020 	ldr.w	fp, [r0, #32]
  20112c:	ea2b 0404 	bic.w	r4, fp, r4
  201130:	4325      	orrs	r5, r4
  201132:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
  201134:	6804      	ldr	r4, [r0, #0]
  201136:	4023      	ands	r3, r4
  201138:	433b      	orrs	r3, r7
  20113a:	6003      	str	r3, [r0, #0]
  20113c:	e7a6      	b.n	20108c <_pal_lld_setgroupmode+0x2c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  20113e:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
  201142:	ea2b 0404 	bic.w	r4, fp, r4
  201146:	4325      	orrs	r5, r4
  201148:	6245      	str	r5, [r0, #36]	; 0x24
  20114a:	e7f3      	b.n	201134 <_pal_lld_setgroupmode+0xd4>
  20114c:	0000      	movs	r0, r0
	...

00201150 <_port_irq_epilogue>:
  201150:	2320      	movs	r3, #32
  201152:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  201156:	4b11      	ldr	r3, [pc, #68]	; (20119c <_port_irq_epilogue+0x4c>)
  201158:	685b      	ldr	r3, [r3, #4]
  20115a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  20115e:	d102      	bne.n	201166 <_port_irq_epilogue+0x16>
  201160:	f383 8811 	msr	BASEPRI, r3
  201164:	4770      	bx	lr
void _port_irq_epilogue(void) {
  201166:	b480      	push	{r7}
  201168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  20116a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  20116e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  201172:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  201176:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20117a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  20117e:	4a08      	ldr	r2, [pc, #32]	; (2011a0 <_port_irq_epilogue+0x50>)
  201180:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  201182:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  201184:	6889      	ldr	r1, [r1, #8]
  201186:	6892      	ldr	r2, [r2, #8]
  201188:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  20118a:	bf8c      	ite	hi
  20118c:	4a05      	ldrhi	r2, [pc, #20]	; (2011a4 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  20118e:	4a06      	ldrls	r2, [pc, #24]	; (2011a8 <_port_irq_epilogue+0x58>)
  201190:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  201194:	46bd      	mov	sp, r7
  201196:	bc80      	pop	{r7}
  201198:	4770      	bx	lr
  20119a:	bf00      	nop
  20119c:	e000ed00 	.word	0xe000ed00
  2011a0:	200008b4 	.word	0x200008b4
  2011a4:	002002f5 	.word	0x002002f5
  2011a8:	002002f8 	.word	0x002002f8
  2011ac:	00000000 	.word	0x00000000

002011b0 <VectorB8>:
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
  2011b0:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD4);
  2011b2:	4803      	ldr	r0, [pc, #12]	; (2011c0 <VectorB8+0x10>)
  2011b4:	f7ff fdc4 	bl	200d40 <pwm_lld_serve_interrupt>
}
  2011b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2011bc:	f7ff bfc8 	b.w	201150 <_port_irq_epilogue>
  2011c0:	20000838 	.word	0x20000838
	...

002011d0 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
  2011d0:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD3);
  2011d2:	4803      	ldr	r0, [pc, #12]	; (2011e0 <VectorB4+0x10>)
  2011d4:	f7ff fdb4 	bl	200d40 <pwm_lld_serve_interrupt>
}
  2011d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2011dc:	f7ff bfb8 	b.w	201150 <_port_irq_epilogue>
  2011e0:	2000081c 	.word	0x2000081c
	...

002011f0 <VectorA4>:
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
  2011f0:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD1);
  2011f2:	4803      	ldr	r0, [pc, #12]	; (201200 <VectorA4+0x10>)
  2011f4:	f7ff fda4 	bl	200d40 <pwm_lld_serve_interrupt>
}
  2011f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2011fc:	f7ff bfa8 	b.w	201150 <_port_irq_epilogue>
  201200:	20000800 	.word	0x20000800
	...

00201210 <VectorAC>:
  201210:	f7ff bfee 	b.w	2011f0 <VectorA4>
	...

00201220 <SysTick_Handler>:
OSAL_IRQ_HANDLER(SysTick_Handler) {
  201220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201222:	2720      	movs	r7, #32
  201224:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  201228:	4d12      	ldr	r5, [pc, #72]	; (201274 <SysTick_Handler+0x54>)
  20122a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20122c:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  20122e:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  201230:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  201234:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  201236:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  201238:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20123a:	d013      	beq.n	201264 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  20123c:	891c      	ldrh	r4, [r3, #8]
  20123e:	3c01      	subs	r4, #1
  201240:	b2a4      	uxth	r4, r4
  201242:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  201244:	b974      	cbnz	r4, 201264 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  201246:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  201248:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  20124a:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  20124c:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  20124e:	61ea      	str	r2, [r5, #28]
  201250:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  201254:	6918      	ldr	r0, [r3, #16]
  201256:	4788      	blx	r1
  201258:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  20125c:	69eb      	ldr	r3, [r5, #28]
  20125e:	891a      	ldrh	r2, [r3, #8]
  201260:	2a00      	cmp	r2, #0
  201262:	d0f0      	beq.n	201246 <SysTick_Handler+0x26>
  201264:	2300      	movs	r3, #0
  201266:	f383 8811 	msr	BASEPRI, r3
}
  20126a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  20126e:	f7ff bf6f 	b.w	201150 <_port_irq_epilogue>
  201272:	bf00      	nop
  201274:	200008b4 	.word	0x200008b4
	...

00201280 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  201280:	4b0e      	ldr	r3, [pc, #56]	; (2012bc <chTMStopMeasurementX+0x3c>)
  tmp->last = (now - tmp->last) - offset;
  201282:	6882      	ldr	r2, [r0, #8]
  201284:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  201286:	490e      	ldr	r1, [pc, #56]	; (2012c0 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  201288:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  20128a:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  20128c:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  20128e:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  201290:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  201292:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  201294:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  201296:	6083      	str	r3, [r0, #8]
  tmp->n++;
  201298:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  20129a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  20129e:	18e4      	adds	r4, r4, r3
  2012a0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  2012a4:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  2012a6:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  2012a8:	bf88      	it	hi
  2012aa:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  2012ac:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  2012ae:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  2012b2:	bf38      	it	cc
  2012b4:	6003      	strcc	r3, [r0, #0]
}
  2012b6:	bc30      	pop	{r4, r5}
  2012b8:	4770      	bx	lr
  2012ba:	bf00      	nop
  2012bc:	e0001000 	.word	0xe0001000
  2012c0:	200008b4 	.word	0x200008b4
	...

002012d0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  2012d0:	4a0e      	ldr	r2, [pc, #56]	; (20130c <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  2012d2:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  2012d4:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  2012d6:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  2012d8:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  2012da:	2500      	movs	r5, #0
  thread_t *otp = currp;
  2012dc:	6994      	ldr	r4, [r2, #24]
  2012de:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  2012e0:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  2012e2:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  2012e6:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  2012ea:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  2012ec:	6190      	str	r0, [r2, #24]
  2012ee:	e000      	b.n	2012f2 <chSchDoReschedule+0x22>
  2012f0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  2012f2:	689a      	ldr	r2, [r3, #8]
  2012f4:	4291      	cmp	r1, r2
  2012f6:	d3fb      	bcc.n	2012f0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  2012f8:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  2012fa:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  2012fc:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  2012fe:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  201300:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201302:	605c      	str	r4, [r3, #4]
}
  201304:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201306:	f7fe bfe5 	b.w	2002d4 <_port_switch>
  20130a:	bf00      	nop
  20130c:	200008b4 	.word	0x200008b4

00201310 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
  201310:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201314:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  201316:	b5f0      	push	{r4, r5, r6, r7, lr}
  201318:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
  20131a:	d031      	beq.n	201380 <chSchGoSleepTimeoutS+0x70>
    chVTDoSetI(&vt, time, wakeup, currp);
  20131c:	4c1c      	ldr	r4, [pc, #112]	; (201390 <chSchGoSleepTimeoutS+0x80>)
  20131e:	4607      	mov	r7, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  201320:	481c      	ldr	r0, [pc, #112]	; (201394 <chSchGoSleepTimeoutS+0x84>)
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
  201322:	69e3      	ldr	r3, [r4, #28]
  vtp->par = par;
  201324:	69a5      	ldr	r5, [r4, #24]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  201326:	891a      	ldrh	r2, [r3, #8]
  vtp->par = par;
  201328:	9505      	str	r5, [sp, #20]
  while (p->delta < delta) {
  20132a:	4291      	cmp	r1, r2
  vtp->func = vtfunc;
  20132c:	9004      	str	r0, [sp, #16]
  while (p->delta < delta) {
  20132e:	d905      	bls.n	20133c <chSchGoSleepTimeoutS+0x2c>
    delta -= p->delta;
  201330:	1a89      	subs	r1, r1, r2
    p = p->next;
  201332:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  201334:	b289      	uxth	r1, r1
  while (p->delta < delta) {
  201336:	891a      	ldrh	r2, [r3, #8]
  201338:	428a      	cmp	r2, r1
  20133a:	d3f9      	bcc.n	201330 <chSchGoSleepTimeoutS+0x20>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  20133c:	685d      	ldr	r5, [r3, #4]
  vtp->prev->next = vtp;
  20133e:	aa01      	add	r2, sp, #4
  vtp->next = p;
  201340:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  201342:	f64f 76ff 	movw	r6, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
  201346:	9502      	str	r5, [sp, #8]
    chSchGoSleepS(newstate);
  201348:	4638      	mov	r0, r7
  vtp->prev->next = vtp;
  20134a:	602a      	str	r2, [r5, #0]
  p->prev = vtp;
  20134c:	605a      	str	r2, [r3, #4]
  vtp->delta = delta
  20134e:	f8ad 100c 	strh.w	r1, [sp, #12]
  p->delta -= delta;
  201352:	891a      	ldrh	r2, [r3, #8]
  201354:	1a51      	subs	r1, r2, r1
  201356:	8119      	strh	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  201358:	84a6      	strh	r6, [r4, #36]	; 0x24
  20135a:	f7ff fd99 	bl	200e90 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  20135e:	9b04      	ldr	r3, [sp, #16]
  201360:	b153      	cbz	r3, 201378 <chSchGoSleepTimeoutS+0x68>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
  201362:	9b01      	ldr	r3, [sp, #4]
  201364:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  201368:	891a      	ldrh	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
  20136a:	9902      	ldr	r1, [sp, #8]
  vtp->next->delta += vtp->delta;
  20136c:	4402      	add	r2, r0
  20136e:	811a      	strh	r2, [r3, #8]
  vtp->prev->next = vtp->next;
  201370:	600b      	str	r3, [r1, #0]
  vtp->next->prev = vtp->prev;
  201372:	9b01      	ldr	r3, [sp, #4]
  201374:	6059      	str	r1, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
  201376:	84a6      	strh	r6, [r4, #36]	; 0x24
  return currp->u.rdymsg;
  201378:	69a3      	ldr	r3, [r4, #24]
}
  20137a:	6a58      	ldr	r0, [r3, #36]	; 0x24
  20137c:	b007      	add	sp, #28
  20137e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201380:	4c03      	ldr	r4, [pc, #12]	; (201390 <chSchGoSleepTimeoutS+0x80>)
    chSchGoSleepS(newstate);
  201382:	f7ff fd85 	bl	200e90 <chSchGoSleepS>
  return currp->u.rdymsg;
  201386:	69a3      	ldr	r3, [r4, #24]
}
  201388:	6a58      	ldr	r0, [r3, #36]	; 0x24
  20138a:	b007      	add	sp, #28
  20138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20138e:	bf00      	nop
  201390:	200008b4 	.word	0x200008b4
  201394:	00200e11 	.word	0x00200e11
	...

002013a0 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
  2013a0:	b161      	cbz	r1, 2013bc <chThdEnqueueTimeoutS+0x1c>
  2013a2:	4602      	mov	r2, r0
  queue_insert(currp, tqp);
  2013a4:	4b07      	ldr	r3, [pc, #28]	; (2013c4 <chThdEnqueueTimeoutS+0x24>)
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  2013a6:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  2013a8:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  2013aa:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  2013ac:	6854      	ldr	r4, [r2, #4]
  2013ae:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
  2013b2:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  2013b4:	6053      	str	r3, [r2, #4]
}
  2013b6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  2013b8:	f7ff bfaa 	b.w	201310 <chSchGoSleepTimeoutS>
}
  2013bc:	f04f 30ff 	mov.w	r0, #4294967295
  2013c0:	4770      	bx	lr
  2013c2:	bf00      	nop
  2013c4:	200008b4 	.word	0x200008b4
	...

002013d0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  2013d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2013d4:	4699      	mov	r9, r3
  2013d6:	b083      	sub	sp, #12
  2013d8:	4604      	mov	r4, r0
  2013da:	460e      	mov	r6, r1
  2013dc:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  2013de:	f8d0 801c 	ldr.w	r8, [r0, #28]
  2013e2:	2320      	movs	r3, #32
  2013e4:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.systime;
  2013e8:	4b26      	ldr	r3, [pc, #152]	; (201484 <oqWriteTimeout+0xb4>)
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2013ea:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t w = 0;
  2013ee:	2700      	movs	r7, #0
  2013f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2013f2:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  2013f6:	fa19 f383 	uxtah	r3, r9, r3
  2013fa:	b29b      	uxth	r3, r3
  2013fc:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  2013fe:	68a3      	ldr	r3, [r4, #8]
  201400:	b313      	cbz	r3, 201448 <oqWriteTimeout+0x78>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  201402:	6961      	ldr	r1, [r4, #20]
  201404:	f106 0b01 	add.w	fp, r6, #1
    oqp->q_counter--;
  201408:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  20140a:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  20140c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  20140e:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  201410:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201412:	7833      	ldrb	r3, [r6, #0]
  201414:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  201416:	6961      	ldr	r1, [r4, #20]
  201418:	6923      	ldr	r3, [r4, #16]
  20141a:	4299      	cmp	r1, r3
  20141c:	d301      	bcc.n	201422 <oqWriteTimeout+0x52>
      oqp->q_wrptr = oqp->q_buffer;
  20141e:	68e3      	ldr	r3, [r4, #12]
  201420:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  201422:	f1b8 0f00 	cmp.w	r8, #0
  201426:	d001      	beq.n	20142c <oqWriteTimeout+0x5c>
      nfy(oqp);
  201428:	4620      	mov	r0, r4
  20142a:	47c0      	blx	r8
  20142c:	2300      	movs	r3, #0
  20142e:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  201432:	3d01      	subs	r5, #1
    w++;
  201434:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  201438:	d019      	beq.n	20146e <oqWriteTimeout+0x9e>
  20143a:	2320      	movs	r3, #32
  20143c:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  201440:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201442:	465e      	mov	r6, fp
    while (oqIsFullI(oqp)) {
  201444:	2b00      	cmp	r3, #0
  201446:	d1dc      	bne.n	201402 <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201448:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  20144c:	4592      	cmp	sl, r2
  20144e:	d812      	bhi.n	201476 <oqWriteTimeout+0xa6>
  201450:	4a0c      	ldr	r2, [pc, #48]	; (201484 <oqWriteTimeout+0xb4>)
  201452:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  201454:	9a01      	ldr	r2, [sp, #4]
  201456:	1a51      	subs	r1, r2, r1
  201458:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  20145a:	4589      	cmp	r9, r1
  20145c:	d305      	bcc.n	20146a <oqWriteTimeout+0x9a>
  return chThdEnqueueTimeoutS(tqp, time);
  20145e:	4620      	mov	r0, r4
  201460:	f7ff ff9e 	bl	2013a0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201464:	2800      	cmp	r0, #0
  201466:	d0ca      	beq.n	2013fe <oqWriteTimeout+0x2e>
  201468:	2300      	movs	r3, #0
  20146a:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  20146e:	4638      	mov	r0, r7
  201470:	b003      	add	sp, #12
  201472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201476:	4649      	mov	r1, r9
  201478:	4620      	mov	r0, r4
  20147a:	f7ff ff91 	bl	2013a0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  20147e:	2800      	cmp	r0, #0
  201480:	d0bd      	beq.n	2013fe <oqWriteTimeout+0x2e>
  201482:	e7f1      	b.n	201468 <oqWriteTimeout+0x98>
  201484:	200008b4 	.word	0x200008b4
	...

00201490 <_writet.lto_priv.25>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  201490:	3030      	adds	r0, #48	; 0x30
  201492:	f7ff bf9d 	b.w	2013d0 <oqWriteTimeout>
  201496:	bf00      	nop
	...

002014a0 <_write.lto_priv.19>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  2014a0:	3030      	adds	r0, #48	; 0x30
  2014a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  2014a6:	f7ff bf93 	b.w	2013d0 <oqWriteTimeout>
  2014aa:	bf00      	nop
  2014ac:	0000      	movs	r0, r0
	...

002014b0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  2014b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  2014b2:	4604      	mov	r4, r0
  2014b4:	460f      	mov	r7, r1
  2014b6:	4616      	mov	r6, r2
  2014b8:	2320      	movs	r3, #32
  2014ba:	f383 8811 	msr	BASEPRI, r3
  2014be:	e003      	b.n	2014c8 <oqPutTimeout+0x18>
  2014c0:	f7ff ff6e 	bl	2013a0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  2014c4:	2800      	cmp	r0, #0
  2014c6:	db19      	blt.n	2014fc <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  2014c8:	68a5      	ldr	r5, [r4, #8]
  2014ca:	4631      	mov	r1, r6
  2014cc:	4620      	mov	r0, r4
  2014ce:	2d00      	cmp	r5, #0
  2014d0:	d0f6      	beq.n	2014c0 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  2014d2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  2014d4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  2014d6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  2014d8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  2014da:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  2014dc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  2014de:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  2014e0:	6962      	ldr	r2, [r4, #20]
  2014e2:	6923      	ldr	r3, [r4, #16]
  2014e4:	429a      	cmp	r2, r3
  2014e6:	d301      	bcc.n	2014ec <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  2014e8:	68e3      	ldr	r3, [r4, #12]
  2014ea:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  2014ec:	69e3      	ldr	r3, [r4, #28]
  2014ee:	b10b      	cbz	r3, 2014f4 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  2014f0:	4620      	mov	r0, r4
  2014f2:	4798      	blx	r3
  2014f4:	2000      	movs	r0, #0
  2014f6:	f380 8811 	msr	BASEPRI, r0
}
  2014fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  2014fc:	f385 8811 	msr	BASEPRI, r5
  201500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201502:	bf00      	nop
	...

00201510 <_putt.lto_priv.23>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  201510:	3030      	adds	r0, #48	; 0x30
  201512:	f7ff bfcd 	b.w	2014b0 <oqPutTimeout>
  201516:	bf00      	nop
	...

00201520 <_put.lto_priv.21>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  201520:	3030      	adds	r0, #48	; 0x30
  201522:	f64f 72ff 	movw	r2, #65535	; 0xffff
  201526:	f7ff bfc3 	b.w	2014b0 <oqPutTimeout>
  20152a:	bf00      	nop
  20152c:	0000      	movs	r0, r0
	...

00201530 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  201530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201534:	4699      	mov	r9, r3
  201536:	b083      	sub	sp, #12
  201538:	4604      	mov	r4, r0
  20153a:	460e      	mov	r6, r1
  20153c:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  20153e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  201542:	2320      	movs	r3, #32
  201544:	f383 8811 	msr	BASEPRI, r3
  201548:	4b26      	ldr	r3, [pc, #152]	; (2015e4 <iqReadTimeout+0xb4>)
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  20154a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t r = 0;
  20154e:	2700      	movs	r7, #0
  201550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201552:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  201556:	fa19 f383 	uxtah	r3, r9, r3
  20155a:	b29b      	uxth	r3, r3
  20155c:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  20155e:	68a3      	ldr	r3, [r4, #8]
  201560:	b313      	cbz	r3, 2015a8 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
  201562:	69a1      	ldr	r1, [r4, #24]
  201564:	f106 0b01 	add.w	fp, r6, #1
    iqp->q_counter--;
  201568:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  20156a:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  20156c:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  20156e:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  201570:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201572:	780b      	ldrb	r3, [r1, #0]
  201574:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  201576:	69a1      	ldr	r1, [r4, #24]
  201578:	6923      	ldr	r3, [r4, #16]
  20157a:	4299      	cmp	r1, r3
  20157c:	d301      	bcc.n	201582 <iqReadTimeout+0x52>
      iqp->q_rdptr = iqp->q_buffer;
  20157e:	68e3      	ldr	r3, [r4, #12]
  201580:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  201582:	f1b8 0f00 	cmp.w	r8, #0
  201586:	d001      	beq.n	20158c <iqReadTimeout+0x5c>
      nfy(iqp);
  201588:	4620      	mov	r0, r4
  20158a:	47c0      	blx	r8
  20158c:	2300      	movs	r3, #0
  20158e:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  201592:	3d01      	subs	r5, #1
    r++;
  201594:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  201598:	d019      	beq.n	2015ce <iqReadTimeout+0x9e>
  20159a:	2320      	movs	r3, #32
  20159c:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  2015a0:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  2015a2:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
  2015a4:	2b00      	cmp	r3, #0
  2015a6:	d1dc      	bne.n	201562 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2015a8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  2015ac:	4592      	cmp	sl, r2
  2015ae:	d812      	bhi.n	2015d6 <iqReadTimeout+0xa6>
  2015b0:	4a0c      	ldr	r2, [pc, #48]	; (2015e4 <iqReadTimeout+0xb4>)
  2015b2:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  2015b4:	9a01      	ldr	r2, [sp, #4]
  2015b6:	1a51      	subs	r1, r2, r1
  2015b8:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  2015ba:	4589      	cmp	r9, r1
  2015bc:	d305      	bcc.n	2015ca <iqReadTimeout+0x9a>
  2015be:	4620      	mov	r0, r4
  2015c0:	f7ff feee 	bl	2013a0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2015c4:	2800      	cmp	r0, #0
  2015c6:	d0ca      	beq.n	20155e <iqReadTimeout+0x2e>
  2015c8:	2300      	movs	r3, #0
  2015ca:	f383 8811 	msr	BASEPRI, r3
}
  2015ce:	4638      	mov	r0, r7
  2015d0:	b003      	add	sp, #12
  2015d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  2015d6:	4649      	mov	r1, r9
  2015d8:	4620      	mov	r0, r4
  2015da:	f7ff fee1 	bl	2013a0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2015de:	2800      	cmp	r0, #0
  2015e0:	d0bd      	beq.n	20155e <iqReadTimeout+0x2e>
  2015e2:	e7f1      	b.n	2015c8 <iqReadTimeout+0x98>
  2015e4:	200008b4 	.word	0x200008b4
	...

002015f0 <_readt.lto_priv.26>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  2015f0:	300c      	adds	r0, #12
  2015f2:	f7ff bf9d 	b.w	201530 <iqReadTimeout>
  2015f6:	bf00      	nop
	...

00201600 <_read.lto_priv.20>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  201600:	300c      	adds	r0, #12
  201602:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201606:	f7ff bf93 	b.w	201530 <iqReadTimeout>
  20160a:	bf00      	nop
  20160c:	0000      	movs	r0, r0
	...

00201610 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  201610:	b570      	push	{r4, r5, r6, lr}
  201612:	2320      	movs	r3, #32
  201614:	4604      	mov	r4, r0
  201616:	460e      	mov	r6, r1
  201618:	f383 8811 	msr	BASEPRI, r3
  20161c:	e003      	b.n	201626 <iqGetTimeout+0x16>
  20161e:	f7ff febf 	bl	2013a0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201622:	2800      	cmp	r0, #0
  201624:	db19      	blt.n	20165a <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  201626:	68a5      	ldr	r5, [r4, #8]
  201628:	4631      	mov	r1, r6
  20162a:	4620      	mov	r0, r4
  20162c:	2d00      	cmp	r5, #0
  20162e:	d0f6      	beq.n	20161e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  201630:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  201632:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201634:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201636:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  201638:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  20163a:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  20163c:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  20163e:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201640:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  201642:	d301      	bcc.n	201648 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  201644:	68e3      	ldr	r3, [r4, #12]
  201646:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  201648:	69e3      	ldr	r3, [r4, #28]
  20164a:	b10b      	cbz	r3, 201650 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  20164c:	4620      	mov	r0, r4
  20164e:	4798      	blx	r3
  201650:	2300      	movs	r3, #0
  201652:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  201656:	4628      	mov	r0, r5
}
  201658:	bd70      	pop	{r4, r5, r6, pc}
  20165a:	f385 8811 	msr	BASEPRI, r5
  20165e:	bd70      	pop	{r4, r5, r6, pc}

00201660 <_gett.lto_priv.24>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  201660:	300c      	adds	r0, #12
  201662:	f7ff bfd5 	b.w	201610 <iqGetTimeout>
  201666:	bf00      	nop
	...

00201670 <_get.lto_priv.22>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  201670:	300c      	adds	r0, #12
  201672:	f64f 71ff 	movw	r1, #65535	; 0xffff
  201676:	f7ff bfcb 	b.w	201610 <iqGetTimeout>
  20167a:	bf00      	nop
  20167c:	0000      	movs	r0, r0
	...

00201680 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  201680:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  201682:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  201684:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  201686:	4b08      	ldr	r3, [pc, #32]	; (2016a8 <chSchReadyI+0x28>)
  201688:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  20168a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  20168e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  201690:	689a      	ldr	r2, [r3, #8]
  201692:	428a      	cmp	r2, r1
  201694:	d2fb      	bcs.n	20168e <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  201696:	685a      	ldr	r2, [r3, #4]
}
  201698:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  20169a:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  20169c:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  20169e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  2016a0:	605c      	str	r4, [r3, #4]
}
  2016a2:	bc10      	pop	{r4}
  2016a4:	4770      	bx	lr
  2016a6:	bf00      	nop
  2016a8:	200008b4 	.word	0x200008b4
  2016ac:	00000000 	.word	0x00000000

002016b0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  2016b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  2016b2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  2016b4:	42a0      	cmp	r0, r4
  2016b6:	d022      	beq.n	2016fe <chEvtBroadcastFlagsI+0x4e>
  2016b8:	460d      	mov	r5, r1
  2016ba:	4607      	mov	r7, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  2016bc:	2600      	movs	r6, #0
  2016be:	e002      	b.n	2016c6 <chEvtBroadcastFlagsI+0x16>
    elp = elp->next;
  2016c0:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2016c2:	42a7      	cmp	r7, r4
  2016c4:	d01b      	beq.n	2016fe <chEvtBroadcastFlagsI+0x4e>
    elp->flags |= flags;
  2016c6:	68e3      	ldr	r3, [r4, #12]
  2016c8:	432b      	orrs	r3, r5
  2016ca:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  2016cc:	b115      	cbz	r5, 2016d4 <chEvtBroadcastFlagsI+0x24>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  2016ce:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  2016d0:	4213      	tst	r3, r2
  2016d2:	d0f5      	beq.n	2016c0 <chEvtBroadcastFlagsI+0x10>
      chEvtSignalI(elp->listener, elp->events);
  2016d4:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  2016d6:	68a3      	ldr	r3, [r4, #8]
  2016d8:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2016da:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  2016de:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  2016e0:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  2016e2:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2016e4:	d00c      	beq.n	201700 <chEvtBroadcastFlagsI+0x50>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  2016e6:	2a0b      	cmp	r2, #11
  2016e8:	d1ea      	bne.n	2016c0 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  2016ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  2016ec:	ea32 0303 	bics.w	r3, r2, r3
  2016f0:	d1e6      	bne.n	2016c0 <chEvtBroadcastFlagsI+0x10>
    tp->u.rdymsg = MSG_OK;
  2016f2:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  2016f4:	f7ff ffc4 	bl	201680 <chSchReadyI>
    elp = elp->next;
  2016f8:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2016fa:	42a7      	cmp	r7, r4
  2016fc:	d1e3      	bne.n	2016c6 <chEvtBroadcastFlagsI+0x16>
  2016fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  201700:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  201702:	4213      	tst	r3, r2
  201704:	d0dc      	beq.n	2016c0 <chEvtBroadcastFlagsI+0x10>
    tp->u.rdymsg = MSG_OK;
  201706:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  201708:	f7ff ffba 	bl	201680 <chSchReadyI>
  20170c:	e7f4      	b.n	2016f8 <chEvtBroadcastFlagsI+0x48>
  20170e:	bf00      	nop

00201710 <chThdExit>:
void chThdExit(msg_t msg) {
  201710:	b538      	push	{r3, r4, r5, lr}
  201712:	2220      	movs	r2, #32
  201714:	4603      	mov	r3, r0
  201716:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  20171a:	4a10      	ldr	r2, [pc, #64]	; (20175c <chThdExit+0x4c>)
  20171c:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  20171e:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  201722:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  201724:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  201726:	4285      	cmp	r5, r0
  201728:	d006      	beq.n	201738 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  20172a:	6803      	ldr	r3, [r0, #0]
  20172c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  20172e:	f7ff ffa7 	bl	201680 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  201732:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  201734:	42a8      	cmp	r0, r5
  201736:	d1f8      	bne.n	20172a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  201738:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  20173c:	b943      	cbnz	r3, 201750 <chThdExit+0x40>
  20173e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  201742:	079b      	lsls	r3, r3, #30
  201744:	d104      	bne.n	201750 <chThdExit+0x40>
    REG_REMOVE(tp);
  201746:	6922      	ldr	r2, [r4, #16]
  201748:	6963      	ldr	r3, [r4, #20]
  20174a:	611a      	str	r2, [r3, #16]
  20174c:	6922      	ldr	r2, [r4, #16]
  20174e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  201750:	200f      	movs	r0, #15
}
  201752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  201756:	f7ff bb9b 	b.w	200e90 <chSchGoSleepS>
  20175a:	bf00      	nop
  20175c:	200008b4 	.word	0x200008b4

00201760 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  201760:	e7fe      	b.n	201760 <BusFault_Handler>
  201762:	bf00      	nop
	...

00201770 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  201770:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  201772:	4f12      	ldr	r7, [pc, #72]	; (2017bc <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  201774:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  201776:	4d12      	ldr	r5, [pc, #72]	; (2017c0 <__init_ram_areas+0x50>)
  201778:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  20177c:	4c11      	ldr	r4, [pc, #68]	; (2017c4 <__init_ram_areas+0x54>)
  20177e:	4b12      	ldr	r3, [pc, #72]	; (2017c8 <__init_ram_areas+0x58>)
  201780:	4912      	ldr	r1, [pc, #72]	; (2017cc <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  201782:	429c      	cmp	r4, r3
  201784:	d911      	bls.n	2017aa <__init_ram_areas+0x3a>
  201786:	3904      	subs	r1, #4
  201788:	461a      	mov	r2, r3
      *p = *tp;
  20178a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  20178e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  201792:	4294      	cmp	r4, r2
  201794:	d8f9      	bhi.n	20178a <__init_ram_areas+0x1a>
  201796:	43da      	mvns	r2, r3
  201798:	4414      	add	r4, r2
  20179a:	f024 0403 	bic.w	r4, r4, #3
  20179e:	3404      	adds	r4, #4
  2017a0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  2017a2:	429d      	cmp	r5, r3
  2017a4:	d903      	bls.n	2017ae <__init_ram_areas+0x3e>
      *p = 0;
  2017a6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  2017aa:	429d      	cmp	r5, r3
  2017ac:	d8fb      	bhi.n	2017a6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  2017ae:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  2017b0:	4577      	cmp	r7, lr
  2017b2:	d202      	bcs.n	2017ba <__init_ram_areas+0x4a>
  2017b4:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  2017b8:	e7e3      	b.n	201782 <__init_ram_areas+0x12>
  2017ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2017bc:	08001cf0 	.word	0x08001cf0
  2017c0:	20020044 	.word	0x20020044
  2017c4:	20020044 	.word	0x20020044
  2017c8:	20020044 	.word	0x20020044
  2017cc:	08001dbc 	.word	0x08001dbc

002017d0 <__default_exit>:
void __default_exit(void) {
  2017d0:	e7fe      	b.n	2017d0 <__default_exit>
  2017d2:	bf00      	nop
	...

002017e0 <__late_init>:
void __late_init(void) {}
  2017e0:	4770      	bx	lr
  2017e2:	bf00      	nop
	...

002017f0 <__core_init>:
void __core_init(void) {
  2017f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  2017f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2017f6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  2017fa:	4c1b      	ldr	r4, [pc, #108]	; (201868 <__core_init+0x78>)
  2017fc:	2200      	movs	r2, #0
  2017fe:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  201802:	6963      	ldr	r3, [r4, #20]
  201804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  201808:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  20180a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  20180e:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  201812:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  201816:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  20181a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  20181e:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  201822:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  201826:	f3c3 334e 	ubfx	r3, r3, #13, #15
  20182a:	07b7      	lsls	r7, r6, #30
  20182c:	015d      	lsls	r5, r3, #5
  20182e:	ea05 000e 	and.w	r0, r5, lr
  201832:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  201834:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  201836:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  20183a:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  20183c:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  201840:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  201844:	1c53      	adds	r3, r2, #1
  201846:	d1f6      	bne.n	201836 <__core_init+0x46>
  201848:	3d20      	subs	r5, #32
    } while(sets--);
  20184a:	f115 0f20 	cmn.w	r5, #32
  20184e:	d1ee      	bne.n	20182e <__core_init+0x3e>
  201850:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  201854:	6963      	ldr	r3, [r4, #20]
  201856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20185a:	6163      	str	r3, [r4, #20]
  20185c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201860:	f3bf 8f6f 	isb	sy
  201864:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201866:	bf00      	nop
  201868:	e000ed00 	.word	0xe000ed00
  20186c:	00000000 	.word	0x00000000

00201870 <chTMStartMeasurementX.constprop.13>:
  201870:	4b01      	ldr	r3, [pc, #4]	; (201878 <chTMStartMeasurementX.constprop.13+0x8>)
  201872:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
  201874:	6083      	str	r3, [r0, #8]
  201876:	4770      	bx	lr
  201878:	e0001000 	.word	0xe0001000
  20187c:	00000000 	.word	0x00000000

00201880 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  201880:	b40e      	push	{r1, r2, r3}
  201882:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201886:	b086      	sub	sp, #24
  int n = 0;
  201888:	2300      	movs	r3, #0
    c = *fmt++;
  20188a:	f04f 0964 	mov.w	r9, #100	; 0x64
  20188e:	f8df a280 	ldr.w	sl, [pc, #640]	; 201b10 <chprintf.constprop.0+0x290>
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  201892:	ad10      	add	r5, sp, #64	; 0x40
    c = *fmt++;
  201894:	4c9d      	ldr	r4, [pc, #628]	; (201b0c <chprintf.constprop.0+0x28c>)
  int n = 0;
  201896:	9300      	str	r3, [sp, #0]
  va_start(ap, fmt);
  201898:	9502      	str	r5, [sp, #8]
  20189a:	f8cd 9004 	str.w	r9, [sp, #4]
      n++;
  20189e:	9a00      	ldr	r2, [sp, #0]
  2018a0:	4626      	mov	r6, r4
      streamPut(chp, (uint8_t)c);
  2018a2:	f8da 3000 	ldr.w	r3, [sl]
      n++;
  2018a6:	3201      	adds	r2, #1
      streamPut(chp, (uint8_t)c);
  2018a8:	9901      	ldr	r1, [sp, #4]
  2018aa:	689b      	ldr	r3, [r3, #8]
  2018ac:	4898      	ldr	r0, [pc, #608]	; (201b10 <chprintf.constprop.0+0x290>)
      n++;
  2018ae:	9200      	str	r2, [sp, #0]
      streamPut(chp, (uint8_t)c);
  2018b0:	4798      	blx	r3
  2018b2:	7823      	ldrb	r3, [r4, #0]
  2018b4:	9301      	str	r3, [sp, #4]
    if (c == 0)
  2018b6:	9b01      	ldr	r3, [sp, #4]
    c = *fmt++;
  2018b8:	1c74      	adds	r4, r6, #1
    if (c == 0)
  2018ba:	2b00      	cmp	r3, #0
  2018bc:	f000 8120 	beq.w	201b00 <chprintf.constprop.0+0x280>
    if (c != '%') {
  2018c0:	2b25      	cmp	r3, #37	; 0x25
  2018c2:	d1ec      	bne.n	20189e <chprintf.constprop.0+0x1e>
    if (*fmt == '-') {
  2018c4:	7871      	ldrb	r1, [r6, #1]
  2018c6:	292d      	cmp	r1, #45	; 0x2d
  2018c8:	f000 814b 	beq.w	201b62 <chprintf.constprop.0+0x2e2>
    left_align = FALSE;
  2018cc:	f04f 0c00 	mov.w	ip, #0
    if (*fmt == '0') {
  2018d0:	2930      	cmp	r1, #48	; 0x30
  2018d2:	f000 8141 	beq.w	201b58 <chprintf.constprop.0+0x2d8>
    filler = ' ';
  2018d6:	f04f 0820 	mov.w	r8, #32
  2018da:	1c62      	adds	r2, r4, #1
    width = 0;
  2018dc:	2400      	movs	r4, #0
  2018de:	e005      	b.n	2018ec <chprintf.constprop.0+0x6c>
        c = va_arg(ap, int);
  2018e0:	782b      	ldrb	r3, [r5, #0]
  2018e2:	3504      	adds	r5, #4
  2018e4:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
  2018e8:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
  2018ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
      c = *fmt++;
  2018f0:	4616      	mov	r6, r2
      width = width * 10 + c;
  2018f2:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
  2018f6:	b2db      	uxtb	r3, r3
  2018f8:	2b09      	cmp	r3, #9
  2018fa:	d9f3      	bls.n	2018e4 <chprintf.constprop.0+0x64>
      else if (c == '*')
  2018fc:	292a      	cmp	r1, #42	; 0x2a
  2018fe:	d0ef      	beq.n	2018e0 <chprintf.constprop.0+0x60>
    if (c == '.') {
  201900:	292e      	cmp	r1, #46	; 0x2e
  201902:	f04f 0200 	mov.w	r2, #0
  201906:	d04a      	beq.n	20199e <chprintf.constprop.0+0x11e>
    if (c == 'l' || c == 'L') {
  201908:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  20190c:	2b4c      	cmp	r3, #76	; 0x4c
  20190e:	d155      	bne.n	2019bc <chprintf.constprop.0+0x13c>
      if (*fmt)
  201910:	7833      	ldrb	r3, [r6, #0]
  201912:	9301      	str	r3, [sp, #4]
  201914:	b11b      	cbz	r3, 20191e <chprintf.constprop.0+0x9e>
        c = *fmt++;
  201916:	4619      	mov	r1, r3
  201918:	3601      	adds	r6, #1
  20191a:	7833      	ldrb	r3, [r6, #0]
  20191c:	9301      	str	r3, [sp, #4]
    switch (c) {
  20191e:	f1a1 0344 	sub.w	r3, r1, #68	; 0x44
  201922:	2b34      	cmp	r3, #52	; 0x34
  201924:	f200 810c 	bhi.w	201b40 <chprintf.constprop.0+0x2c0>
  201928:	e8df f013 	tbh	[pc, r3, lsl #1]
  20192c:	010a018f 	.word	0x010a018f
  201930:	010a010a 	.word	0x010a010a
  201934:	018f010a 	.word	0x018f010a
  201938:	010a010a 	.word	0x010a010a
  20193c:	010a010a 	.word	0x010a010a
  201940:	014d010a 	.word	0x014d010a
  201944:	010a010a 	.word	0x010a010a
  201948:	010a010a 	.word	0x010a010a
  20194c:	0152010a 	.word	0x0152010a
  201950:	010a010a 	.word	0x010a010a
  201954:	010a0187 	.word	0x010a0187
  201958:	010a010a 	.word	0x010a010a
  20195c:	010a010a 	.word	0x010a010a
  201960:	010a010a 	.word	0x010a010a
  201964:	010a010a 	.word	0x010a010a
  201968:	00f6010a 	.word	0x00f6010a
  20196c:	010a018f 	.word	0x010a018f
  201970:	010a010a 	.word	0x010a010a
  201974:	018f010a 	.word	0x018f010a
  201978:	010a010a 	.word	0x010a010a
  20197c:	010a010a 	.word	0x010a010a
  201980:	014d010a 	.word	0x014d010a
  201984:	010a010a 	.word	0x010a010a
  201988:	0089010a 	.word	0x0089010a
  20198c:	0152010a 	.word	0x0152010a
  201990:	010a010a 	.word	0x010a010a
  201994:	0187      	.short	0x0187
          c = va_arg(ap, int);
  201996:	782b      	ldrb	r3, [r5, #0]
  201998:	3504      	adds	r5, #4
        precision += c;
  20199a:	eb03 0240 	add.w	r2, r3, r0, lsl #1
        c = *fmt++;
  20199e:	f816 1b01 	ldrb.w	r1, [r6], #1
        precision *= 10;
  2019a2:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
  2019a6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
  2019aa:	b2db      	uxtb	r3, r3
  2019ac:	2b09      	cmp	r3, #9
  2019ae:	d9f4      	bls.n	20199a <chprintf.constprop.0+0x11a>
        else if (c == '*')
  2019b0:	292a      	cmp	r1, #42	; 0x2a
  2019b2:	d0f0      	beq.n	201996 <chprintf.constprop.0+0x116>
    if (c == 'l' || c == 'L') {
  2019b4:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  2019b8:	2b4c      	cmp	r3, #76	; 0x4c
  2019ba:	d0a9      	beq.n	201910 <chprintf.constprop.0+0x90>
      is_long = (c >= 'A') && (c <= 'Z');
  2019bc:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    switch (c) {
  2019c0:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
  2019c4:	b2db      	uxtb	r3, r3
    switch (c) {
  2019c6:	2834      	cmp	r0, #52	; 0x34
  2019c8:	f200 80b8 	bhi.w	201b3c <chprintf.constprop.0+0x2bc>
  2019cc:	e8df f010 	tbh	[pc, r0, lsl #1]
  2019d0:	00b6010a 	.word	0x00b6010a
  2019d4:	00b600b6 	.word	0x00b600b6
  2019d8:	010a00b6 	.word	0x010a00b6
  2019dc:	00b600b6 	.word	0x00b600b6
  2019e0:	00b600b6 	.word	0x00b600b6
  2019e4:	010300b6 	.word	0x010300b6
  2019e8:	00b600b6 	.word	0x00b600b6
  2019ec:	00b600b6 	.word	0x00b600b6
  2019f0:	00ce00b6 	.word	0x00ce00b6
  2019f4:	00b600b6 	.word	0x00b600b6
  2019f8:	00b60138 	.word	0x00b60138
  2019fc:	00b600b6 	.word	0x00b600b6
  201a00:	00b600b6 	.word	0x00b600b6
  201a04:	00b600b6 	.word	0x00b600b6
  201a08:	00b600b6 	.word	0x00b600b6
  201a0c:	00a200b6 	.word	0x00a200b6
  201a10:	00b6010a 	.word	0x00b6010a
  201a14:	00b600b6 	.word	0x00b600b6
  201a18:	010a00b6 	.word	0x010a00b6
  201a1c:	00b600b6 	.word	0x00b600b6
  201a20:	00b600b6 	.word	0x00b600b6
  201a24:	010300b6 	.word	0x010300b6
  201a28:	00b600b6 	.word	0x00b600b6
  201a2c:	003500b6 	.word	0x003500b6
  201a30:	00ce00b6 	.word	0x00ce00b6
  201a34:	00b600b6 	.word	0x00b600b6
  201a38:	0138      	.short	0x0138
  201a3a:	7833      	ldrb	r3, [r6, #0]
  201a3c:	9301      	str	r3, [sp, #4]
      if ((s = va_arg(ap, char *)) == 0)
  201a3e:	682f      	ldr	r7, [r5, #0]
  201a40:	3504      	adds	r5, #4
  201a42:	2f00      	cmp	r7, #0
  201a44:	f000 8111 	beq.w	201c6a <chprintf.constprop.0+0x3ea>
      for (p = s; *p && (--precision >= 0); p++)
  201a48:	783b      	ldrb	r3, [r7, #0]
      if (precision == 0)
  201a4a:	2a00      	cmp	r2, #0
  201a4c:	f040 810a 	bne.w	201c64 <chprintf.constprop.0+0x3e4>
      for (p = s; *p && (--precision >= 0); p++)
  201a50:	2b00      	cmp	r3, #0
  201a52:	f000 811c 	beq.w	201c8e <chprintf.constprop.0+0x40e>
  201a56:	f647 73fe 	movw	r3, #32766	; 0x7ffe
  201a5a:	463a      	mov	r2, r7
  201a5c:	e001      	b.n	201a62 <chprintf.constprop.0+0x1e2>
  201a5e:	3b01      	subs	r3, #1
  201a60:	d403      	bmi.n	201a6a <chprintf.constprop.0+0x1ea>
  201a62:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  201a66:	2900      	cmp	r1, #0
  201a68:	d1f9      	bne.n	201a5e <chprintf.constprop.0+0x1de>
  201a6a:	1bd2      	subs	r2, r2, r7
      filler = ' ';
  201a6c:	f04f 0820 	mov.w	r8, #32
    if ((width -= i) < 0)
  201a70:	1aa4      	subs	r4, r4, r2
  201a72:	f102 39ff 	add.w	r9, r2, #4294967295
  201a76:	d45b      	bmi.n	201b30 <chprintf.constprop.0+0x2b0>
    if (left_align == FALSE)
  201a78:	f1bc 0f00 	cmp.w	ip, #0
  201a7c:	d168      	bne.n	201b50 <chprintf.constprop.0+0x2d0>
  201a7e:	f1c4 0b00 	rsb	fp, r4, #0
    if (width < 0) {
  201a82:	2c00      	cmp	r4, #0
  201a84:	d063      	beq.n	201b4e <chprintf.constprop.0+0x2ce>
      if (*s == '-' && filler == '0') {
  201a86:	783b      	ldrb	r3, [r7, #0]
  201a88:	2b2d      	cmp	r3, #45	; 0x2d
  201a8a:	d103      	bne.n	201a94 <chprintf.constprop.0+0x214>
  201a8c:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
  201a90:	f000 80f0 	beq.w	201c74 <chprintf.constprop.0+0x3f4>
        streamPut(chp, (uint8_t)filler);
  201a94:	f8da 3000 	ldr.w	r3, [sl]
  201a98:	4641      	mov	r1, r8
  201a9a:	4650      	mov	r0, sl
  201a9c:	689b      	ldr	r3, [r3, #8]
  201a9e:	4798      	blx	r3
      } while (++width != 0);
  201aa0:	f11b 0b01 	adds.w	fp, fp, #1
  201aa4:	d1f6      	bne.n	201a94 <chprintf.constprop.0+0x214>
  201aa6:	9b00      	ldr	r3, [sp, #0]
    while (--i >= 0) {
  201aa8:	f1b9 0f00 	cmp.w	r9, #0
  201aac:	4423      	add	r3, r4
  201aae:	9300      	str	r3, [sp, #0]
  201ab0:	f6ff af01 	blt.w	2018b6 <chprintf.constprop.0+0x36>
  201ab4:	465c      	mov	r4, fp
  201ab6:	46cb      	mov	fp, r9
      streamPut(chp, (uint8_t)*s++);
  201ab8:	f8da 3000 	ldr.w	r3, [sl]
    while (--i >= 0) {
  201abc:	f10b 3bff 	add.w	fp, fp, #4294967295
      streamPut(chp, (uint8_t)*s++);
  201ac0:	f817 1b01 	ldrb.w	r1, [r7], #1
  201ac4:	4650      	mov	r0, sl
  201ac6:	689b      	ldr	r3, [r3, #8]
  201ac8:	4798      	blx	r3
    while (--i >= 0) {
  201aca:	f1bb 3fff 	cmp.w	fp, #4294967295
  201ace:	d1f3      	bne.n	201ab8 <chprintf.constprop.0+0x238>
  201ad0:	9b00      	ldr	r3, [sp, #0]
  201ad2:	3301      	adds	r3, #1
  201ad4:	444b      	add	r3, r9
  201ad6:	9300      	str	r3, [sp, #0]
    while (width) {
  201ad8:	2c00      	cmp	r4, #0
  201ada:	f43f aeec 	beq.w	2018b6 <chprintf.constprop.0+0x36>
  201ade:	4627      	mov	r7, r4
      streamPut(chp, (uint8_t)filler);
  201ae0:	f8da 3000 	ldr.w	r3, [sl]
  201ae4:	4641      	mov	r1, r8
  201ae6:	4650      	mov	r0, sl
  201ae8:	689b      	ldr	r3, [r3, #8]
  201aea:	4798      	blx	r3
    while (width) {
  201aec:	3f01      	subs	r7, #1
  201aee:	d1f7      	bne.n	201ae0 <chprintf.constprop.0+0x260>
  201af0:	9b00      	ldr	r3, [sp, #0]
  201af2:	4423      	add	r3, r4
    c = *fmt++;
  201af4:	1c74      	adds	r4, r6, #1
  201af6:	9300      	str	r3, [sp, #0]
    if (c == 0)
  201af8:	9b01      	ldr	r3, [sp, #4]
  201afa:	2b00      	cmp	r3, #0
  201afc:	f47f aee0 	bne.w	2018c0 <chprintf.constprop.0+0x40>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
  201b00:	9800      	ldr	r0, [sp, #0]
  201b02:	b006      	add	sp, #24
  201b04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201b08:	b003      	add	sp, #12
  201b0a:	4770      	bx	lr
  201b0c:	08001cc1 	.word	0x08001cc1
  201b10:	20000a68 	.word	0x20000a68
  201b14:	7833      	ldrb	r3, [r6, #0]
  201b16:	9301      	str	r3, [sp, #4]
      *p++ = va_arg(ap, int);
  201b18:	682b      	ldr	r3, [r5, #0]
  201b1a:	af06      	add	r7, sp, #24
  201b1c:	3504      	adds	r5, #4
  201b1e:	f04f 0900 	mov.w	r9, #0
  201b22:	2201      	movs	r2, #1
      filler = ' ';
  201b24:	f04f 0820 	mov.w	r8, #32
      *p++ = va_arg(ap, int);
  201b28:	f807 3d0c 	strb.w	r3, [r7, #-12]!
    if ((width -= i) < 0)
  201b2c:	1aa4      	subs	r4, r4, r2
  201b2e:	d5a3      	bpl.n	201a78 <chprintf.constprop.0+0x1f8>
    while (--i >= 0) {
  201b30:	f1b9 0f00 	cmp.w	r9, #0
  201b34:	f6ff aebf 	blt.w	2018b6 <chprintf.constprop.0+0x36>
      width = 0;
  201b38:	2400      	movs	r4, #0
  201b3a:	e7bc      	b.n	201ab6 <chprintf.constprop.0+0x236>
  201b3c:	7833      	ldrb	r3, [r6, #0]
  201b3e:	9301      	str	r3, [sp, #4]
      *p++ = c;
  201b40:	af06      	add	r7, sp, #24
  201b42:	f04f 0900 	mov.w	r9, #0
  201b46:	2201      	movs	r2, #1
  201b48:	f807 1d0c 	strb.w	r1, [r7, #-12]!
  201b4c:	e7ee      	b.n	201b2c <chprintf.constprop.0+0x2ac>
    if (width < 0) {
  201b4e:	465c      	mov	r4, fp
    while (--i >= 0) {
  201b50:	f1b9 0f00 	cmp.w	r9, #0
  201b54:	daaf      	bge.n	201ab6 <chprintf.constprop.0+0x236>
  201b56:	e7bf      	b.n	201ad8 <chprintf.constprop.0+0x258>
  201b58:	7861      	ldrb	r1, [r4, #1]
      filler = '0';
  201b5a:	f04f 0830 	mov.w	r8, #48	; 0x30
      fmt++;
  201b5e:	3401      	adds	r4, #1
  201b60:	e6bb      	b.n	2018da <chprintf.constprop.0+0x5a>
      fmt++;
  201b62:	1cb4      	adds	r4, r6, #2
  201b64:	78b1      	ldrb	r1, [r6, #2]
      left_align = TRUE;
  201b66:	f04f 0c01 	mov.w	ip, #1
  201b6a:	e6b1      	b.n	2018d0 <chprintf.constprop.0+0x50>
    switch (c) {
  201b6c:	f04f 0e0a 	mov.w	lr, #10
      if (is_long)
  201b70:	2b19      	cmp	r3, #25
  201b72:	d934      	bls.n	201bde <chprintf.constprop.0+0x35e>
        l = va_arg(ap, unsigned int);
  201b74:	682f      	ldr	r7, [r5, #0]
  201b76:	3504      	adds	r5, #4
  201b78:	7833      	ldrb	r3, [r6, #0]
  201b7a:	9301      	str	r3, [sp, #4]
  q = p + MAX_FILLER;
  201b7c:	f10d 0117 	add.w	r1, sp, #23
  201b80:	e000      	b.n	201b84 <chprintf.constprop.0+0x304>
  } while ((ll /= radix) != 0);
  201b82:	4601      	mov	r1, r0
    *--q = i;
  201b84:	1e48      	subs	r0, r1, #1
    i = (int)(l % radix);
  201b86:	fbb7 f2fe 	udiv	r2, r7, lr
  201b8a:	fb0e 7912 	mls	r9, lr, r2, r7
    l /= radix;
  201b8e:	4617      	mov	r7, r2
    i += '0';
  201b90:	f109 0330 	add.w	r3, r9, #48	; 0x30
    if (i > '9')
  201b94:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
  201b96:	bfc8      	it	gt
  201b98:	f109 0337 	addgt.w	r3, r9, #55	; 0x37
    *--q = i;
  201b9c:	b2db      	uxtb	r3, r3
  201b9e:	f801 3c01 	strb.w	r3, [r1, #-1]
  } while ((ll /= radix) != 0);
  201ba2:	2a00      	cmp	r2, #0
  201ba4:	d1ed      	bne.n	201b82 <chprintf.constprop.0+0x302>
  i = (int)(p + MAX_FILLER - q);
  201ba6:	f10d 0217 	add.w	r2, sp, #23
  201baa:	af03      	add	r7, sp, #12
  201bac:	1a12      	subs	r2, r2, r0
  201bae:	46be      	mov	lr, r7
  201bb0:	4410      	add	r0, r2
  201bb2:	e001      	b.n	201bb8 <chprintf.constprop.0+0x338>
  201bb4:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (--i);
  201bb8:	4288      	cmp	r0, r1
    *p++ = *q++;
  201bba:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
  201bbe:	d1f9      	bne.n	201bb4 <chprintf.constprop.0+0x334>
  201bc0:	f102 39ff 	add.w	r9, r2, #4294967295
  201bc4:	e7b2      	b.n	201b2c <chprintf.constprop.0+0x2ac>
    switch (c) {
  201bc6:	f04f 0e08 	mov.w	lr, #8
        l = va_arg(ap, unsigned long);
  201bca:	682f      	ldr	r7, [r5, #0]
  201bcc:	3504      	adds	r5, #4
  201bce:	e7d5      	b.n	201b7c <chprintf.constprop.0+0x2fc>
    switch (c) {
  201bd0:	f04f 0e0a 	mov.w	lr, #10
  201bd4:	e7f9      	b.n	201bca <chprintf.constprop.0+0x34a>
      if (is_long)
  201bd6:	2b19      	cmp	r3, #25
    switch (c) {
  201bd8:	f04f 0e08 	mov.w	lr, #8
      if (is_long)
  201bdc:	d8ca      	bhi.n	201b74 <chprintf.constprop.0+0x2f4>
  201bde:	7833      	ldrb	r3, [r6, #0]
  201be0:	9301      	str	r3, [sp, #4]
  201be2:	e7f2      	b.n	201bca <chprintf.constprop.0+0x34a>
      if (is_long)
  201be4:	2b19      	cmp	r3, #25
  201be6:	d92e      	bls.n	201c46 <chprintf.constprop.0+0x3c6>
        l = va_arg(ap, int);
  201be8:	6829      	ldr	r1, [r5, #0]
  201bea:	3504      	adds	r5, #4
  201bec:	7833      	ldrb	r3, [r6, #0]
      if (l < 0) {
  201bee:	2900      	cmp	r1, #0
  201bf0:	9301      	str	r3, [sp, #4]
  201bf2:	db2e      	blt.n	201c52 <chprintf.constprop.0+0x3d2>
    p = tmpbuf;
  201bf4:	af03      	add	r7, sp, #12
  201bf6:	463a      	mov	r2, r7
  q = p + MAX_FILLER;
  201bf8:	f102 0b0b 	add.w	fp, r2, #11
  201bfc:	4658      	mov	r0, fp
    i = (int)(l % radix);
  201bfe:	4b26      	ldr	r3, [pc, #152]	; (201c98 <chprintf.constprop.0+0x418>)
  201c00:	fba3 e301 	umull	lr, r3, r3, r1
  201c04:	08db      	lsrs	r3, r3, #3
  201c06:	eb03 0983 	add.w	r9, r3, r3, lsl #2
  201c0a:	469e      	mov	lr, r3
  201c0c:	eba1 0349 	sub.w	r3, r1, r9, lsl #1
  } while ((ll /= radix) != 0);
  201c10:	4671      	mov	r1, lr
    i += '0';
  201c12:	3330      	adds	r3, #48	; 0x30
    *--q = i;
  201c14:	b2db      	uxtb	r3, r3
  201c16:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
  201c1a:	2900      	cmp	r1, #0
  201c1c:	d1ef      	bne.n	201bfe <chprintf.constprop.0+0x37e>
  i = (int)(p + MAX_FILLER - q);
  201c1e:	ebab 0100 	sub.w	r1, fp, r0
  201c22:	4411      	add	r1, r2
  201c24:	e001      	b.n	201c2a <chprintf.constprop.0+0x3aa>
  201c26:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
  201c2a:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
  201c2e:	428a      	cmp	r2, r1
  201c30:	d1f9      	bne.n	201c26 <chprintf.constprop.0+0x3a6>
  201c32:	1bd2      	subs	r2, r2, r7
  201c34:	f102 39ff 	add.w	r9, r2, #4294967295
  201c38:	e778      	b.n	201b2c <chprintf.constprop.0+0x2ac>
    switch (c) {
  201c3a:	f04f 0e10 	mov.w	lr, #16
  201c3e:	e7c4      	b.n	201bca <chprintf.constprop.0+0x34a>
  201c40:	f04f 0e10 	mov.w	lr, #16
  201c44:	e794      	b.n	201b70 <chprintf.constprop.0+0x2f0>
  201c46:	7833      	ldrb	r3, [r6, #0]
  201c48:	9301      	str	r3, [sp, #4]
        l = va_arg(ap, long);
  201c4a:	6829      	ldr	r1, [r5, #0]
  201c4c:	3504      	adds	r5, #4
      if (l < 0) {
  201c4e:	2900      	cmp	r1, #0
  201c50:	dad0      	bge.n	201bf4 <chprintf.constprop.0+0x374>
        *p++ = '-';
  201c52:	f04f 032d 	mov.w	r3, #45	; 0x2d
        l = -l;
  201c56:	4249      	negs	r1, r1
        *p++ = '-';
  201c58:	f10d 020d 	add.w	r2, sp, #13
  201c5c:	af03      	add	r7, sp, #12
  201c5e:	f88d 300c 	strb.w	r3, [sp, #12]
  201c62:	e7c9      	b.n	201bf8 <chprintf.constprop.0+0x378>
      for (p = s; *p && (--precision >= 0); p++)
  201c64:	b19b      	cbz	r3, 201c8e <chprintf.constprop.0+0x40e>
  201c66:	1e53      	subs	r3, r2, #1
  201c68:	e6f7      	b.n	201a5a <chprintf.constprop.0+0x1da>
      if (precision == 0)
  201c6a:	b90a      	cbnz	r2, 201c70 <chprintf.constprop.0+0x3f0>
        precision = 32767;
  201c6c:	f647 72ff 	movw	r2, #32767	; 0x7fff
        s = "(null)";
  201c70:	4f0a      	ldr	r7, [pc, #40]	; (201c9c <chprintf.constprop.0+0x41c>)
  201c72:	e7f8      	b.n	201c66 <chprintf.constprop.0+0x3e6>
        n++;
  201c74:	9a00      	ldr	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  201c76:	212d      	movs	r1, #45	; 0x2d
  201c78:	f8da 3000 	ldr.w	r3, [sl]
  201c7c:	4650      	mov	r0, sl
        n++;
  201c7e:	3201      	adds	r2, #1
        streamPut(chp, (uint8_t)*s++);
  201c80:	3701      	adds	r7, #1
  201c82:	689b      	ldr	r3, [r3, #8]
  201c84:	f109 39ff 	add.w	r9, r9, #4294967295
        n++;
  201c88:	9200      	str	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  201c8a:	4798      	blx	r3
  201c8c:	e702      	b.n	201a94 <chprintf.constprop.0+0x214>
      for (p = s; *p && (--precision >= 0); p++)
  201c8e:	f04f 39ff 	mov.w	r9, #4294967295
  201c92:	f04f 0820 	mov.w	r8, #32
  201c96:	e6ef      	b.n	201a78 <chprintf.constprop.0+0x1f8>
  201c98:	cccccccd 	.word	0xcccccccd
  201c9c:	08001d70 	.word	0x08001d70
