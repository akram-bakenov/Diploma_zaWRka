
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f000 fdff 	bl	200e20 <__core_init>
  200222:	f000 fced 	bl	200c00 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f000 fd99 	bl	200da0 <__init_ram_areas>
  20026e:	f000 fdcf 	bl	200e10 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f000 f9f5 	bl	200670 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f000 bdb3 	b.w	200e00 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	08000f44 	.word	0x08000f44
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020010 	.word	0x20020010
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000ad0 	.word	0x20000ad0
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f000 fcfe 	bl	200cf0 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f000 fd34 	bl	200d60 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>
  2002fc:	0000      	movs	r0, r0
	...

00200300 <chTMStartMeasurementX.constprop.12>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  200300:	4b01      	ldr	r3, [pc, #4]	; (200308 <chTMStartMeasurementX.constprop.12+0x8>)
  200302:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
  200304:	6083      	str	r3, [r0, #8]
  200306:	4770      	bx	lr
  200308:	e0001000 	.word	0xe0001000
  20030c:	00000000 	.word	0x00000000

00200310 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  200310:	b470      	push	{r4, r5, r6}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200312:	2320      	movs	r3, #32
  200314:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200318:	4e0d      	ldr	r6, [pc, #52]	; (200350 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  20031a:	1e4a      	subs	r2, r1, #1
  20031c:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  20031e:	4c0d      	ldr	r4, [pc, #52]	; (200354 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200320:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  200322:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  200324:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200326:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  200328:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  20032a:	1858      	adds	r0, r3, r1
  20032c:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  20032e:	1a23      	subs	r3, r4, r0
  200330:	429a      	cmp	r2, r3
  200332:	d806      	bhi.n	200342 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  200334:	4402      	add	r2, r0
  200336:	2300      	movs	r3, #0
  200338:	6032      	str	r2, [r6, #0]
  20033a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  20033e:	bc70      	pop	{r4, r5, r6}
  200340:	4770      	bx	lr
    return NULL;
  200342:	2000      	movs	r0, #0
  200344:	2300      	movs	r3, #0
  200346:	f383 8811 	msr	BASEPRI, r3
}
  20034a:	bc70      	pop	{r4, r5, r6}
  20034c:	4770      	bx	lr
  20034e:	bf00      	nop
  200350:	20000984 	.word	0x20000984
  200354:	20000980 	.word	0x20000980
	...

00200360 <_port_irq_epilogue>:
  200360:	2320      	movs	r3, #32
  200362:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  200366:	4b11      	ldr	r3, [pc, #68]	; (2003ac <_port_irq_epilogue+0x4c>)
  200368:	685b      	ldr	r3, [r3, #4]
  20036a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  20036e:	d102      	bne.n	200376 <_port_irq_epilogue+0x16>
  200370:	f383 8811 	msr	BASEPRI, r3
  200374:	4770      	bx	lr
void _port_irq_epilogue(void) {
  200376:	b480      	push	{r7}
  200378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  20037a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  20037e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  200382:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  200386:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20038a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  20038e:	4a08      	ldr	r2, [pc, #32]	; (2003b0 <_port_irq_epilogue+0x50>)
  200390:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  200392:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  200394:	6889      	ldr	r1, [r1, #8]
  200396:	6892      	ldr	r2, [r2, #8]
  200398:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  20039a:	bf8c      	ite	hi
  20039c:	4a05      	ldrhi	r2, [pc, #20]	; (2003b4 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  20039e:	4a06      	ldrls	r2, [pc, #24]	; (2003b8 <_port_irq_epilogue+0x58>)
  2003a0:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  2003a4:	46bd      	mov	sp, r7
  2003a6:	bc80      	pop	{r7}
  2003a8:	4770      	bx	lr
  2003aa:	bf00      	nop
  2003ac:	e000ed00 	.word	0xe000ed00
  2003b0:	20000810 	.word	0x20000810
  2003b4:	002002f5 	.word	0x002002f5
  2003b8:	002002f8 	.word	0x002002f8
  2003bc:	00000000 	.word	0x00000000

002003c0 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
  2003c0:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  2003c2:	4b0b      	ldr	r3, [pc, #44]	; (2003f0 <VectorB4+0x30>)
  2003c4:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  2003c6:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  2003c8:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  2003ca:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  2003cc:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  2003ce:	d107      	bne.n	2003e0 <VectorB4+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  2003d0:	2002      	movs	r0, #2
  2003d2:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  2003d4:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  2003d6:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  2003d8:	68d1      	ldr	r1, [r2, #12]
  2003da:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  2003de:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  2003e0:	685b      	ldr	r3, [r3, #4]
  2003e2:	4803      	ldr	r0, [pc, #12]	; (2003f0 <VectorB4+0x30>)
  2003e4:	685b      	ldr	r3, [r3, #4]
  2003e6:	4798      	blx	r3
}
  2003e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2003ec:	f7ff bfb8 	b.w	200360 <_port_irq_epilogue>
  2003f0:	20000800 	.word	0x20000800
	...

00200400 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
  200400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200402:	2720      	movs	r7, #32
  200404:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  200408:	4d12      	ldr	r5, [pc, #72]	; (200454 <SysTick_Handler+0x54>)
  20040a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20040c:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  20040e:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200410:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  200414:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  200416:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  200418:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20041a:	d013      	beq.n	200444 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  20041c:	891c      	ldrh	r4, [r3, #8]
  20041e:	3c01      	subs	r4, #1
  200420:	b2a4      	uxth	r4, r4
  200422:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  200424:	b974      	cbnz	r4, 200444 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  200426:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  200428:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  20042a:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  20042c:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  20042e:	61ea      	str	r2, [r5, #28]
  200430:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  200434:	6918      	ldr	r0, [r3, #16]
  200436:	4788      	blx	r1
  200438:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  20043c:	69eb      	ldr	r3, [r5, #28]
  20043e:	891a      	ldrh	r2, [r3, #8]
  200440:	2a00      	cmp	r2, #0
  200442:	d0f0      	beq.n	200426 <SysTick_Handler+0x26>
  200444:	2300      	movs	r3, #0
  200446:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
  20044a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  20044e:	f7ff bf87 	b.w	200360 <_port_irq_epilogue>
  200452:	bf00      	nop
  200454:	20000810 	.word	0x20000810
	...

00200460 <SVC_Handler>:
void SVC_Handler(void) {
  200460:	b480      	push	{r7}
  200462:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  200464:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
  200468:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20046a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  20046e:	2300      	movs	r3, #0
  200470:	f383 8811 	msr	BASEPRI, r3
}
  200474:	46bd      	mov	sp, r7
  200476:	bc80      	pop	{r7}
  200478:	4770      	bx	lr
  20047a:	bf00      	nop
  20047c:	0000      	movs	r0, r0
	...

00200480 <chTMStopMeasurementX>:
  200480:	4b0e      	ldr	r3, [pc, #56]	; (2004bc <chTMStopMeasurementX+0x3c>)
  tmp->last = (now - tmp->last) - offset;
  200482:	6882      	ldr	r2, [r0, #8]
  200484:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  200486:	490e      	ldr	r1, [pc, #56]	; (2004c0 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  200488:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  20048a:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  20048c:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  20048e:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  200490:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  200492:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  200494:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  200496:	6083      	str	r3, [r0, #8]
  tmp->n++;
  200498:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  20049a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  20049e:	18e4      	adds	r4, r4, r3
  2004a0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  2004a4:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  2004a6:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  2004a8:	bf88      	it	hi
  2004aa:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  2004ac:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  2004ae:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  2004b2:	bf38      	it	cc
  2004b4:	6003      	strcc	r3, [r0, #0]
}
  2004b6:	bc30      	pop	{r4, r5}
  2004b8:	4770      	bx	lr
  2004ba:	bf00      	nop
  2004bc:	e0001000 	.word	0xe0001000
  2004c0:	20000810 	.word	0x20000810
	...

002004d0 <wakeup>:
  2004d0:	2320      	movs	r3, #32
  2004d2:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  2004d6:	f890 3020 	ldrb.w	r3, [r0, #32]
  2004da:	2b07      	cmp	r3, #7
  2004dc:	d80e      	bhi.n	2004fc <wakeup+0x2c>
  2004de:	e8df f003 	tbb	[pc, r3]
  2004e2:	0d28      	.short	0x0d28
  2004e4:	0408240d 	.word	0x0408240d
  2004e8:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
  2004ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  2004ec:	6893      	ldr	r3, [r2, #8]
  2004ee:	3301      	adds	r3, #1
  2004f0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  2004f2:	e890 000c 	ldmia.w	r0, {r2, r3}
  2004f6:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  2004f8:	6802      	ldr	r2, [r0, #0]
  2004fa:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  2004fc:	2200      	movs	r2, #0
  2004fe:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  200500:	4b0e      	ldr	r3, [pc, #56]	; (20053c <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  200502:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  200506:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  200508:	f04f 34ff 	mov.w	r4, #4294967295
  20050c:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  20050e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  200510:	689a      	ldr	r2, [r3, #8]
  200512:	428a      	cmp	r2, r1
  200514:	d2fb      	bcs.n	20050e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  200516:	685a      	ldr	r2, [r3, #4]
  200518:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  20051a:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  20051c:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  20051e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  200520:	6058      	str	r0, [r3, #4]
  200522:	f381 8811 	msr	BASEPRI, r1
}
  200526:	bc10      	pop	{r4}
  200528:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  20052a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  20052c:	2200      	movs	r2, #0
  20052e:	601a      	str	r2, [r3, #0]
  200530:	e7e4      	b.n	2004fc <wakeup+0x2c>
  200532:	2300      	movs	r3, #0
  200534:	f383 8811 	msr	BASEPRI, r3
  200538:	4770      	bx	lr
  20053a:	bf00      	nop
  20053c:	20000810 	.word	0x20000810

00200540 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
  200540:	e7fe      	b.n	200540 <_idle_thread>
  200542:	bf00      	nop
	...

00200550 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  200550:	e7fe      	b.n	200550 <BusFault_Handler>
  200552:	bf00      	nop
	...

00200560 <chSchWakeupS.constprop.17>:
  thread_t *otp = currp;
  200560:	4b15      	ldr	r3, [pc, #84]	; (2005b8 <chSchWakeupS.constprop.17+0x58>)
  if (ntp->prio <= otp->prio) {
  200562:	6881      	ldr	r1, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  200564:	b4f0      	push	{r4, r5, r6, r7}
  ntp->u.rdymsg = msg;
  200566:	2600      	movs	r6, #0
  thread_t *otp = currp;
  200568:	699d      	ldr	r5, [r3, #24]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  20056a:	4604      	mov	r4, r0
  ntp->u.rdymsg = msg;
  20056c:	6246      	str	r6, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
  20056e:	68a8      	ldr	r0, [r5, #8]
  200570:	4281      	cmp	r1, r0
  200572:	d80c      	bhi.n	20058e <chSchWakeupS.constprop.17+0x2e>
  tp->state = CH_STATE_READY;
  200574:	f884 6020 	strb.w	r6, [r4, #32]
    cp = cp->queue.next;
  200578:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  20057a:	689a      	ldr	r2, [r3, #8]
  20057c:	4291      	cmp	r1, r2
  20057e:	d9fb      	bls.n	200578 <chSchWakeupS.constprop.17+0x18>
  tp->queue.prev             = cp->queue.prev;
  200580:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
  200582:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  200584:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  200586:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  200588:	605c      	str	r4, [r3, #4]
}
  20058a:	bcf0      	pop	{r4, r5, r6, r7}
  20058c:	4770      	bx	lr
  cp = (thread_t *)&ch.rlist.queue;
  20058e:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
  200590:	f885 6020 	strb.w	r6, [r5, #32]
    cp = cp->queue.next;
  200594:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
  200596:	6891      	ldr	r1, [r2, #8]
  200598:	4288      	cmp	r0, r1
  20059a:	d9fb      	bls.n	200594 <chSchWakeupS.constprop.17+0x34>
  tp->queue.prev             = cp->queue.prev;
  20059c:	6856      	ldr	r6, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
  20059e:	2701      	movs	r7, #1
  tp->queue.next             = cp;
  2005a0:	602a      	str	r2, [r5, #0]
    chSysSwitch(ntp, otp);
  2005a2:	4629      	mov	r1, r5
  tp->queue.prev             = cp->queue.prev;
  2005a4:	606e      	str	r6, [r5, #4]
    chSysSwitch(ntp, otp);
  2005a6:	4620      	mov	r0, r4
  tp->queue.prev->queue.next = tp;
  2005a8:	6035      	str	r5, [r6, #0]
  cp->queue.prev             = tp;
  2005aa:	6055      	str	r5, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
  2005ac:	f884 7020 	strb.w	r7, [r4, #32]
    currp = ntp;
  2005b0:	619c      	str	r4, [r3, #24]
}
  2005b2:	bcf0      	pop	{r4, r5, r6, r7}
    chSysSwitch(ntp, otp);
  2005b4:	f7ff be8e 	b.w	2002d4 <_port_switch>
  2005b8:	20000810 	.word	0x20000810
  2005bc:	00000000 	.word	0x00000000

002005c0 <chSchGoSleepS>:
  thread_t *otp = currp;
  2005c0:	4b08      	ldr	r3, [pc, #32]	; (2005e4 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  2005c2:	681a      	ldr	r2, [r3, #0]
  2005c4:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  2005c6:	b430      	push	{r4, r5}
  otp->state = newstate;
  2005c8:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  2005cc:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  2005ce:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  2005d0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  2005d2:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  2005d4:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  2005d6:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  2005da:	619a      	str	r2, [r3, #24]
}
  2005dc:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  2005de:	f7ff be79 	b.w	2002d4 <_port_switch>
  2005e2:	bf00      	nop
  2005e4:	20000810 	.word	0x20000810
	...

002005f0 <Thread>:
#include <hal.h>

static THD_WORKING_AREA(waThread, 128);

static THD_FUNCTION(Thread, arg) 
{
  2005f0:	b580      	push	{r7, lr}
  2005f2:	b086      	sub	sp, #24
  2005f4:	4f1c      	ldr	r7, [pc, #112]	; (200668 <Thread+0x78>)
  2005f6:	4e1d      	ldr	r6, [pc, #116]	; (20066c <Thread+0x7c>)
  2005f8:	2520      	movs	r5, #32
  2005fa:	f10d 0804 	add.w	r8, sp, #4
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  2005fe:	f64f 74ff 	movw	r4, #65535	; 0xffff
  200602:	f385 8811 	msr	BASEPRI, r5
  p = ch.vtlist.next;
  200606:	69fa      	ldr	r2, [r7, #28]
  vtp->par = par;
  200608:	69bb      	ldr	r3, [r7, #24]
  while (p->delta < delta) {
  20060a:	8911      	ldrh	r1, [r2, #8]
  vtp->par = par;
  20060c:	9305      	str	r3, [sp, #20]
  while (p->delta < delta) {
  20060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  200612:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
  vtp->func = vtfunc;
  200616:	9604      	str	r6, [sp, #16]
  while (p->delta < delta) {
  200618:	d205      	bcs.n	200626 <Thread+0x36>
    delta -= p->delta;
  20061a:	1a5b      	subs	r3, r3, r1
    p = p->next;
  20061c:	6812      	ldr	r2, [r2, #0]
    delta -= p->delta;
  20061e:	b29b      	uxth	r3, r3
  while (p->delta < delta) {
  200620:	8911      	ldrh	r1, [r2, #8]
  200622:	4299      	cmp	r1, r3
  200624:	d3f9      	bcc.n	20061a <Thread+0x2a>
  vtp->prev = vtp->next->prev;
  200626:	6851      	ldr	r1, [r2, #4]
    chSchGoSleepS(newstate);
  200628:	2008      	movs	r0, #8
  vtp->next = p;
  20062a:	9201      	str	r2, [sp, #4]
  vtp->prev = vtp->next->prev;
  20062c:	9102      	str	r1, [sp, #8]
  vtp->prev->next = vtp;
  20062e:	f8c1 8000 	str.w	r8, [r1]
  p->prev = vtp;
  200632:	f8c2 8004 	str.w	r8, [r2, #4]
  vtp->delta = delta
  200636:	f8ad 300c 	strh.w	r3, [sp, #12]
  p->delta -= delta;
  20063a:	8911      	ldrh	r1, [r2, #8]
  20063c:	1acb      	subs	r3, r1, r3
  20063e:	8113      	strh	r3, [r2, #8]
  ch.vtlist.delta = (systime_t)-1;
  200640:	84bc      	strh	r4, [r7, #36]	; 0x24
  200642:	f7ff ffbd 	bl	2005c0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  200646:	9b04      	ldr	r3, [sp, #16]
  200648:	b153      	cbz	r3, 200660 <Thread+0x70>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
  20064a:	9b01      	ldr	r3, [sp, #4]
  20064c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  200650:	891a      	ldrh	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
  200652:	9902      	ldr	r1, [sp, #8]
  vtp->next->delta += vtp->delta;
  200654:	4402      	add	r2, r0
  200656:	811a      	strh	r2, [r3, #8]
  vtp->prev->next = vtp->next;
  200658:	600b      	str	r3, [r1, #0]
  vtp->next->prev = vtp->prev;
  20065a:	9b01      	ldr	r3, [sp, #4]
  20065c:	6059      	str	r1, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
  20065e:	84bc      	strh	r4, [r7, #36]	; 0x24
  200660:	2300      	movs	r3, #0
  200662:	f383 8811 	msr	BASEPRI, r3
  200666:	e7cc      	b.n	200602 <Thread+0x12>
  200668:	20000810 	.word	0x20000810
  20066c:	002004d1 	.word	0x002004d1

00200670 <main>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  200670:	4bbe      	ldr	r3, [pc, #760]	; (20096c <main+0x2fc>)
  200672:	f04f 31ff 	mov.w	r1, #4294967295
  200676:	2200      	movs	r2, #0
  PWR->CR1 |= PWR_CR1_DBP;
  200678:	4cbd      	ldr	r4, [pc, #756]	; (200970 <main+0x300>)
  rccResetAHB1(~0);
  20067a:	6918      	ldr	r0, [r3, #16]

/*
 * Application entry point.
 */
int main(void)
{
  20067c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  200680:	6119      	str	r1, [r3, #16]
  200682:	b089      	sub	sp, #36	; 0x24
  200684:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
  200686:	6958      	ldr	r0, [r3, #20]
  200688:	6159      	str	r1, [r3, #20]
  20068a:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  20068c:	6a18      	ldr	r0, [r3, #32]
  20068e:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  200692:	6218      	str	r0, [r3, #32]
  200694:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
  200696:	6a58      	ldr	r0, [r3, #36]	; 0x24
  200698:	6259      	str	r1, [r3, #36]	; 0x24
  20069a:	625a      	str	r2, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  20069c:	6821      	ldr	r1, [r4, #0]
  20069e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  2006a2:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  2006a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  2006a6:	f401 7140 	and.w	r1, r1, #768	; 0x300
  2006aa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  2006ae:	d003      	beq.n	2006b8 <main+0x48>
    RCC->BDCR = RCC_BDCR_BDRST;
  2006b0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  2006b4:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  2006b6:	671a      	str	r2, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  2006b8:	4bac      	ldr	r3, [pc, #688]	; (20096c <main+0x2fc>)
  2006ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  2006bc:	461f      	mov	r7, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  2006be:	f042 0219 	orr.w	r2, r2, #25
  2006c2:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  2006c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  2006c6:	079a      	lsls	r2, r3, #30
  2006c8:	d5fc      	bpl.n	2006c4 <main+0x54>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  2006ca:	48a9      	ldr	r0, [pc, #676]	; (200970 <main+0x300>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  2006cc:	f240 7cff 	movw	ip, #2047	; 0x7ff
  gpiop->OTYPER  = config->otyper;
  2006d0:	2400      	movs	r4, #0
  2006d2:	4aa8      	ldr	r2, [pc, #672]	; (200974 <main+0x304>)
  2006d4:	6841      	ldr	r1, [r0, #4]
  gpiop->ODR     = config->odr;
  2006d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
  2006da:	f04f 3eff 	mov.w	lr, #4294967295
  gpiop->PUPDR   = config->pupdr;
  2006de:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 2009c4 <main+0x354>
  2006e2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  gpiop->AFRL    = config->afrl;
  2006e6:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 2009c8 <main+0x358>
  gpiop->OSPEEDR = config->ospeedr;
  2006ea:	f06f 4a70 	mvn.w	sl, #4026531840	; 0xf0000000
  2006ee:	f46f 1940 	mvn.w	r9, #3145728	; 0x300000
  2006f2:	6041      	str	r1, [r0, #4]
  gpiop->ODR     = config->odr;
  2006f4:	f64b 717e 	movw	r1, #49022	; 0xbf7e
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  2006f8:	6b3e      	ldr	r6, [r7, #48]	; 0x30
  gpiop->AFRH    = config->afrh;
  2006fa:	f44f 0030 	mov.w	r0, #11534336	; 0xb00000
  tqp->next = (thread_t *)tqp;
  2006fe:	4d9e      	ldr	r5, [pc, #632]	; (200978 <main+0x308>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  200700:	ea46 060c 	orr.w	r6, r6, ip
  200704:	633e      	str	r6, [r7, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  200706:	6d3e      	ldr	r6, [r7, #80]	; 0x50
  200708:	ea46 0c0c 	orr.w	ip, r6, ip
  gpiop->AFRH    = config->afrh;
  20070c:	4e9b      	ldr	r6, [pc, #620]	; (20097c <main+0x30c>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  20070e:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
  gpiop->MODER   = config->moder;
  200712:	f640 2c08 	movw	ip, #2568	; 0xa08
  gpiop->OTYPER  = config->otyper;
  200716:	6054      	str	r4, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200718:	f8c2 e008 	str.w	lr, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
  20071c:	f8c2 800c 	str.w	r8, [r2, #12]
  gpiop->AFRH    = config->afrh;
  200720:	f04f 0877 	mov.w	r8, #119	; 0x77
  gpiop->ODR     = config->odr;
  200724:	6153      	str	r3, [r2, #20]
  gpiop->AFRL    = config->afrl;
  200726:	f8c2 b020 	str.w	fp, [r2, #32]
  gpiop->MODER   = config->moder;
  20072a:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 2009cc <main+0x35c>
  gpiop->AFRH    = config->afrh;
  20072e:	6256      	str	r6, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200730:	f44f 2620 	mov.w	r6, #655360	; 0xa0000
  200734:	f8c2 b000 	str.w	fp, [r2]
  gpiop->PUPDR   = config->pupdr;
  200738:	f10b 5bd5 	add.w	fp, fp, #446693376	; 0x1aa00000
  gpiop->OTYPER  = config->otyper;
  20073c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  200740:	6054      	str	r4, [r2, #4]
  gpiop->PUPDR   = config->pupdr;
  200742:	f50b 2bd2 	add.w	fp, fp, #430080	; 0x69000
  gpiop->OSPEEDR = config->ospeedr;
  200746:	f8c2 e008 	str.w	lr, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
  20074a:	f20b 5b2c 	addw	fp, fp, #1324	; 0x52c
  20074e:	f8c2 b00c 	str.w	fp, [r2, #12]
  gpiop->MODER   = config->moder;
  200752:	f8df b27c 	ldr.w	fp, [pc, #636]	; 2009d0 <main+0x360>
  gpiop->ODR     = config->odr;
  200756:	6151      	str	r1, [r2, #20]
  gpiop->PUPDR   = config->pupdr;
  200758:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
  gpiop->AFRL    = config->afrl;
  20075c:	6214      	str	r4, [r2, #32]
  gpiop->AFRH    = config->afrh;
  20075e:	6250      	str	r0, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200760:	f04f 6008 	mov.w	r0, #142606336	; 0x8800000
  200764:	f8c2 b000 	str.w	fp, [r2]
  gpiop->PUPDR   = config->pupdr;
  200768:	f8df b268 	ldr.w	fp, [pc, #616]	; 2009d4 <main+0x364>
  gpiop->OTYPER  = config->otyper;
  20076c:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  200770:	f8c2 a408 	str.w	sl, [r2, #1032]	; 0x408
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  200774:	f04f 0a01 	mov.w	sl, #1
  gpiop->PUPDR   = config->pupdr;
  200778:	f8c2 b40c 	str.w	fp, [r2, #1036]	; 0x40c
  gpiop->AFRL    = config->afrl;
  20077c:	f8df b258 	ldr.w	fp, [pc, #600]	; 2009d8 <main+0x368>
  gpiop->ODR     = config->odr;
  200780:	f8c2 3414 	str.w	r3, [r2, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  200784:	f8c2 b420 	str.w	fp, [r2, #1056]	; 0x420

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  200788:	f04f 0b80 	mov.w	fp, #128	; 0x80
  gpiop->AFRH    = config->afrh;
  20078c:	f8c2 4424 	str.w	r4, [r2, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  200790:	f8c2 c400 	str.w	ip, [r2, #1024]	; 0x400
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  200794:	f04f 0c07 	mov.w	ip, #7
  gpiop->OTYPER  = config->otyper;
  200798:	f8c2 4804 	str.w	r4, [r2, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  20079c:	f8c2 9808 	str.w	r9, [r2, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  2007a0:	f8df 9238 	ldr.w	r9, [pc, #568]	; 2009dc <main+0x36c>
  2007a4:	f8c2 980c 	str.w	r9, [r2, #2060]	; 0x80c
  tmp->cumulative = (rttime_t)0;
  2007a8:	f04f 0900 	mov.w	r9, #0
  gpiop->ODR     = config->odr;
  2007ac:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  2007b0:	f8c2 4820 	str.w	r4, [r2, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  2007b4:	f8c2 8824 	str.w	r8, [r2, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  2007b8:	f8c2 6800 	str.w	r6, [r2, #2048]	; 0x800
  gpiop->OTYPER  = config->otyper;
  2007bc:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
  gpiop->OSPEEDR = config->ospeedr;
  2007c0:	f8df 821c 	ldr.w	r8, [pc, #540]	; 2009e0 <main+0x370>
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  2007c4:	f105 021c 	add.w	r2, r5, #28
  gpiop->OTYPER  = config->otyper;
  2007c8:	f5a6 26fe 	sub.w	r6, r6, #520192	; 0x7f000
  2007cc:	6074      	str	r4, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2007ce:	f8c6 8008 	str.w	r8, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
  2007d2:	60f1      	str	r1, [r6, #12]
  gpiop->OTYPER  = config->otyper;
  2007d4:	f8df 820c 	ldr.w	r8, [pc, #524]	; 2009e4 <main+0x374>
  gpiop->ODR     = config->odr;
  2007d8:	6173      	str	r3, [r6, #20]
  gpiop->AFRL    = config->afrl;
  2007da:	6234      	str	r4, [r6, #32]
  gpiop->AFRH    = config->afrh;
  2007dc:	6274      	str	r4, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2007de:	6034      	str	r4, [r6, #0]
  gpiop->OSPEEDR = config->ospeedr;
  2007e0:	4e67      	ldr	r6, [pc, #412]	; (200980 <main+0x310>)
  gpiop->OTYPER  = config->otyper;
  2007e2:	f8c8 4004 	str.w	r4, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2007e6:	f8c8 6008 	str.w	r6, [r8, #8]
  gpiop->PUPDR   = config->pupdr;
  2007ea:	f8c8 100c 	str.w	r1, [r8, #12]
  gpiop->OTYPER  = config->otyper;
  2007ee:	4e65      	ldr	r6, [pc, #404]	; (200984 <main+0x314>)
  gpiop->ODR     = config->odr;
  2007f0:	f8c8 3014 	str.w	r3, [r8, #20]
  gpiop->AFRL    = config->afrl;
  2007f4:	f8c8 4020 	str.w	r4, [r8, #32]
  gpiop->AFRH    = config->afrh;
  2007f8:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2007fc:	f8c8 4000 	str.w	r4, [r8]
  gpiop->OSPEEDR = config->ospeedr;
  200800:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 2009e8 <main+0x378>
  gpiop->OTYPER  = config->otyper;
  200804:	6074      	str	r4, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
  200806:	f8c6 8008 	str.w	r8, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
  20080a:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 2009ec <main+0x37c>
  20080e:	f8c6 800c 	str.w	r8, [r6, #12]
  gpiop->AFRH    = config->afrh;
  200812:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 2009f0 <main+0x380>
  gpiop->ODR     = config->odr;
  200816:	6173      	str	r3, [r6, #20]
  gpiop->AFRL    = config->afrl;
  200818:	6234      	str	r4, [r6, #32]
  gpiop->AFRH    = config->afrh;
  20081a:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
  20081e:	f04f 0800 	mov.w	r8, #0
  gpiop->MODER   = config->moder;
  200822:	6030      	str	r0, [r6, #0]
  gpiop->OSPEEDR = config->ospeedr;
  200824:	260f      	movs	r6, #15
  gpiop->OTYPER  = config->otyper;
  200826:	4858      	ldr	r0, [pc, #352]	; (200988 <main+0x318>)
  200828:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20082a:	6086      	str	r6, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
  20082c:	4e57      	ldr	r6, [pc, #348]	; (20098c <main+0x31c>)
  20082e:	60c6      	str	r6, [r0, #12]
  gpiop->OTYPER  = config->otyper;
  200830:	4e57      	ldr	r6, [pc, #348]	; (200990 <main+0x320>)
  gpiop->ODR     = config->odr;
  200832:	6143      	str	r3, [r0, #20]
  gpiop->AFRL    = config->afrl;
  200834:	6204      	str	r4, [r0, #32]
  gpiop->AFRH    = config->afrh;
  200836:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
  200838:	6004      	str	r4, [r0, #0]
  chTMStartMeasurementX(&tm);
  20083a:	a802      	add	r0, sp, #8
  gpiop->OTYPER  = config->otyper;
  20083c:	6074      	str	r4, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20083e:	60b4      	str	r4, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
  200840:	60f1      	str	r1, [r6, #12]
  gpiop->ODR     = config->odr;
  200842:	6173      	str	r3, [r6, #20]
  gpiop->AFRL    = config->afrl;
  200844:	6234      	str	r4, [r6, #32]
  tqp->prev = (thread_t *)tqp;
  200846:	606d      	str	r5, [r5, #4]
  gpiop->AFRH    = config->afrh;
  200848:	6274      	str	r4, [r6, #36]	; 0x24
  ch.rlist.prio = NOPRIO;
  20084a:	60ac      	str	r4, [r5, #8]
  gpiop->MODER   = config->moder;
  20084c:	6034      	str	r4, [r6, #0]
  ch.rlist.newer = (thread_t *)&ch.rlist;
  20084e:	612d      	str	r5, [r5, #16]
  gpiop->OTYPER  = config->otyper;
  200850:	f8c6 4404 	str.w	r4, [r6, #1028]	; 0x404
  ch.rlist.older = (thread_t *)&ch.rlist;
  200854:	616d      	str	r5, [r5, #20]
  gpiop->OSPEEDR = config->ospeedr;
  200856:	f8c6 4408 	str.w	r4, [r6, #1032]	; 0x408
  ch.vtlist.delta = (systime_t)-1;
  20085a:	f8a5 e024 	strh.w	lr, [r5, #36]	; 0x24
  gpiop->PUPDR   = config->pupdr;
  20085e:	f8c6 140c 	str.w	r1, [r6, #1036]	; 0x40c
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  200862:	61ea      	str	r2, [r5, #28]
  gpiop->ODR     = config->odr;
  200864:	f8c6 3414 	str.w	r3, [r6, #1044]	; 0x414
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  200868:	622a      	str	r2, [r5, #32]
  gpiop->AFRL    = config->afrl;
  20086a:	f8c6 4420 	str.w	r4, [r6, #1056]	; 0x420
  gpiop->OTYPER  = config->otyper;
  20086e:	4a49      	ldr	r2, [pc, #292]	; (200994 <main+0x324>)
  gpiop->AFRH    = config->afrh;
  200870:	f8c6 4424 	str.w	r4, [r6, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  200874:	f8c6 4400 	str.w	r4, [r6, #1024]	; 0x400
  GPTD3.tim = STM32_TIM3;
  200878:	4e47      	ldr	r6, [pc, #284]	; (200998 <main+0x328>)
  gpiop->OTYPER  = config->otyper;
  20087a:	6054      	str	r4, [r2, #4]
  gptp->config = NULL;
  20087c:	6074      	str	r4, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20087e:	6094      	str	r4, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
  200880:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
  200882:	6153      	str	r3, [r2, #20]
  200884:	4b45      	ldr	r3, [pc, #276]	; (20099c <main+0x32c>)
  gpiop->AFRL    = config->afrl;
  200886:	6214      	str	r4, [r2, #32]
  200888:	60f3      	str	r3, [r6, #12]
  gpiop->AFRH    = config->afrh;
  20088a:	6254      	str	r4, [r2, #36]	; 0x24
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  20088c:	4b44      	ldr	r3, [pc, #272]	; (2009a0 <main+0x330>)
  gpiop->MODER   = config->moder;
  20088e:	6014      	str	r4, [r2, #0]
  200890:	4a44      	ldr	r2, [pc, #272]	; (2009a4 <main+0x334>)
  gptp->state  = GPT_STOP;
  200892:	f886 a000 	strb.w	sl, [r6]
  200896:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
  200898:	609c      	str	r4, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  20089a:	f8c3 c000 	str.w	ip, [r3]
  20089e:	f503 634f 	add.w	r3, r3, #3312	; 0xcf0
  2008a2:	f883 b023 	strb.w	fp, [r3, #35]	; 0x23
  2008a6:	9301      	str	r3, [sp, #4]
  tqp->next = (thread_t *)tqp;
  2008a8:	602d      	str	r5, [r5, #0]
  tmp->best       = (rtcnt_t)-1;
  2008aa:	f8cd e008 	str.w	lr, [sp, #8]
  ch.vtlist.systime = (systime_t)0;
  2008ae:	84ec      	strh	r4, [r5, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  2008b0:	672c      	str	r4, [r5, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
  2008b2:	9403      	str	r4, [sp, #12]
  tmp->last       = (rtcnt_t)0;
  2008b4:	9404      	str	r4, [sp, #16]
  tmp->n          = (ucnt_t)0;
  2008b6:	9405      	str	r4, [sp, #20]
  tmp->cumulative = (rttime_t)0;
  2008b8:	e9cd 8906 	strd	r8, r9, [sp, #24]
  chTMStartMeasurementX(&tm);
  2008bc:	f7ff fd20 	bl	200300 <chTMStartMeasurementX.constprop.12>
  chTMStopMeasurementX(&tm);
  2008c0:	a802      	add	r0, sp, #8
  2008c2:	f7ff fddd 	bl	200480 <chTMStopMeasurementX>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  2008c6:	9b01      	ldr	r3, [sp, #4]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  2008c8:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  2008cc:	f64f 0eff 	movw	lr, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  2008d0:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  tlp->next = (thread_t *)tlp;
  2008d4:	f105 0954 	add.w	r9, r5, #84	; 0x54
  nextmem = __heap_base__;
  2008d8:	4933      	ldr	r1, [pc, #204]	; (2009a8 <main+0x338>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  2008da:	ea0c 0c0e 	and.w	ip, ip, lr
  2008de:	4833      	ldr	r0, [pc, #204]	; (2009ac <main+0x33c>)
  endmem  = __heap_end__;
  2008e0:	4a33      	ldr	r2, [pc, #204]	; (2009b0 <main+0x340>)
  2008e2:	f8df 8110 	ldr.w	r8, [pc, #272]	; 2009f4 <main+0x384>
  reg_value  =  (reg_value                                   |
  2008e6:	f8df e110 	ldr.w	lr, [pc, #272]	; 2009f8 <main+0x388>
  nextmem = __heap_base__;
  2008ea:	6008      	str	r0, [r1, #0]
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
  2008ec:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  2008f0:	4930      	ldr	r1, [pc, #192]	; (2009b4 <main+0x344>)
  2008f2:	ea4c 0e0e 	orr.w	lr, ip, lr
  endmem  = __heap_end__;
  2008f6:	f8c2 8000 	str.w	r8, [r2]
  tp->name      = name;
  2008fa:	f8df c100 	ldr.w	ip, [pc, #256]	; 2009fc <main+0x38c>
  tqp->next = (thread_t *)tqp;
  2008fe:	f101 0810 	add.w	r8, r1, #16
  200902:	4a2d      	ldr	r2, [pc, #180]	; (2009b8 <main+0x348>)
  tp->realprio  = prio;
  200904:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
  tp->name      = name;
  200908:	f8c5 c044 	str.w	ip, [r5, #68]	; 0x44
  REG_INSERT(tp);
  20090c:	f8d5 b014 	ldr.w	fp, [r5, #20]
  200910:	600a      	str	r2, [r1, #0]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  200912:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 200a00 <main+0x390>
  ch.tm.offset = tm.last;
  200916:	9a04      	ldr	r2, [sp, #16]
  tp->flags     = CH_FLAG_MODE_STATIC;
  200918:	f885 404d 	strb.w	r4, [r5, #77]	; 0x4d
  20091c:	672a      	str	r2, [r5, #112]	; 0x70
  20091e:	f105 0258 	add.w	r2, r5, #88	; 0x58
  tp->epending  = (eventmask_t)0;
  200922:	662c      	str	r4, [r5, #96]	; 0x60
  tp->refs      = (trefs_t)1;
  200924:	f885 a04e 	strb.w	sl, [r5, #78]	; 0x4e
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  200928:	618c      	str	r4, [r1, #24]
  20092a:	f8c1 8010 	str.w	r8, [r1, #16]
  tqp->prev = (thread_t *)tqp;
  20092e:	f8c1 8014 	str.w	r8, [r1, #20]
  REG_INSERT(tp);
  200932:	f8c5 b040 	str.w	fp, [r5, #64]	; 0x40
  tp->mtxlist   = NULL;
  200936:	666c      	str	r4, [r5, #100]	; 0x64
  REG_INSERT(tp);
  200938:	63ed      	str	r5, [r5, #60]	; 0x3c
  20093a:	f8cb 0010 	str.w	r0, [fp, #16]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  20093e:	f04f 0b10 	mov.w	fp, #16
  SCB->AIRCR =  reg_value;
  200942:	f8c3 e00c 	str.w	lr, [r3, #12]
  200946:	f8dc e00c 	ldr.w	lr, [ip, #12]
  H_NEXT(&default_heap.header) = NULL;
  20094a:	608c      	str	r4, [r1, #8]
  H_PAGES(&default_heap.header) = 0;
  20094c:	60cc      	str	r4, [r1, #12]
  20094e:	f04e 7e80 	orr.w	lr, lr, #16777216	; 0x1000000
  200952:	6168      	str	r0, [r5, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  200954:	61a8      	str	r0, [r5, #24]
  DWT->LAR = 0xC5ACCE55U;
  200956:	4919      	ldr	r1, [pc, #100]	; (2009bc <main+0x34c>)
  200958:	4819      	ldr	r0, [pc, #100]	; (2009c0 <main+0x350>)
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  20095a:	64ac      	str	r4, [r5, #72]	; 0x48
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  20095c:	f885 a04c 	strb.w	sl, [r5, #76]	; 0x4c
  tlp->next = (thread_t *)tlp;
  200960:	f8c5 9054 	str.w	r9, [r5, #84]	; 0x54
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  200964:	f8cc e00c 	str.w	lr, [ip, #12]
  tqp->next = (thread_t *)tqp;
  200968:	65aa      	str	r2, [r5, #88]	; 0x58
  20096a:	e04b      	b.n	200a04 <main+0x394>
  20096c:	40023800 	.word	0x40023800
  200970:	40007000 	.word	0x40007000
  200974:	40020000 	.word	0x40020000
  200978:	20000810 	.word	0x20000810
  20097c:	000aaa0a 	.word	0x000aaa0a
  200980:	003fcfff 	.word	0x003fcfff
  200984:	40021800 	.word	0x40021800
  200988:	40021c00 	.word	0x40021c00
  20098c:	55555550 	.word	0x55555550
  200990:	40022000 	.word	0x40022000
  200994:	40022800 	.word	0x40022800
  200998:	20000800 	.word	0x20000800
  20099c:	40000400 	.word	0x40000400
  2009a0:	e000e010 	.word	0xe000e010
  2009a4:	00034bbf 	.word	0x00034bbf
  2009a8:	20000984 	.word	0x20000984
  2009ac:	20020010 	.word	0x20020010
  2009b0:	20000980 	.word	0x20000980
  2009b4:	20000960 	.word	0x20000960
  2009b8:	00200311 	.word	0x00200311
  2009bc:	e0001000 	.word	0xe0001000
  2009c0:	c5acce55 	.word	0xc5acce55
  2009c4:	40005551 	.word	0x40005551
  2009c8:	b0000bb0 	.word	0xb0000bb0
  2009cc:	2aae8028 	.word	0x2aae8028
  2009d0:	18004001 	.word	0x18004001
  2009d4:	01555051 	.word	0x01555051
  2009d8:	00bb00b0 	.word	0x00bb00b0
  2009dc:	55505555 	.word	0x55505555
  2009e0:	cffffff3 	.word	0xcffffff3
  2009e4:	40021400 	.word	0x40021400
  2009e8:	3cccf000 	.word	0x3cccf000
  2009ec:	51155555 	.word	0x51155555
  2009f0:	00b0b000 	.word	0x00b0b000
  2009f4:	20080000 	.word	0x20080000
  2009f8:	05fa0300 	.word	0x05fa0300
  2009fc:	08000e9c 	.word	0x08000e9c
  200a00:	e000edf0 	.word	0xe000edf0
  tqp->prev = (thread_t *)tqp;
  200a04:	65ea      	str	r2, [r5, #92]	; 0x5c
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  200a06:	f04f 0220 	mov.w	r2, #32
  DWT->LAR = 0xC5ACCE55U;
  200a0a:	f8c1 0fb0 	str.w	r0, [r1, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  200a0e:	6808      	ldr	r0, [r1, #0]
  200a10:	ea40 000a 	orr.w	r0, r0, sl
  200a14:	6008      	str	r0, [r1, #0]
  200a16:	f883 b01f 	strb.w	fp, [r3, #31]
  200a1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  200a1e:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
  200a22:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200a24:	2320      	movs	r3, #32
  200a26:	f383 8811 	msr	BASEPRI, r3
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
  200a2a:	4b67      	ldr	r3, [pc, #412]	; (200bc8 <main+0x558>)
  tp->state     = CH_STATE_WTSTART;
  200a2c:	2002      	movs	r0, #2
  tp->name      = name;
  200a2e:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 200be4 <main+0x574>
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200a32:	f103 026c 	add.w	r2, r3, #108	; 0x6c
  REG_INSERT(tp);
  200a36:	f8d5 c014 	ldr.w	ip, [r5, #20]
  200a3a:	f103 0190 	add.w	r1, r3, #144	; 0x90
  tp->name      = name;
  200a3e:	f8c3 80a8 	str.w	r8, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200a42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  tlp->next = (thread_t *)tlp;
  200a46:	f103 09b8 	add.w	r9, r3, #184	; 0xb8
  tqp->next = (thread_t *)tqp;
  200a4a:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
  200a4e:	f8df b198 	ldr.w	fp, [pc, #408]	; 200be8 <main+0x578>
  200a52:	f8df 8198 	ldr.w	r8, [pc, #408]	; 200bec <main+0x57c>
  tp->state     = CH_STATE_WTSTART;
  200a56:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
  chSchWakeupS(tp, MSG_OK);
  200a5a:	4608      	mov	r0, r1
  REG_INSERT(tp);
  200a5c:	f8c3 c0a4 	str.w	ip, [r3, #164]	; 0xa4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200a60:	671c      	str	r4, [r3, #112]	; 0x70
  tp->prio      = prio;
  200a62:	f8c3 a098 	str.w	sl, [r3, #152]	; 0x98
  tp->flags     = CH_FLAG_MODE_STATIC;
  200a66:	f883 40b1 	strb.w	r4, [r3, #177]	; 0xb1
  tp->realprio  = prio;
  200a6a:	f8c3 a0cc 	str.w	sl, [r3, #204]	; 0xcc
  tp->mtxlist   = NULL;
  200a6e:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
  tp->epending  = (eventmask_t)0;
  200a72:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
  tp->refs      = (trefs_t)1;
  200a76:	f883 a0b2 	strb.w	sl, [r3, #178]	; 0xb2
  REG_INSERT(tp);
  200a7a:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  200a7e:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  200a82:	f8c3 b06c 	str.w	fp, [r3, #108]	; 0x6c
  200a86:	f8c3 808c 	str.w	r8, [r3, #140]	; 0x8c
  REG_INSERT(tp);
  200a8a:	f8cc 1010 	str.w	r1, [ip, #16]
  tlp->next = (thread_t *)tlp;
  200a8e:	f8c3 90b8 	str.w	r9, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  200a92:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  200a96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  200a9a:	6169      	str	r1, [r5, #20]
  chSchWakeupS(tp, MSG_OK);
  200a9c:	f7ff fd60 	bl	200560 <chSchWakeupS.constprop.17>
  200aa0:	f384 8811 	msr	BASEPRI, r4
  200aa4:	2320      	movs	r3, #32
  200aa6:	f383 8811 	msr	BASEPRI, r3
  if (gptp->state == GPT_STOP) {
  200aaa:	7833      	ldrb	r3, [r6, #0]
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
  200aac:	f8df 9140 	ldr.w	r9, [pc, #320]	; 200bf0 <main+0x580>
  200ab0:	4553      	cmp	r3, sl
  200ab2:	f8c6 9004 	str.w	r9, [r6, #4]
  200ab6:	d071      	beq.n	200b9c <main+0x52c>
  200ab8:	68b3      	ldr	r3, [r6, #8]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  200aba:	f8d9 2000 	ldr.w	r2, [r9]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  200abe:	2400      	movs	r4, #0
  200ac0:	68f1      	ldr	r1, [r6, #12]
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
  200ac2:	2002      	movs	r0, #2
  gptp->tim->CR2 = gptp->config->cr2;
  200ac4:	f8d9 7008 	ldr.w	r7, [r9, #8]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  200ac8:	fbb3 f3f2 	udiv	r3, r3, r2
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  200acc:	f8d9 200c 	ldr.w	r2, [r9, #12]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  200ad0:	3b01      	subs	r3, #1
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  200ad2:	600c      	str	r4, [r1, #0]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  200ad4:	b29b      	uxth	r3, r3
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  200ad6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  gptp->tim->CR2 = gptp->config->cr2;
  200ada:	604f      	str	r7, [r1, #4]
  200adc:	7030      	strb	r0, [r6, #0]
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
  200ade:	628b      	str	r3, [r1, #40]	; 0x28
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  200ae0:	610c      	str	r4, [r1, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  200ae2:	60ca      	str	r2, [r1, #12]
  200ae4:	f384 8811 	msr	BASEPRI, r4
  200ae8:	2320      	movs	r3, #32
  200aea:	f383 8811 	msr	BASEPRI, r3
  tp = (thread_t *)((uint8_t *)wsp + size -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
  200aee:	4b37      	ldr	r3, [pc, #220]	; (200bcc <main+0x55c>)
  tp->prio      = prio;
  200af0:	f04f 0e80 	mov.w	lr, #128	; 0x80
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  200af4:	4936      	ldr	r1, [pc, #216]	; (200bd0 <main+0x560>)
  tp->refs      = (trefs_t)1;
  200af6:	2701      	movs	r7, #1
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  200af8:	f103 0cdc 	add.w	ip, r3, #220	; 0xdc
  tp->state     = CH_STATE_WTSTART;
  200afc:	f883 0120 	strb.w	r0, [r3, #288]	; 0x120
  tp->name      = name;
  200b00:	4834      	ldr	r0, [pc, #208]	; (200bd4 <main+0x564>)
  REG_INSERT(tp);
  200b02:	f503 7280 	add.w	r2, r3, #256	; 0x100
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  200b06:	f8c3 c10c 	str.w	ip, [r3, #268]	; 0x10c
  tlp->next = (thread_t *)tlp;
  200b0a:	f503 7c94 	add.w	ip, r3, #296	; 0x128
  200b0e:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
  tqp->next = (thread_t *)tqp;
  200b12:	f503 7196 	add.w	r1, r3, #300	; 0x12c
  tp->name      = name;
  200b16:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
  REG_INSERT(tp);
  200b1a:	6968      	ldr	r0, [r5, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  200b1c:	f8c3 80fc 	str.w	r8, [r3, #252]	; 0xfc
  REG_INSERT(tp);
  200b20:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  200b24:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
  tp->flags     = CH_FLAG_MODE_STATIC;
  200b28:	f883 4121 	strb.w	r4, [r3, #289]	; 0x121
  tp->mtxlist   = NULL;
  200b2c:	f8c3 4138 	str.w	r4, [r3, #312]	; 0x138
  tp->epending  = (eventmask_t)0;
  200b30:	f8c3 4134 	str.w	r4, [r3, #308]	; 0x134
  REG_INSERT(tp);
  200b34:	f8c3 5110 	str.w	r5, [r3, #272]	; 0x110
  tp->wabase = (stkalign_t *)wsp;
  200b38:	f8c3 311c 	str.w	r3, [r3, #284]	; 0x11c
  tp->prio      = prio;
  200b3c:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
  tp->realprio  = prio;
  200b40:	f8c3 e13c 	str.w	lr, [r3, #316]	; 0x13c
  tp->refs      = (trefs_t)1;
  200b44:	f883 7122 	strb.w	r7, [r3, #290]	; 0x122
  REG_INSERT(tp);
  200b48:	6102      	str	r2, [r0, #16]

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
  200b4a:	4610      	mov	r0, r2
  tlp->next = (thread_t *)tlp;
  200b4c:	f8c3 c128 	str.w	ip, [r3, #296]	; 0x128
  tqp->next = (thread_t *)tqp;
  200b50:	f8c3 112c 	str.w	r1, [r3, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
  200b54:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  REG_INSERT(tp);
  200b58:	616a      	str	r2, [r5, #20]
  chSchWakeupS(tp, MSG_OK);
  200b5a:	f7ff fd01 	bl	200560 <chSchWakeupS.constprop.17>
  200b5e:	f384 8811 	msr	BASEPRI, r4
  200b62:	f8d9 3000 	ldr.w	r3, [r9]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  200b66:	4620      	mov	r0, r4
  200b68:	68f2      	ldr	r2, [r6, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_OPM | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  200b6a:	260d      	movs	r6, #13
  200b6c:	fa23 f407 	lsr.w	r4, r3, r7

    chThdCreateStatic(waThread, sizeof(waThread), NORMALPRIO, Thread, NULL /* arg is NULL */);

    while (true)
    {
    	palToggleLine(LINE_LED1);
  200b70:	4919      	ldr	r1, [pc, #100]	; (200bd8 <main+0x568>)
  200b72:	694b      	ldr	r3, [r1, #20]
  200b74:	f083 0301 	eor.w	r3, r3, #1
  200b78:	614b      	str	r3, [r1, #20]
    	palToggleLine(LINE_LED2);
  200b7a:	694b      	ldr	r3, [r1, #20]
  200b7c:	f083 0380 	eor.w	r3, r3, #128	; 0x80
  200b80:	614b      	str	r3, [r1, #20]
    	palToggleLine(LINE_LED3);
  200b82:	694b      	ldr	r3, [r1, #20]
  200b84:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
  200b88:	614b      	str	r3, [r1, #20]
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  200b8a:	62d4      	str	r4, [r2, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  200b8c:	6157      	str	r7, [r2, #20]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  200b8e:	6110      	str	r0, [r2, #16]
  gptp->tim->CR1 = STM32_TIM_CR1_OPM | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  200b90:	6016      	str	r6, [r2, #0]
  while (!(gptp->tim->SR & STM32_TIM_SR_UIF))
  200b92:	6913      	ldr	r3, [r2, #16]
  200b94:	07db      	lsls	r3, r3, #31
  200b96:	d5fc      	bpl.n	200b92 <main+0x522>
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  200b98:	6110      	str	r0, [r2, #16]
  200b9a:	e7ea      	b.n	200b72 <main+0x502>
      rccEnableTIM3(FALSE);
  200b9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200b9e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200ba2:	f04f 0e70 	mov.w	lr, #112	; 0x70
      gptp->clock = STM32_TIMCLK1;
  200ba6:	4b0d      	ldr	r3, [pc, #52]	; (200bdc <main+0x56c>)
      rccEnableTIM3(FALSE);
  200ba8:	f042 0202 	orr.w	r2, r2, #2
  200bac:	643a      	str	r2, [r7, #64]	; 0x40
      rccResetTIM3();
  200bae:	6a39      	ldr	r1, [r7, #32]
  200bb0:	4a0b      	ldr	r2, [pc, #44]	; (200be0 <main+0x570>)
  200bb2:	f041 0102 	orr.w	r1, r1, #2
      gptp->clock = STM32_TIMCLK1;
  200bb6:	60b3      	str	r3, [r6, #8]
      rccResetTIM3();
  200bb8:	6239      	str	r1, [r7, #32]
  200bba:	623c      	str	r4, [r7, #32]
  200bbc:	f882 e31d 	strb.w	lr, [r2, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200bc0:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200bc4:	6010      	str	r0, [r2, #0]
  200bc6:	e778      	b.n	200aba <main+0x44a>
  200bc8:	20000888 	.word	0x20000888
  200bcc:	20000988 	.word	0x20000988
  200bd0:	002005f1 	.word	0x002005f1
  200bd4:	08000ebc 	.word	0x08000ebc
  200bd8:	40020400 	.word	0x40020400
  200bdc:	066ff300 	.word	0x066ff300
  200be0:	e000e100 	.word	0xe000e100
  200be4:	08000eb4 	.word	0x08000eb4
  200be8:	00200541 	.word	0x00200541
  200bec:	002002e5 	.word	0x002002e5
  200bf0:	20020000 	.word	0x20020000
	...

00200c00 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  200c00:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  200c02:	4b33      	ldr	r3, [pc, #204]	; (200cd0 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  200c04:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  200c08:	4a32      	ldr	r2, [pc, #200]	; (200cd4 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  200c0a:	4c33      	ldr	r4, [pc, #204]	; (200cd8 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  200c0c:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  200c0e:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  200c10:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  200c12:	681a      	ldr	r2, [r3, #0]
  200c14:	f042 0201 	orr.w	r2, r2, #1
  200c18:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  200c1a:	680b      	ldr	r3, [r1, #0]
  200c1c:	079b      	lsls	r3, r3, #30
  200c1e:	d5fc      	bpl.n	200c1a <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  200c20:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  200c22:	4a2b      	ldr	r2, [pc, #172]	; (200cd0 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  200c24:	f023 0303 	bic.w	r3, r3, #3
  200c28:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  200c2a:	688b      	ldr	r3, [r1, #8]
  200c2c:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  200c2e:	6893      	ldr	r3, [r2, #8]
  200c30:	f013 030c 	ands.w	r3, r3, #12
  200c34:	d1fb      	bne.n	200c2e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  200c36:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  200c38:	4925      	ldr	r1, [pc, #148]	; (200cd0 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  200c3a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  200c3e:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  200c40:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  200c42:	6813      	ldr	r3, [r2, #0]
  200c44:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  200c48:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  200c4a:	680b      	ldr	r3, [r1, #0]
  200c4c:	039d      	lsls	r5, r3, #14
  200c4e:	d5fc      	bpl.n	200c4a <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  200c50:	4b22      	ldr	r3, [pc, #136]	; (200cdc <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  200c52:	4820      	ldr	r0, [pc, #128]	; (200cd4 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  200c54:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  200c56:	680b      	ldr	r3, [r1, #0]
  200c58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  200c5c:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  200c5e:	6843      	ldr	r3, [r0, #4]
  200c60:	045c      	lsls	r4, r3, #17
  200c62:	d5fc      	bpl.n	200c5e <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  200c64:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  200c66:	4a1b      	ldr	r2, [pc, #108]	; (200cd4 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  200c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  200c6c:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  200c6e:	6853      	ldr	r3, [r2, #4]
  200c70:	03d9      	lsls	r1, r3, #15
  200c72:	d5fc      	bpl.n	200c6e <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  200c74:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  200c76:	4917      	ldr	r1, [pc, #92]	; (200cd4 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  200c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  200c7c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  200c7e:	684b      	ldr	r3, [r1, #4]
  200c80:	039a      	lsls	r2, r3, #14
  200c82:	d5fc      	bpl.n	200c7e <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  200c84:	4a12      	ldr	r2, [pc, #72]	; (200cd0 <__early_init+0xd0>)
  200c86:	6813      	ldr	r3, [r2, #0]
  200c88:	019b      	lsls	r3, r3, #6
  200c8a:	d5fc      	bpl.n	200c86 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  200c8c:	4b14      	ldr	r3, [pc, #80]	; (200ce0 <__early_init+0xe0>)
  200c8e:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  200c92:	4d14      	ldr	r5, [pc, #80]	; (200ce4 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  200c94:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  200c98:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  200c9a:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  200c9c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  200ca0:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  200ca4:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  200ca6:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  200ca8:	4909      	ldr	r1, [pc, #36]	; (200cd0 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  200caa:	f043 0302 	orr.w	r3, r3, #2
  200cae:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  200cb0:	688b      	ldr	r3, [r1, #8]
  200cb2:	f003 030c 	and.w	r3, r3, #12
  200cb6:	2b08      	cmp	r3, #8
  200cb8:	d1fa      	bne.n	200cb0 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  200cba:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  200cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  200cc0:	644b      	str	r3, [r1, #68]	; 0x44
  200cc2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  200cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  200cc8:	bc30      	pop	{r4, r5}
  200cca:	664b      	str	r3, [r1, #100]	; 0x64
  200ccc:	4770      	bx	lr
  200cce:	bf00      	nop
  200cd0:	40023800 	.word	0x40023800
  200cd4:	40007000 	.word	0x40007000
  200cd8:	10000400 	.word	0x10000400
  200cdc:	09406c08 	.word	0x09406c08
  200ce0:	40023c00 	.word	0x40023c00
  200ce4:	30999400 	.word	0x30999400
	...

00200cf0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
  200cf0:	b470      	push	{r4, r5, r6}
  200cf2:	2320      	movs	r3, #32
  200cf4:	f383 8811 	msr	BASEPRI, r3
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
  200cf8:	4b15      	ldr	r3, [pc, #84]	; (200d50 <chThdExit+0x60>)
  200cfa:	699d      	ldr	r5, [r3, #24]
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
  200cfc:	f105 0628 	add.w	r6, r5, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  200d00:	6aac      	ldr	r4, [r5, #40]	; 0x28
  tp->u.exitcode = msg;
  200d02:	6268      	str	r0, [r5, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  200d04:	42a6      	cmp	r6, r4
  200d06:	d012      	beq.n	200d2e <chThdExit+0x3e>
  tp->state = CH_STATE_READY;
  200d08:	2000      	movs	r0, #0
  tlp->next = tp->queue.next;
  200d0a:	6822      	ldr	r2, [r4, #0]
  cp = (thread_t *)&ch.rlist.queue;
  200d0c:	4b10      	ldr	r3, [pc, #64]	; (200d50 <chThdExit+0x60>)
  200d0e:	68a1      	ldr	r1, [r4, #8]
  200d10:	62aa      	str	r2, [r5, #40]	; 0x28
  tp->state = CH_STATE_READY;
  200d12:	f884 0020 	strb.w	r0, [r4, #32]
    cp = cp->queue.next;
  200d16:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  200d18:	689a      	ldr	r2, [r3, #8]
  200d1a:	428a      	cmp	r2, r1
  200d1c:	d2fb      	bcs.n	200d16 <chThdExit+0x26>
  tp->queue.prev             = cp->queue.prev;
  200d1e:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
  200d20:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  200d22:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  200d24:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  200d26:	605c      	str	r4, [r3, #4]
  return (bool)(tlp->next != (thread_t *)tlp);
  200d28:	6aac      	ldr	r4, [r5, #40]	; 0x28
  200d2a:	42b4      	cmp	r4, r6
  200d2c:	d1ed      	bne.n	200d0a <chThdExit+0x1a>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
  200d2e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
  200d32:	b943      	cbnz	r3, 200d46 <chThdExit+0x56>
  200d34:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
  200d38:	079b      	lsls	r3, r3, #30
  200d3a:	d104      	bne.n	200d46 <chThdExit+0x56>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
  200d3c:	692a      	ldr	r2, [r5, #16]
  200d3e:	696b      	ldr	r3, [r5, #20]
  200d40:	611a      	str	r2, [r3, #16]
  200d42:	692a      	ldr	r2, [r5, #16]
  200d44:	6153      	str	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
  200d46:	200f      	movs	r0, #15
}
  200d48:	bc70      	pop	{r4, r5, r6}
  chSchGoSleepS(CH_STATE_FINAL);
  200d4a:	f7ff bc39 	b.w	2005c0 <chSchGoSleepS>
  200d4e:	bf00      	nop
  200d50:	20000810 	.word	0x20000810
	...

00200d60 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  200d60:	4a0e      	ldr	r2, [pc, #56]	; (200d9c <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  200d62:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  200d64:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  200d66:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  200d68:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  200d6a:	2500      	movs	r5, #0
  thread_t *otp = currp;
  200d6c:	6994      	ldr	r4, [r2, #24]
  200d6e:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  200d70:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  200d72:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  200d76:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  200d7a:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  200d7c:	6190      	str	r0, [r2, #24]
  200d7e:	e000      	b.n	200d82 <chSchDoReschedule+0x22>
  200d80:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  200d82:	689a      	ldr	r2, [r3, #8]
  200d84:	4291      	cmp	r1, r2
  200d86:	d3fb      	bcc.n	200d80 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  200d88:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  200d8a:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  200d8c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  200d8e:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  200d90:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  200d92:	605c      	str	r4, [r3, #4]
}
  200d94:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  200d96:	f7ff ba9d 	b.w	2002d4 <_port_switch>
  200d9a:	bf00      	nop
  200d9c:	20000810 	.word	0x20000810

00200da0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  200da0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  200da2:	4f12      	ldr	r7, [pc, #72]	; (200dec <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  200da4:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  200da6:	4d12      	ldr	r5, [pc, #72]	; (200df0 <__init_ram_areas+0x50>)
  200da8:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  200dac:	4c11      	ldr	r4, [pc, #68]	; (200df4 <__init_ram_areas+0x54>)
  200dae:	4b12      	ldr	r3, [pc, #72]	; (200df8 <__init_ram_areas+0x58>)
  200db0:	4912      	ldr	r1, [pc, #72]	; (200dfc <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  200db2:	429c      	cmp	r4, r3
  200db4:	d911      	bls.n	200dda <__init_ram_areas+0x3a>
  200db6:	3904      	subs	r1, #4
  200db8:	461a      	mov	r2, r3
      *p = *tp;
  200dba:	f851 0f04 	ldr.w	r0, [r1, #4]!
  200dbe:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  200dc2:	4294      	cmp	r4, r2
  200dc4:	d8f9      	bhi.n	200dba <__init_ram_areas+0x1a>
  200dc6:	43da      	mvns	r2, r3
  200dc8:	4414      	add	r4, r2
  200dca:	f024 0403 	bic.w	r4, r4, #3
  200dce:	3404      	adds	r4, #4
  200dd0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  200dd2:	429d      	cmp	r5, r3
  200dd4:	d903      	bls.n	200dde <__init_ram_areas+0x3e>
      *p = 0;
  200dd6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  200dda:	429d      	cmp	r5, r3
  200ddc:	d8fb      	bhi.n	200dd6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  200dde:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  200de0:	4577      	cmp	r7, lr
  200de2:	d202      	bcs.n	200dea <__init_ram_areas+0x4a>
  200de4:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  200de8:	e7e3      	b.n	200db2 <__init_ram_areas+0x12>
  200dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  200dec:	08000ec4 	.word	0x08000ec4
  200df0:	20020010 	.word	0x20020010
  200df4:	20020010 	.word	0x20020010
  200df8:	20020010 	.word	0x20020010
  200dfc:	08000f54 	.word	0x08000f54

00200e00 <__default_exit>:
void __default_exit(void) {
  200e00:	e7fe      	b.n	200e00 <__default_exit>
  200e02:	bf00      	nop
	...

00200e10 <__late_init>:
void __late_init(void) {}
  200e10:	4770      	bx	lr
  200e12:	bf00      	nop
	...

00200e20 <__core_init>:
void __core_init(void) {
  200e20:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  200e22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  200e26:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  200e2a:	4c1b      	ldr	r4, [pc, #108]	; (200e98 <__core_init+0x78>)
  200e2c:	2200      	movs	r2, #0
  200e2e:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  200e32:	6963      	ldr	r3, [r4, #20]
  200e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  200e38:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  200e3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  200e3e:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  200e42:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  200e46:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  200e4a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  200e4e:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  200e52:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  200e56:	f3c3 334e 	ubfx	r3, r3, #13, #15
  200e5a:	07b7      	lsls	r7, r6, #30
  200e5c:	015d      	lsls	r5, r3, #5
  200e5e:	ea05 000e 	and.w	r0, r5, lr
  200e62:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  200e64:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  200e66:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  200e6a:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  200e6c:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  200e70:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  200e74:	1c53      	adds	r3, r2, #1
  200e76:	d1f6      	bne.n	200e66 <__core_init+0x46>
  200e78:	3d20      	subs	r5, #32
    } while(sets--);
  200e7a:	f115 0f20 	cmn.w	r5, #32
  200e7e:	d1ee      	bne.n	200e5e <__core_init+0x3e>
  200e80:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  200e84:	6963      	ldr	r3, [r4, #20]
  200e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  200e8a:	6163      	str	r3, [r4, #20]
  200e8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  200e90:	f3bf 8f6f 	isb	sy
  200e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  200e96:	bf00      	nop
  200e98:	e000ed00 	.word	0xe000ed00
