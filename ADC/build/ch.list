
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f001 fc27 	bl	201a70 <__core_init>
  200222:	f002 f9ed 	bl	202600 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f001 fbc1 	bl	2019f0 <__init_ram_areas>
  20026e:	f001 fbf7 	bl	201a60 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f001 fc55 	bl	201b30 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f001 bbdb 	b.w	201a50 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	080028b4 	.word	0x080028b4
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020044 	.word	0x20020044
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000b60 	.word	0x20000b60
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f001 f976 	bl	2015e0 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f001 f99c 	bl	201630 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>

002002fc <__aeabi_drsub>:
  2002fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  200300:	e002      	b.n	200308 <__adddf3>
  200302:	bf00      	nop

00200304 <__aeabi_dsub>:
  200304:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00200308 <__adddf3>:
  200308:	b530      	push	{r4, r5, lr}
  20030a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  20030e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  200312:	ea94 0f05 	teq	r4, r5
  200316:	bf08      	it	eq
  200318:	ea90 0f02 	teqeq	r0, r2
  20031c:	bf1f      	itttt	ne
  20031e:	ea54 0c00 	orrsne.w	ip, r4, r0
  200322:	ea55 0c02 	orrsne.w	ip, r5, r2
  200326:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  20032a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  20032e:	f000 80e2 	beq.w	2004f6 <__adddf3+0x1ee>
  200332:	ea4f 5454 	mov.w	r4, r4, lsr #21
  200336:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  20033a:	bfb8      	it	lt
  20033c:	426d      	neglt	r5, r5
  20033e:	dd0c      	ble.n	20035a <__adddf3+0x52>
  200340:	442c      	add	r4, r5
  200342:	ea80 0202 	eor.w	r2, r0, r2
  200346:	ea81 0303 	eor.w	r3, r1, r3
  20034a:	ea82 0000 	eor.w	r0, r2, r0
  20034e:	ea83 0101 	eor.w	r1, r3, r1
  200352:	ea80 0202 	eor.w	r2, r0, r2
  200356:	ea81 0303 	eor.w	r3, r1, r3
  20035a:	2d36      	cmp	r5, #54	; 0x36
  20035c:	bf88      	it	hi
  20035e:	bd30      	pophi	{r4, r5, pc}
  200360:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200364:	ea4f 3101 	mov.w	r1, r1, lsl #12
  200368:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  20036c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  200370:	d002      	beq.n	200378 <__adddf3+0x70>
  200372:	4240      	negs	r0, r0
  200374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200378:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  20037c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  200380:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  200384:	d002      	beq.n	20038c <__adddf3+0x84>
  200386:	4252      	negs	r2, r2
  200388:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  20038c:	ea94 0f05 	teq	r4, r5
  200390:	f000 80a7 	beq.w	2004e2 <__adddf3+0x1da>
  200394:	f1a4 0401 	sub.w	r4, r4, #1
  200398:	f1d5 0e20 	rsbs	lr, r5, #32
  20039c:	db0d      	blt.n	2003ba <__adddf3+0xb2>
  20039e:	fa02 fc0e 	lsl.w	ip, r2, lr
  2003a2:	fa22 f205 	lsr.w	r2, r2, r5
  2003a6:	1880      	adds	r0, r0, r2
  2003a8:	f141 0100 	adc.w	r1, r1, #0
  2003ac:	fa03 f20e 	lsl.w	r2, r3, lr
  2003b0:	1880      	adds	r0, r0, r2
  2003b2:	fa43 f305 	asr.w	r3, r3, r5
  2003b6:	4159      	adcs	r1, r3
  2003b8:	e00e      	b.n	2003d8 <__adddf3+0xd0>
  2003ba:	f1a5 0520 	sub.w	r5, r5, #32
  2003be:	f10e 0e20 	add.w	lr, lr, #32
  2003c2:	2a01      	cmp	r2, #1
  2003c4:	fa03 fc0e 	lsl.w	ip, r3, lr
  2003c8:	bf28      	it	cs
  2003ca:	f04c 0c02 	orrcs.w	ip, ip, #2
  2003ce:	fa43 f305 	asr.w	r3, r3, r5
  2003d2:	18c0      	adds	r0, r0, r3
  2003d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  2003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  2003dc:	d507      	bpl.n	2003ee <__adddf3+0xe6>
  2003de:	f04f 0e00 	mov.w	lr, #0
  2003e2:	f1dc 0c00 	rsbs	ip, ip, #0
  2003e6:	eb7e 0000 	sbcs.w	r0, lr, r0
  2003ea:	eb6e 0101 	sbc.w	r1, lr, r1
  2003ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  2003f2:	d31b      	bcc.n	20042c <__adddf3+0x124>
  2003f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  2003f8:	d30c      	bcc.n	200414 <__adddf3+0x10c>
  2003fa:	0849      	lsrs	r1, r1, #1
  2003fc:	ea5f 0030 	movs.w	r0, r0, rrx
  200400:	ea4f 0c3c 	mov.w	ip, ip, rrx
  200404:	f104 0401 	add.w	r4, r4, #1
  200408:	ea4f 5244 	mov.w	r2, r4, lsl #21
  20040c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  200410:	f080 809a 	bcs.w	200548 <__adddf3+0x240>
  200414:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  200418:	bf08      	it	eq
  20041a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  20041e:	f150 0000 	adcs.w	r0, r0, #0
  200422:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200426:	ea41 0105 	orr.w	r1, r1, r5
  20042a:	bd30      	pop	{r4, r5, pc}
  20042c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  200430:	4140      	adcs	r0, r0
  200432:	eb41 0101 	adc.w	r1, r1, r1
  200436:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20043a:	f1a4 0401 	sub.w	r4, r4, #1
  20043e:	d1e9      	bne.n	200414 <__adddf3+0x10c>
  200440:	f091 0f00 	teq	r1, #0
  200444:	bf04      	itt	eq
  200446:	4601      	moveq	r1, r0
  200448:	2000      	moveq	r0, #0
  20044a:	fab1 f381 	clz	r3, r1
  20044e:	bf08      	it	eq
  200450:	3320      	addeq	r3, #32
  200452:	f1a3 030b 	sub.w	r3, r3, #11
  200456:	f1b3 0220 	subs.w	r2, r3, #32
  20045a:	da0c      	bge.n	200476 <__adddf3+0x16e>
  20045c:	320c      	adds	r2, #12
  20045e:	dd08      	ble.n	200472 <__adddf3+0x16a>
  200460:	f102 0c14 	add.w	ip, r2, #20
  200464:	f1c2 020c 	rsb	r2, r2, #12
  200468:	fa01 f00c 	lsl.w	r0, r1, ip
  20046c:	fa21 f102 	lsr.w	r1, r1, r2
  200470:	e00c      	b.n	20048c <__adddf3+0x184>
  200472:	f102 0214 	add.w	r2, r2, #20
  200476:	bfd8      	it	le
  200478:	f1c2 0c20 	rsble	ip, r2, #32
  20047c:	fa01 f102 	lsl.w	r1, r1, r2
  200480:	fa20 fc0c 	lsr.w	ip, r0, ip
  200484:	bfdc      	itt	le
  200486:	ea41 010c 	orrle.w	r1, r1, ip
  20048a:	4090      	lslle	r0, r2
  20048c:	1ae4      	subs	r4, r4, r3
  20048e:	bfa2      	ittt	ge
  200490:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  200494:	4329      	orrge	r1, r5
  200496:	bd30      	popge	{r4, r5, pc}
  200498:	ea6f 0404 	mvn.w	r4, r4
  20049c:	3c1f      	subs	r4, #31
  20049e:	da1c      	bge.n	2004da <__adddf3+0x1d2>
  2004a0:	340c      	adds	r4, #12
  2004a2:	dc0e      	bgt.n	2004c2 <__adddf3+0x1ba>
  2004a4:	f104 0414 	add.w	r4, r4, #20
  2004a8:	f1c4 0220 	rsb	r2, r4, #32
  2004ac:	fa20 f004 	lsr.w	r0, r0, r4
  2004b0:	fa01 f302 	lsl.w	r3, r1, r2
  2004b4:	ea40 0003 	orr.w	r0, r0, r3
  2004b8:	fa21 f304 	lsr.w	r3, r1, r4
  2004bc:	ea45 0103 	orr.w	r1, r5, r3
  2004c0:	bd30      	pop	{r4, r5, pc}
  2004c2:	f1c4 040c 	rsb	r4, r4, #12
  2004c6:	f1c4 0220 	rsb	r2, r4, #32
  2004ca:	fa20 f002 	lsr.w	r0, r0, r2
  2004ce:	fa01 f304 	lsl.w	r3, r1, r4
  2004d2:	ea40 0003 	orr.w	r0, r0, r3
  2004d6:	4629      	mov	r1, r5
  2004d8:	bd30      	pop	{r4, r5, pc}
  2004da:	fa21 f004 	lsr.w	r0, r1, r4
  2004de:	4629      	mov	r1, r5
  2004e0:	bd30      	pop	{r4, r5, pc}
  2004e2:	f094 0f00 	teq	r4, #0
  2004e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  2004ea:	bf06      	itte	eq
  2004ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  2004f0:	3401      	addeq	r4, #1
  2004f2:	3d01      	subne	r5, #1
  2004f4:	e74e      	b.n	200394 <__adddf3+0x8c>
  2004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  2004fa:	bf18      	it	ne
  2004fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  200500:	d029      	beq.n	200556 <__adddf3+0x24e>
  200502:	ea94 0f05 	teq	r4, r5
  200506:	bf08      	it	eq
  200508:	ea90 0f02 	teqeq	r0, r2
  20050c:	d005      	beq.n	20051a <__adddf3+0x212>
  20050e:	ea54 0c00 	orrs.w	ip, r4, r0
  200512:	bf04      	itt	eq
  200514:	4619      	moveq	r1, r3
  200516:	4610      	moveq	r0, r2
  200518:	bd30      	pop	{r4, r5, pc}
  20051a:	ea91 0f03 	teq	r1, r3
  20051e:	bf1e      	ittt	ne
  200520:	2100      	movne	r1, #0
  200522:	2000      	movne	r0, #0
  200524:	bd30      	popne	{r4, r5, pc}
  200526:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  20052a:	d105      	bne.n	200538 <__adddf3+0x230>
  20052c:	0040      	lsls	r0, r0, #1
  20052e:	4149      	adcs	r1, r1
  200530:	bf28      	it	cs
  200532:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  200536:	bd30      	pop	{r4, r5, pc}
  200538:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  20053c:	bf3c      	itt	cc
  20053e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  200542:	bd30      	popcc	{r4, r5, pc}
  200544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  200548:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  20054c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  200550:	f04f 0000 	mov.w	r0, #0
  200554:	bd30      	pop	{r4, r5, pc}
  200556:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  20055a:	bf1a      	itte	ne
  20055c:	4619      	movne	r1, r3
  20055e:	4610      	movne	r0, r2
  200560:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  200564:	bf1c      	itt	ne
  200566:	460b      	movne	r3, r1
  200568:	4602      	movne	r2, r0
  20056a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  20056e:	bf06      	itte	eq
  200570:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  200574:	ea91 0f03 	teqeq	r1, r3
  200578:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  20057c:	bd30      	pop	{r4, r5, pc}
  20057e:	bf00      	nop

00200580 <__aeabi_ui2d>:
  200580:	f090 0f00 	teq	r0, #0
  200584:	bf04      	itt	eq
  200586:	2100      	moveq	r1, #0
  200588:	4770      	bxeq	lr
  20058a:	b530      	push	{r4, r5, lr}
  20058c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  200590:	f104 0432 	add.w	r4, r4, #50	; 0x32
  200594:	f04f 0500 	mov.w	r5, #0
  200598:	f04f 0100 	mov.w	r1, #0
  20059c:	e750      	b.n	200440 <__adddf3+0x138>
  20059e:	bf00      	nop

002005a0 <__aeabi_i2d>:
  2005a0:	f090 0f00 	teq	r0, #0
  2005a4:	bf04      	itt	eq
  2005a6:	2100      	moveq	r1, #0
  2005a8:	4770      	bxeq	lr
  2005aa:	b530      	push	{r4, r5, lr}
  2005ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  2005b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  2005b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  2005b8:	bf48      	it	mi
  2005ba:	4240      	negmi	r0, r0
  2005bc:	f04f 0100 	mov.w	r1, #0
  2005c0:	e73e      	b.n	200440 <__adddf3+0x138>
  2005c2:	bf00      	nop

002005c4 <__aeabi_f2d>:
  2005c4:	0042      	lsls	r2, r0, #1
  2005c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  2005ca:	ea4f 0131 	mov.w	r1, r1, rrx
  2005ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
  2005d2:	bf1f      	itttt	ne
  2005d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  2005d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  2005dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  2005e0:	4770      	bxne	lr
  2005e2:	f092 0f00 	teq	r2, #0
  2005e6:	bf14      	ite	ne
  2005e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  2005ec:	4770      	bxeq	lr
  2005ee:	b530      	push	{r4, r5, lr}
  2005f0:	f44f 7460 	mov.w	r4, #896	; 0x380
  2005f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  2005f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  2005fc:	e720      	b.n	200440 <__adddf3+0x138>
  2005fe:	bf00      	nop

00200600 <__aeabi_ul2d>:
  200600:	ea50 0201 	orrs.w	r2, r0, r1
  200604:	bf08      	it	eq
  200606:	4770      	bxeq	lr
  200608:	b530      	push	{r4, r5, lr}
  20060a:	f04f 0500 	mov.w	r5, #0
  20060e:	e00a      	b.n	200626 <__aeabi_l2d+0x16>

00200610 <__aeabi_l2d>:
  200610:	ea50 0201 	orrs.w	r2, r0, r1
  200614:	bf08      	it	eq
  200616:	4770      	bxeq	lr
  200618:	b530      	push	{r4, r5, lr}
  20061a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  20061e:	d502      	bpl.n	200626 <__aeabi_l2d+0x16>
  200620:	4240      	negs	r0, r0
  200622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200626:	f44f 6480 	mov.w	r4, #1024	; 0x400
  20062a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  20062e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  200632:	f43f aedc 	beq.w	2003ee <__adddf3+0xe6>
  200636:	f04f 0203 	mov.w	r2, #3
  20063a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  20063e:	bf18      	it	ne
  200640:	3203      	addne	r2, #3
  200642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  200646:	bf18      	it	ne
  200648:	3203      	addne	r2, #3
  20064a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  20064e:	f1c2 0320 	rsb	r3, r2, #32
  200652:	fa00 fc03 	lsl.w	ip, r0, r3
  200656:	fa20 f002 	lsr.w	r0, r0, r2
  20065a:	fa01 fe03 	lsl.w	lr, r1, r3
  20065e:	ea40 000e 	orr.w	r0, r0, lr
  200662:	fa21 f102 	lsr.w	r1, r1, r2
  200666:	4414      	add	r4, r2
  200668:	e6c1      	b.n	2003ee <__adddf3+0xe6>
  20066a:	bf00      	nop

0020066c <__aeabi_dmul>:
  20066c:	b570      	push	{r4, r5, r6, lr}
  20066e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  200672:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  200676:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  20067a:	bf1d      	ittte	ne
  20067c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  200680:	ea94 0f0c 	teqne	r4, ip
  200684:	ea95 0f0c 	teqne	r5, ip
  200688:	f000 f8de 	bleq	200848 <__aeabi_dmul+0x1dc>
  20068c:	442c      	add	r4, r5
  20068e:	ea81 0603 	eor.w	r6, r1, r3
  200692:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  200696:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  20069a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  20069e:	bf18      	it	ne
  2006a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  2006a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  2006a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  2006ac:	d038      	beq.n	200720 <__aeabi_dmul+0xb4>
  2006ae:	fba0 ce02 	umull	ip, lr, r0, r2
  2006b2:	f04f 0500 	mov.w	r5, #0
  2006b6:	fbe1 e502 	umlal	lr, r5, r1, r2
  2006ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  2006be:	fbe0 e503 	umlal	lr, r5, r0, r3
  2006c2:	f04f 0600 	mov.w	r6, #0
  2006c6:	fbe1 5603 	umlal	r5, r6, r1, r3
  2006ca:	f09c 0f00 	teq	ip, #0
  2006ce:	bf18      	it	ne
  2006d0:	f04e 0e01 	orrne.w	lr, lr, #1
  2006d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  2006d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  2006dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  2006e0:	d204      	bcs.n	2006ec <__aeabi_dmul+0x80>
  2006e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  2006e6:	416d      	adcs	r5, r5
  2006e8:	eb46 0606 	adc.w	r6, r6, r6
  2006ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  2006f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  2006f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  2006f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  2006fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  200700:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  200704:	bf88      	it	hi
  200706:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  20070a:	d81e      	bhi.n	20074a <__aeabi_dmul+0xde>
  20070c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  200710:	bf08      	it	eq
  200712:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  200716:	f150 0000 	adcs.w	r0, r0, #0
  20071a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  20071e:	bd70      	pop	{r4, r5, r6, pc}
  200720:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  200724:	ea46 0101 	orr.w	r1, r6, r1
  200728:	ea40 0002 	orr.w	r0, r0, r2
  20072c:	ea81 0103 	eor.w	r1, r1, r3
  200730:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  200734:	bfc2      	ittt	gt
  200736:	ebd4 050c 	rsbsgt	r5, r4, ip
  20073a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  20073e:	bd70      	popgt	{r4, r5, r6, pc}
  200740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200744:	f04f 0e00 	mov.w	lr, #0
  200748:	3c01      	subs	r4, #1
  20074a:	f300 80ab 	bgt.w	2008a4 <__aeabi_dmul+0x238>
  20074e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  200752:	bfde      	ittt	le
  200754:	2000      	movle	r0, #0
  200756:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  20075a:	bd70      	pople	{r4, r5, r6, pc}
  20075c:	f1c4 0400 	rsb	r4, r4, #0
  200760:	3c20      	subs	r4, #32
  200762:	da35      	bge.n	2007d0 <__aeabi_dmul+0x164>
  200764:	340c      	adds	r4, #12
  200766:	dc1b      	bgt.n	2007a0 <__aeabi_dmul+0x134>
  200768:	f104 0414 	add.w	r4, r4, #20
  20076c:	f1c4 0520 	rsb	r5, r4, #32
  200770:	fa00 f305 	lsl.w	r3, r0, r5
  200774:	fa20 f004 	lsr.w	r0, r0, r4
  200778:	fa01 f205 	lsl.w	r2, r1, r5
  20077c:	ea40 0002 	orr.w	r0, r0, r2
  200780:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  200784:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  200788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  20078c:	fa21 f604 	lsr.w	r6, r1, r4
  200790:	eb42 0106 	adc.w	r1, r2, r6
  200794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  200798:	bf08      	it	eq
  20079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  20079e:	bd70      	pop	{r4, r5, r6, pc}
  2007a0:	f1c4 040c 	rsb	r4, r4, #12
  2007a4:	f1c4 0520 	rsb	r5, r4, #32
  2007a8:	fa00 f304 	lsl.w	r3, r0, r4
  2007ac:	fa20 f005 	lsr.w	r0, r0, r5
  2007b0:	fa01 f204 	lsl.w	r2, r1, r4
  2007b4:	ea40 0002 	orr.w	r0, r0, r2
  2007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2007bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  2007c0:	f141 0100 	adc.w	r1, r1, #0
  2007c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  2007c8:	bf08      	it	eq
  2007ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  2007ce:	bd70      	pop	{r4, r5, r6, pc}
  2007d0:	f1c4 0520 	rsb	r5, r4, #32
  2007d4:	fa00 f205 	lsl.w	r2, r0, r5
  2007d8:	ea4e 0e02 	orr.w	lr, lr, r2
  2007dc:	fa20 f304 	lsr.w	r3, r0, r4
  2007e0:	fa01 f205 	lsl.w	r2, r1, r5
  2007e4:	ea43 0302 	orr.w	r3, r3, r2
  2007e8:	fa21 f004 	lsr.w	r0, r1, r4
  2007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2007f0:	fa21 f204 	lsr.w	r2, r1, r4
  2007f4:	ea20 0002 	bic.w	r0, r0, r2
  2007f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  2007fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  200800:	bf08      	it	eq
  200802:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  200806:	bd70      	pop	{r4, r5, r6, pc}
  200808:	f094 0f00 	teq	r4, #0
  20080c:	d10f      	bne.n	20082e <__aeabi_dmul+0x1c2>
  20080e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  200812:	0040      	lsls	r0, r0, #1
  200814:	eb41 0101 	adc.w	r1, r1, r1
  200818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20081c:	bf08      	it	eq
  20081e:	3c01      	subeq	r4, #1
  200820:	d0f7      	beq.n	200812 <__aeabi_dmul+0x1a6>
  200822:	ea41 0106 	orr.w	r1, r1, r6
  200826:	f095 0f00 	teq	r5, #0
  20082a:	bf18      	it	ne
  20082c:	4770      	bxne	lr
  20082e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  200832:	0052      	lsls	r2, r2, #1
  200834:	eb43 0303 	adc.w	r3, r3, r3
  200838:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  20083c:	bf08      	it	eq
  20083e:	3d01      	subeq	r5, #1
  200840:	d0f7      	beq.n	200832 <__aeabi_dmul+0x1c6>
  200842:	ea43 0306 	orr.w	r3, r3, r6
  200846:	4770      	bx	lr
  200848:	ea94 0f0c 	teq	r4, ip
  20084c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200850:	bf18      	it	ne
  200852:	ea95 0f0c 	teqne	r5, ip
  200856:	d00c      	beq.n	200872 <__aeabi_dmul+0x206>
  200858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  20085c:	bf18      	it	ne
  20085e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200862:	d1d1      	bne.n	200808 <__aeabi_dmul+0x19c>
  200864:	ea81 0103 	eor.w	r1, r1, r3
  200868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  20086c:	f04f 0000 	mov.w	r0, #0
  200870:	bd70      	pop	{r4, r5, r6, pc}
  200872:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  200876:	bf06      	itte	eq
  200878:	4610      	moveq	r0, r2
  20087a:	4619      	moveq	r1, r3
  20087c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200880:	d019      	beq.n	2008b6 <__aeabi_dmul+0x24a>
  200882:	ea94 0f0c 	teq	r4, ip
  200886:	d102      	bne.n	20088e <__aeabi_dmul+0x222>
  200888:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  20088c:	d113      	bne.n	2008b6 <__aeabi_dmul+0x24a>
  20088e:	ea95 0f0c 	teq	r5, ip
  200892:	d105      	bne.n	2008a0 <__aeabi_dmul+0x234>
  200894:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  200898:	bf1c      	itt	ne
  20089a:	4610      	movne	r0, r2
  20089c:	4619      	movne	r1, r3
  20089e:	d10a      	bne.n	2008b6 <__aeabi_dmul+0x24a>
  2008a0:	ea81 0103 	eor.w	r1, r1, r3
  2008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2008a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  2008ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  2008b0:	f04f 0000 	mov.w	r0, #0
  2008b4:	bd70      	pop	{r4, r5, r6, pc}
  2008b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  2008ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  2008be:	bd70      	pop	{r4, r5, r6, pc}

002008c0 <__aeabi_ddiv>:
  2008c0:	b570      	push	{r4, r5, r6, lr}
  2008c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  2008c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  2008ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  2008ce:	bf1d      	ittte	ne
  2008d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  2008d4:	ea94 0f0c 	teqne	r4, ip
  2008d8:	ea95 0f0c 	teqne	r5, ip
  2008dc:	f000 f8a7 	bleq	200a2e <__aeabi_ddiv+0x16e>
  2008e0:	eba4 0405 	sub.w	r4, r4, r5
  2008e4:	ea81 0e03 	eor.w	lr, r1, r3
  2008e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  2008ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  2008f0:	f000 8088 	beq.w	200a04 <__aeabi_ddiv+0x144>
  2008f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  2008f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  2008fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  200900:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  200904:	ea4f 2202 	mov.w	r2, r2, lsl #8
  200908:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  20090c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  200910:	ea4f 2600 	mov.w	r6, r0, lsl #8
  200914:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  200918:	429d      	cmp	r5, r3
  20091a:	bf08      	it	eq
  20091c:	4296      	cmpeq	r6, r2
  20091e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  200922:	f504 7440 	add.w	r4, r4, #768	; 0x300
  200926:	d202      	bcs.n	20092e <__aeabi_ddiv+0x6e>
  200928:	085b      	lsrs	r3, r3, #1
  20092a:	ea4f 0232 	mov.w	r2, r2, rrx
  20092e:	1ab6      	subs	r6, r6, r2
  200930:	eb65 0503 	sbc.w	r5, r5, r3
  200934:	085b      	lsrs	r3, r3, #1
  200936:	ea4f 0232 	mov.w	r2, r2, rrx
  20093a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  20093e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  200942:	ebb6 0e02 	subs.w	lr, r6, r2
  200946:	eb75 0e03 	sbcs.w	lr, r5, r3
  20094a:	bf22      	ittt	cs
  20094c:	1ab6      	subcs	r6, r6, r2
  20094e:	4675      	movcs	r5, lr
  200950:	ea40 000c 	orrcs.w	r0, r0, ip
  200954:	085b      	lsrs	r3, r3, #1
  200956:	ea4f 0232 	mov.w	r2, r2, rrx
  20095a:	ebb6 0e02 	subs.w	lr, r6, r2
  20095e:	eb75 0e03 	sbcs.w	lr, r5, r3
  200962:	bf22      	ittt	cs
  200964:	1ab6      	subcs	r6, r6, r2
  200966:	4675      	movcs	r5, lr
  200968:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  20096c:	085b      	lsrs	r3, r3, #1
  20096e:	ea4f 0232 	mov.w	r2, r2, rrx
  200972:	ebb6 0e02 	subs.w	lr, r6, r2
  200976:	eb75 0e03 	sbcs.w	lr, r5, r3
  20097a:	bf22      	ittt	cs
  20097c:	1ab6      	subcs	r6, r6, r2
  20097e:	4675      	movcs	r5, lr
  200980:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  200984:	085b      	lsrs	r3, r3, #1
  200986:	ea4f 0232 	mov.w	r2, r2, rrx
  20098a:	ebb6 0e02 	subs.w	lr, r6, r2
  20098e:	eb75 0e03 	sbcs.w	lr, r5, r3
  200992:	bf22      	ittt	cs
  200994:	1ab6      	subcs	r6, r6, r2
  200996:	4675      	movcs	r5, lr
  200998:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  20099c:	ea55 0e06 	orrs.w	lr, r5, r6
  2009a0:	d018      	beq.n	2009d4 <__aeabi_ddiv+0x114>
  2009a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  2009a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  2009aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  2009ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  2009b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  2009b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  2009ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  2009be:	d1c0      	bne.n	200942 <__aeabi_ddiv+0x82>
  2009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  2009c4:	d10b      	bne.n	2009de <__aeabi_ddiv+0x11e>
  2009c6:	ea41 0100 	orr.w	r1, r1, r0
  2009ca:	f04f 0000 	mov.w	r0, #0
  2009ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  2009d2:	e7b6      	b.n	200942 <__aeabi_ddiv+0x82>
  2009d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  2009d8:	bf04      	itt	eq
  2009da:	4301      	orreq	r1, r0
  2009dc:	2000      	moveq	r0, #0
  2009de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  2009e2:	bf88      	it	hi
  2009e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  2009e8:	f63f aeaf 	bhi.w	20074a <__aeabi_dmul+0xde>
  2009ec:	ebb5 0c03 	subs.w	ip, r5, r3
  2009f0:	bf04      	itt	eq
  2009f2:	ebb6 0c02 	subseq.w	ip, r6, r2
  2009f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  2009fa:	f150 0000 	adcs.w	r0, r0, #0
  2009fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200a02:	bd70      	pop	{r4, r5, r6, pc}
  200a04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  200a08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  200a0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  200a10:	bfc2      	ittt	gt
  200a12:	ebd4 050c 	rsbsgt	r5, r4, ip
  200a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  200a1a:	bd70      	popgt	{r4, r5, r6, pc}
  200a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200a20:	f04f 0e00 	mov.w	lr, #0
  200a24:	3c01      	subs	r4, #1
  200a26:	e690      	b.n	20074a <__aeabi_dmul+0xde>
  200a28:	ea45 0e06 	orr.w	lr, r5, r6
  200a2c:	e68d      	b.n	20074a <__aeabi_dmul+0xde>
  200a2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200a32:	ea94 0f0c 	teq	r4, ip
  200a36:	bf08      	it	eq
  200a38:	ea95 0f0c 	teqeq	r5, ip
  200a3c:	f43f af3b 	beq.w	2008b6 <__aeabi_dmul+0x24a>
  200a40:	ea94 0f0c 	teq	r4, ip
  200a44:	d10a      	bne.n	200a5c <__aeabi_ddiv+0x19c>
  200a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  200a4a:	f47f af34 	bne.w	2008b6 <__aeabi_dmul+0x24a>
  200a4e:	ea95 0f0c 	teq	r5, ip
  200a52:	f47f af25 	bne.w	2008a0 <__aeabi_dmul+0x234>
  200a56:	4610      	mov	r0, r2
  200a58:	4619      	mov	r1, r3
  200a5a:	e72c      	b.n	2008b6 <__aeabi_dmul+0x24a>
  200a5c:	ea95 0f0c 	teq	r5, ip
  200a60:	d106      	bne.n	200a70 <__aeabi_ddiv+0x1b0>
  200a62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  200a66:	f43f aefd 	beq.w	200864 <__aeabi_dmul+0x1f8>
  200a6a:	4610      	mov	r0, r2
  200a6c:	4619      	mov	r1, r3
  200a6e:	e722      	b.n	2008b6 <__aeabi_dmul+0x24a>
  200a70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  200a74:	bf18      	it	ne
  200a76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200a7a:	f47f aec5 	bne.w	200808 <__aeabi_dmul+0x19c>
  200a7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  200a82:	f47f af0d 	bne.w	2008a0 <__aeabi_dmul+0x234>
  200a86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  200a8a:	f47f aeeb 	bne.w	200864 <__aeabi_dmul+0x1f8>
  200a8e:	e712      	b.n	2008b6 <__aeabi_dmul+0x24a>

00200a90 <__aeabi_d2iz>:
  200a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
  200a94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  200a98:	d215      	bcs.n	200ac6 <__aeabi_d2iz+0x36>
  200a9a:	d511      	bpl.n	200ac0 <__aeabi_d2iz+0x30>
  200a9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  200aa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  200aa4:	d912      	bls.n	200acc <__aeabi_d2iz+0x3c>
  200aa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  200aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  200aae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  200ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200ab6:	fa23 f002 	lsr.w	r0, r3, r2
  200aba:	bf18      	it	ne
  200abc:	4240      	negne	r0, r0
  200abe:	4770      	bx	lr
  200ac0:	f04f 0000 	mov.w	r0, #0
  200ac4:	4770      	bx	lr
  200ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  200aca:	d105      	bne.n	200ad8 <__aeabi_d2iz+0x48>
  200acc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  200ad0:	bf08      	it	eq
  200ad2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  200ad6:	4770      	bx	lr
  200ad8:	f04f 0000 	mov.w	r0, #0
  200adc:	4770      	bx	lr
  200ade:	bf00      	nop

00200ae0 <notify8.lto_priv.35>:

#if STM32_SERIAL_USE_UART8 || defined(__DOXYGEN__)
static void notify8(io_queue_t *qp) {

  (void)qp;
  UART8->CR1 |= USART_CR1_TXEIE;
  200ae0:	4a02      	ldr	r2, [pc, #8]	; (200aec <notify8.lto_priv.35+0xc>)
  200ae2:	6813      	ldr	r3, [r2, #0]
  200ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  200ae8:	6013      	str	r3, [r2, #0]
  200aea:	4770      	bx	lr
  200aec:	40007c00 	.word	0x40007c00

00200af0 <notify7.lto_priv.34>:
  UART7->CR1 |= USART_CR1_TXEIE;
  200af0:	4a02      	ldr	r2, [pc, #8]	; (200afc <notify7.lto_priv.34+0xc>)
  200af2:	6813      	ldr	r3, [r2, #0]
  200af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  200af8:	6013      	str	r3, [r2, #0]
  200afa:	4770      	bx	lr
  200afc:	40007800 	.word	0x40007800

00200b00 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
  200b00:	b480      	push	{r7}
  200b02:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  200b04:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
  200b08:	3320      	adds	r3, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  200b0a:	f383 8809 	msr	PSP, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200b0e:	2300      	movs	r3, #0
  200b10:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
  200b14:	46bd      	mov	sp, r7
  200b16:	bc80      	pop	{r7}
  200b18:	4770      	bx	lr
  200b1a:	bf00      	nop
  200b1c:	0000      	movs	r0, r0
	...

00200b20 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  200b20:	b470      	push	{r4, r5, r6}
  200b22:	2320      	movs	r3, #32
  200b24:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200b28:	4e0d      	ldr	r6, [pc, #52]	; (200b60 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  200b2a:	1e4a      	subs	r2, r1, #1
  200b2c:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  200b2e:	4c0d      	ldr	r4, [pc, #52]	; (200b64 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200b30:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  200b32:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  200b34:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200b36:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  200b38:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  200b3a:	1858      	adds	r0, r3, r1
  200b3c:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  200b3e:	1a23      	subs	r3, r4, r0
  200b40:	429a      	cmp	r2, r3
  200b42:	d806      	bhi.n	200b52 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  200b44:	4402      	add	r2, r0
  200b46:	2300      	movs	r3, #0
  200b48:	6032      	str	r2, [r6, #0]
  200b4a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  200b4e:	bc70      	pop	{r4, r5, r6}
  200b50:	4770      	bx	lr
    return NULL;
  200b52:	2000      	movs	r0, #0
  200b54:	2300      	movs	r3, #0
  200b56:	f383 8811 	msr	BASEPRI, r3
}
  200b5a:	bc70      	pop	{r4, r5, r6}
  200b5c:	4770      	bx	lr
  200b5e:	bf00      	nop
  200b60:	20000b18 	.word	0x20000b18
  200b64:	20000b14 	.word	0x20000b14
	...

00200b70 <wakeup>:
  200b70:	2320      	movs	r3, #32
  200b72:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
  200b76:	f890 3020 	ldrb.w	r3, [r0, #32]
  200b7a:	2b07      	cmp	r3, #7
  200b7c:	d80e      	bhi.n	200b9c <wakeup+0x2c>
  200b7e:	e8df f003 	tbb	[pc, r3]
  200b82:	0d28      	.short	0x0d28
  200b84:	0408240d 	.word	0x0408240d
  200b88:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
  200b8a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  200b8c:	6893      	ldr	r3, [r2, #8]
  200b8e:	3301      	adds	r3, #1
  200b90:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  200b92:	e890 000c 	ldmia.w	r0, {r2, r3}
  200b96:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  200b98:	6802      	ldr	r2, [r0, #0]
  200b9a:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  200b9c:	2200      	movs	r2, #0
  200b9e:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  200ba0:	4b0e      	ldr	r3, [pc, #56]	; (200bdc <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  200ba2:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  200ba6:	b410      	push	{r4}
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  200ba8:	f04f 34ff 	mov.w	r4, #4294967295
  200bac:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  200bae:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  200bb0:	689a      	ldr	r2, [r3, #8]
  200bb2:	428a      	cmp	r2, r1
  200bb4:	d2fb      	bcs.n	200bae <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  200bb6:	685a      	ldr	r2, [r3, #4]
  200bb8:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  200bba:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  200bbc:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  200bbe:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  200bc0:	6058      	str	r0, [r3, #4]
  200bc2:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
  200bc6:	bc10      	pop	{r4}
  200bc8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  200bca:	6a43      	ldr	r3, [r0, #36]	; 0x24
  200bcc:	2200      	movs	r2, #0
  200bce:	601a      	str	r2, [r3, #0]
  200bd0:	e7e4      	b.n	200b9c <wakeup+0x2c>
  200bd2:	2300      	movs	r3, #0
  200bd4:	f383 8811 	msr	BASEPRI, r3
  200bd8:	4770      	bx	lr
  200bda:	bf00      	nop
  200bdc:	20000920 	.word	0x20000920

00200be0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  200be0:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  200be2:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  200be4:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  200be6:	4b08      	ldr	r3, [pc, #32]	; (200c08 <chSchReadyI+0x28>)
  200be8:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  200bea:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  200bee:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  200bf0:	689a      	ldr	r2, [r3, #8]
  200bf2:	428a      	cmp	r2, r1
  200bf4:	d2fb      	bcs.n	200bee <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  200bf6:	685a      	ldr	r2, [r3, #4]
}
  200bf8:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  200bfa:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  200bfc:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  200bfe:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  200c00:	605c      	str	r4, [r3, #4]
}
  200c02:	bc10      	pop	{r4}
  200c04:	4770      	bx	lr
  200c06:	bf00      	nop
  200c08:	20000920 	.word	0x20000920
  200c0c:	00000000 	.word	0x00000000

00200c10 <adc_lld_serve_rx_interrupt.lto_priv.33>:
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
  200c10:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
  200c14:	b570      	push	{r4, r5, r6, lr}
  200c16:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
  200c18:	d031      	beq.n	200c7e <adc_lld_serve_rx_interrupt.lto_priv.33+0x6e>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  200c1a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  200c1c:	6803      	ldr	r3, [r0, #0]
  200c1e:	681a      	ldr	r2, [r3, #0]
  200c20:	f022 021f 	bic.w	r2, r2, #31
  200c24:	601a      	str	r2, [r3, #0]
  200c26:	6819      	ldr	r1, [r3, #0]
  200c28:	f011 0101 	ands.w	r1, r1, #1
  200c2c:	d1fb      	bne.n	200c26 <adc_lld_serve_rx_interrupt.lto_priv.33+0x16>
  200c2e:	7a03      	ldrb	r3, [r0, #8]
  200c30:	223d      	movs	r2, #61	; 0x3d
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  200c32:	6925      	ldr	r5, [r4, #16]
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
  200c34:	2601      	movs	r6, #1
  dmaStreamDisable(adcp->dmastp);
  200c36:	6840      	ldr	r0, [r0, #4]
  200c38:	409a      	lsls	r2, r3
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  200c3a:	68ad      	ldr	r5, [r5, #8]
  adcp->adc->CR1 = 0;
  200c3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  200c3e:	6002      	str	r2, [r0, #0]
  adcp->adc->CR1 = 0;
  200c40:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 = 0;
  200c42:	6099      	str	r1, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  200c44:	609e      	str	r6, [r3, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  200c46:	2d00      	cmp	r5, #0
  200c48:	d030      	beq.n	200cac <adc_lld_serve_rx_interrupt.lto_priv.33+0x9c>
  200c4a:	2305      	movs	r3, #5
  200c4c:	4620      	mov	r0, r4
  200c4e:	7023      	strb	r3, [r4, #0]
  200c50:	47a8      	blx	r5
  200c52:	7823      	ldrb	r3, [r4, #0]
  200c54:	2b05      	cmp	r3, #5
  200c56:	d067      	beq.n	200d28 <adc_lld_serve_rx_interrupt.lto_priv.33+0x118>
  200c58:	2300      	movs	r3, #0
  200c5a:	6123      	str	r3, [r4, #16]
  200c5c:	2320      	movs	r3, #32
  200c5e:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
  200c62:	6963      	ldr	r3, [r4, #20]
  200c64:	b13b      	cbz	r3, 200c76 <adc_lld_serve_rx_interrupt.lto_priv.33+0x66>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
  200c66:	2100      	movs	r1, #0
    tp->u.rdymsg = msg;
  200c68:	f04f 32ff 	mov.w	r2, #4294967295
    (void) chSchReadyI(tp);
  200c6c:	4618      	mov	r0, r3
    *trp = NULL;
  200c6e:	6161      	str	r1, [r4, #20]
    tp->u.rdymsg = msg;
  200c70:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
  200c72:	f7ff ffb5 	bl	200be0 <chSchReadyI>
  200c76:	2300      	movs	r3, #0
  200c78:	f383 8811 	msr	BASEPRI, r3
  200c7c:	bd70      	pop	{r4, r5, r6, pc}
    if (adcp->grpp != NULL) {
  200c7e:	6905      	ldr	r5, [r0, #16]
  200c80:	b19d      	cbz	r5, 200caa <adc_lld_serve_rx_interrupt.lto_priv.33+0x9a>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
  200c82:	068a      	lsls	r2, r1, #26
  200c84:	d50f      	bpl.n	200ca6 <adc_lld_serve_rx_interrupt.lto_priv.33+0x96>
        _adc_isr_full_code(adcp);
  200c86:	782b      	ldrb	r3, [r5, #0]
  200c88:	b1eb      	cbz	r3, 200cc6 <adc_lld_serve_rx_interrupt.lto_priv.33+0xb6>
  200c8a:	686b      	ldr	r3, [r5, #4]
  200c8c:	b16b      	cbz	r3, 200caa <adc_lld_serve_rx_interrupt.lto_priv.33+0x9a>
  200c8e:	68c2      	ldr	r2, [r0, #12]
  200c90:	2a01      	cmp	r2, #1
  200c92:	d94c      	bls.n	200d2e <adc_lld_serve_rx_interrupt.lto_priv.33+0x11e>
  200c94:	0852      	lsrs	r2, r2, #1
  200c96:	886d      	ldrh	r5, [r5, #2]
  200c98:	6884      	ldr	r4, [r0, #8]
  200c9a:	0051      	lsls	r1, r2, #1
  200c9c:	fb05 4101 	mla	r1, r5, r1, r4
}
  200ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
  200ca4:	4718      	bx	r3
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
  200ca6:	06cb      	lsls	r3, r1, #27
  200ca8:	d404      	bmi.n	200cb4 <adc_lld_serve_rx_interrupt.lto_priv.33+0xa4>
  200caa:	bd70      	pop	{r4, r5, r6, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  200cac:	2302      	movs	r3, #2
  200cae:	6125      	str	r5, [r4, #16]
  200cb0:	7023      	strb	r3, [r4, #0]
  200cb2:	e7d3      	b.n	200c5c <adc_lld_serve_rx_interrupt.lto_priv.33+0x4c>
        _adc_isr_half_code(adcp);
  200cb4:	686b      	ldr	r3, [r5, #4]
  200cb6:	2b00      	cmp	r3, #0
  200cb8:	d0f7      	beq.n	200caa <adc_lld_serve_rx_interrupt.lto_priv.33+0x9a>
  200cba:	68c2      	ldr	r2, [r0, #12]
  200cbc:	6881      	ldr	r1, [r0, #8]
  200cbe:	0852      	lsrs	r2, r2, #1
}
  200cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_half_code(adcp);
  200cc4:	4718      	bx	r3
  dmaStreamDisable(adcp->dmastp);
  200cc6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  200cc8:	6802      	ldr	r2, [r0, #0]
  200cca:	6813      	ldr	r3, [r2, #0]
  200ccc:	f023 031f 	bic.w	r3, r3, #31
  200cd0:	6013      	str	r3, [r2, #0]
  200cd2:	6813      	ldr	r3, [r2, #0]
  200cd4:	f013 0301 	ands.w	r3, r3, #1
  200cd8:	d1fb      	bne.n	200cd2 <adc_lld_serve_rx_interrupt.lto_priv.33+0xc2>
  200cda:	7a02      	ldrb	r2, [r0, #8]
  200cdc:	213d      	movs	r1, #61	; 0x3d
        _adc_isr_full_code(adcp);
  200cde:	686d      	ldr	r5, [r5, #4]
  adcp->adc->CR2 = ADC_CR2_ADON;
  200ce0:	2601      	movs	r6, #1
  dmaStreamDisable(adcp->dmastp);
  200ce2:	6840      	ldr	r0, [r0, #4]
  200ce4:	4091      	lsls	r1, r2
  adcp->adc->CR1 = 0;
  200ce6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  200ce8:	6001      	str	r1, [r0, #0]
  adcp->adc->CR1 = 0;
  200cea:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  200cec:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  200cee:	6096      	str	r6, [r2, #8]
        _adc_isr_full_code(adcp);
  200cf0:	b1ad      	cbz	r5, 200d1e <adc_lld_serve_rx_interrupt.lto_priv.33+0x10e>
  200cf2:	2304      	movs	r3, #4
  200cf4:	68e2      	ldr	r2, [r4, #12]
  200cf6:	68a1      	ldr	r1, [r4, #8]
  200cf8:	4620      	mov	r0, r4
  200cfa:	7023      	strb	r3, [r4, #0]
  200cfc:	47a8      	blx	r5
  200cfe:	7823      	ldrb	r3, [r4, #0]
  200d00:	2b04      	cmp	r3, #4
  200d02:	d00c      	beq.n	200d1e <adc_lld_serve_rx_interrupt.lto_priv.33+0x10e>
  200d04:	2320      	movs	r3, #32
  200d06:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  200d0a:	6963      	ldr	r3, [r4, #20]
  200d0c:	2b00      	cmp	r3, #0
  200d0e:	d0b2      	beq.n	200c76 <adc_lld_serve_rx_interrupt.lto_priv.33+0x66>
    *trp = NULL;
  200d10:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  200d12:	4618      	mov	r0, r3
    *trp = NULL;
  200d14:	6162      	str	r2, [r4, #20]
    tp->u.rdymsg = msg;
  200d16:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
  200d18:	f7ff ff62 	bl	200be0 <chSchReadyI>
  200d1c:	e7ab      	b.n	200c76 <adc_lld_serve_rx_interrupt.lto_priv.33+0x66>
  200d1e:	2202      	movs	r2, #2
  200d20:	2300      	movs	r3, #0
  200d22:	7022      	strb	r2, [r4, #0]
  200d24:	6123      	str	r3, [r4, #16]
  200d26:	e7ed      	b.n	200d04 <adc_lld_serve_rx_interrupt.lto_priv.33+0xf4>
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  200d28:	2302      	movs	r3, #2
  200d2a:	7023      	strb	r3, [r4, #0]
  200d2c:	e794      	b.n	200c58 <adc_lld_serve_rx_interrupt.lto_priv.33+0x48>
        _adc_isr_full_code(adcp);
  200d2e:	6881      	ldr	r1, [r0, #8]
}
  200d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
  200d34:	4718      	bx	r3
  200d36:	bf00      	nop
	...

00200d40 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  200d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  200d42:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  200d44:	42a0      	cmp	r0, r4
  200d46:	d022      	beq.n	200d8e <chEvtBroadcastFlagsI+0x4e>
  200d48:	460d      	mov	r5, r1
  200d4a:	4607      	mov	r7, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  200d4c:	2600      	movs	r6, #0
  200d4e:	e002      	b.n	200d56 <chEvtBroadcastFlagsI+0x16>
    elp = elp->next;
  200d50:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  200d52:	42a7      	cmp	r7, r4
  200d54:	d01b      	beq.n	200d8e <chEvtBroadcastFlagsI+0x4e>
    elp->flags |= flags;
  200d56:	68e3      	ldr	r3, [r4, #12]
  200d58:	432b      	orrs	r3, r5
  200d5a:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  200d5c:	b115      	cbz	r5, 200d64 <chEvtBroadcastFlagsI+0x24>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  200d5e:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  200d60:	4213      	tst	r3, r2
  200d62:	d0f5      	beq.n	200d50 <chEvtBroadcastFlagsI+0x10>
      chEvtSignalI(elp->listener, elp->events);
  200d64:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  200d66:	68a3      	ldr	r3, [r4, #8]
  200d68:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  200d6a:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  200d6e:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  200d70:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  200d72:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  200d74:	d00c      	beq.n	200d90 <chEvtBroadcastFlagsI+0x50>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  200d76:	2a0b      	cmp	r2, #11
  200d78:	d1ea      	bne.n	200d50 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  200d7a:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  200d7c:	ea32 0303 	bics.w	r3, r2, r3
  200d80:	d1e6      	bne.n	200d50 <chEvtBroadcastFlagsI+0x10>
    tp->u.rdymsg = MSG_OK;
  200d82:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  200d84:	f7ff ff2c 	bl	200be0 <chSchReadyI>
    elp = elp->next;
  200d88:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  200d8a:	42a7      	cmp	r7, r4
  200d8c:	d1e3      	bne.n	200d56 <chEvtBroadcastFlagsI+0x16>
  200d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  200d90:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  200d92:	4213      	tst	r3, r2
  200d94:	d0dc      	beq.n	200d50 <chEvtBroadcastFlagsI+0x10>
    tp->u.rdymsg = MSG_OK;
  200d96:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  200d98:	f7ff ff22 	bl	200be0 <chSchReadyI>
  200d9c:	e7f4      	b.n	200d88 <chEvtBroadcastFlagsI+0x48>
  200d9e:	bf00      	nop

00200da0 <_idle_thread.lto_priv.44>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
  200da0:	e7fe      	b.n	200da0 <_idle_thread.lto_priv.44>
  200da2:	bf00      	nop
	...

00200db0 <chSchGoSleepS>:
  thread_t *otp = currp;
  200db0:	4b08      	ldr	r3, [pc, #32]	; (200dd4 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  200db2:	681a      	ldr	r2, [r3, #0]
  200db4:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  200db6:	b430      	push	{r4, r5}
  otp->state = newstate;
  200db8:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  200dbc:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  200dbe:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  200dc0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  200dc2:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  200dc4:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  200dc6:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  200dca:	619a      	str	r2, [r3, #24]
}
  200dcc:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  200dce:	f7ff ba81 	b.w	2002d4 <_port_switch>
  200dd2:	bf00      	nop
  200dd4:	20000920 	.word	0x20000920
	...

00200de0 <serve_interrupt.lto_priv.45>:
static void serve_interrupt(SerialDriver *sdp) {
  200de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  200de4:	6d46      	ldr	r6, [r0, #84]	; 0x54
static void serve_interrupt(SerialDriver *sdp) {
  200de6:	4604      	mov	r4, r0
  uint32_t cr1 = u->CR1;
  200de8:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  200dea:	69f5      	ldr	r5, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  200dec:	072a      	lsls	r2, r5, #28
  u->ICR = isr;
  200dee:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  200df0:	d154      	bne.n	200e9c <serve_interrupt.lto_priv.45+0xbc>
  if (isr & USART_ISR_LBDF) {
  200df2:	05eb      	lsls	r3, r5, #23
  200df4:	d446      	bmi.n	200e84 <serve_interrupt.lto_priv.45+0xa4>
  if (isr & USART_ISR_RXNE) {
  200df6:	06a8      	lsls	r0, r5, #26
  200df8:	d417      	bmi.n	200e2a <serve_interrupt.lto_priv.45+0x4a>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  200dfa:	0639      	lsls	r1, r7, #24
  200dfc:	d501      	bpl.n	200e02 <serve_interrupt.lto_priv.45+0x22>
  200dfe:	062a      	lsls	r2, r5, #24
  200e00:	d468      	bmi.n	200ed4 <serve_interrupt.lto_priv.45+0xf4>
  if (isr & USART_ISR_TC) {
  200e02:	066b      	lsls	r3, r5, #25
  200e04:	d50f      	bpl.n	200e26 <serve_interrupt.lto_priv.45+0x46>
  200e06:	2320      	movs	r3, #32
  200e08:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  200e0c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  200e0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  200e10:	429a      	cmp	r2, r3
  200e12:	f000 8089 	beq.w	200f28 <serve_interrupt.lto_priv.45+0x148>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  200e16:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  200e1a:	2300      	movs	r3, #0
  200e1c:	6037      	str	r7, [r6, #0]
  200e1e:	f383 8811 	msr	BASEPRI, r3
  200e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  200e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  200e2a:	2320      	movs	r3, #32
  200e2c:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  200e30:	6a72      	ldr	r2, [r6, #36]	; 0x24
  200e32:	f894 805c 	ldrb.w	r8, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  200e36:	6963      	ldr	r3, [r4, #20]
  200e38:	ea08 0802 	and.w	r8, r8, r2
  200e3c:	2b00      	cmp	r3, #0
  200e3e:	d07c      	beq.n	200f3a <serve_interrupt.lto_priv.45+0x15a>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
  200e40:	6a23      	ldr	r3, [r4, #32]
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
  200e42:	f104 010c 	add.w	r1, r4, #12
  200e46:	6a62      	ldr	r2, [r4, #36]	; 0x24
  200e48:	4293      	cmp	r3, r2
  200e4a:	d07b      	beq.n	200f44 <serve_interrupt.lto_priv.45+0x164>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
  200e4c:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  200e4e:	1c58      	adds	r0, r3, #1
  iqp->q_counter++;
  200e50:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  200e52:	6220      	str	r0, [r4, #32]
  iqp->q_counter++;
  200e54:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  200e56:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  200e5a:	6a22      	ldr	r2, [r4, #32]
  200e5c:	69e3      	ldr	r3, [r4, #28]
  200e5e:	429a      	cmp	r2, r3
  200e60:	d25f      	bcs.n	200f22 <serve_interrupt.lto_priv.45+0x142>
  return (bool)(tqp->next != (const thread_t *)tqp);
  200e62:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  200e64:	4299      	cmp	r1, r3
  200e66:	d009      	beq.n	200e7c <serve_interrupt.lto_priv.45+0x9c>
  tqp->next             = tp->queue.next;
  200e68:	681a      	ldr	r2, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  200e6a:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  200e6e:	4618      	mov	r0, r3
  200e70:	60e2      	str	r2, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  200e72:	6051      	str	r1, [r2, #4]
  tp->u.rdymsg = msg;
  200e74:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  200e78:	f7ff feb2 	bl	200be0 <chSchReadyI>
  200e7c:	2300      	movs	r3, #0
  200e7e:	f383 8811 	msr	BASEPRI, r3
  200e82:	e7ba      	b.n	200dfa <serve_interrupt.lto_priv.45+0x1a>
  200e84:	2320      	movs	r3, #32
  200e86:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  200e8a:	f44f 7100 	mov.w	r1, #512	; 0x200
  200e8e:	1d20      	adds	r0, r4, #4
  200e90:	f7ff ff56 	bl	200d40 <chEvtBroadcastFlagsI>
  200e94:	2300      	movs	r3, #0
  200e96:	f383 8811 	msr	BASEPRI, r3
  200e9a:	e7ac      	b.n	200df6 <serve_interrupt.lto_priv.45+0x16>
    sts |= SD_OVERRUN_ERROR;
  200e9c:	f015 0f08 	tst.w	r5, #8
  200ea0:	bf0c      	ite	eq
  200ea2:	2100      	moveq	r1, #0
  200ea4:	2180      	movne	r1, #128	; 0x80
  if (isr & USART_ISR_PE)
  200ea6:	07eb      	lsls	r3, r5, #31
  200ea8:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  200eac:	bf48      	it	mi
  200eae:	f041 0120 	orrmi.w	r1, r1, #32
  if (isr & USART_ISR_FE)
  200eb2:	07a8      	lsls	r0, r5, #30
    sts |= SD_FRAMING_ERROR;
  200eb4:	bf48      	it	mi
  200eb6:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (isr & USART_ISR_NE)
  200eba:	076a      	lsls	r2, r5, #29
    sts |= SD_NOISE_ERROR;
  200ebc:	bf48      	it	mi
  200ebe:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  200ec2:	f383 8811 	msr	BASEPRI, r3
  200ec6:	1d20      	adds	r0, r4, #4
  200ec8:	f7ff ff3a 	bl	200d40 <chEvtBroadcastFlagsI>
  200ecc:	2300      	movs	r3, #0
  200ece:	f383 8811 	msr	BASEPRI, r3
  200ed2:	e78e      	b.n	200df2 <serve_interrupt.lto_priv.45+0x12>
  200ed4:	2320      	movs	r3, #32
  200ed6:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
  200eda:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b = oqGetI(&sdp->oqueue);
  200edc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  200ee0:	6c62      	ldr	r2, [r4, #68]	; 0x44
  200ee2:	429a      	cmp	r2, r3
  200ee4:	d037      	beq.n	200f56 <serve_interrupt.lto_priv.45+0x176>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  200ee6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  200ee8:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  200eea:	6c21      	ldr	r1, [r4, #64]	; 0x40
  oqp->q_counter++;
  200eec:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  200eee:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  200ef0:	4288      	cmp	r0, r1
  oqp->q_counter++;
  200ef2:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  200ef4:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  200ef8:	d301      	bcc.n	200efe <serve_interrupt.lto_priv.45+0x11e>
    oqp->q_rdptr = oqp->q_buffer;
  200efa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  200efc:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  200efe:	6b23      	ldr	r3, [r4, #48]	; 0x30
  200f00:	459e      	cmp	lr, r3
  200f02:	d008      	beq.n	200f16 <serve_interrupt.lto_priv.45+0x136>
  tqp->next             = tp->queue.next;
  200f04:	681a      	ldr	r2, [r3, #0]
  tp->u.rdymsg = msg;
  200f06:	2100      	movs	r1, #0
  (void) chSchReadyI(tp);
  200f08:	4618      	mov	r0, r3
  200f0a:	6322      	str	r2, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  200f0c:	f8c2 e004 	str.w	lr, [r2, #4]
  tp->u.rdymsg = msg;
  200f10:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  200f12:	f7ff fe65 	bl	200be0 <chSchReadyI>
      u->TDR = b;
  200f16:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  200f1a:	2300      	movs	r3, #0
  200f1c:	f383 8811 	msr	BASEPRI, r3
  200f20:	e76f      	b.n	200e02 <serve_interrupt.lto_priv.45+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  200f22:	69a3      	ldr	r3, [r4, #24]
  200f24:	6223      	str	r3, [r4, #32]
  200f26:	e79c      	b.n	200e62 <serve_interrupt.lto_priv.45+0x82>
    if (oqIsEmptyI(&sdp->oqueue))
  200f28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  200f2a:	2b00      	cmp	r3, #0
  200f2c:	f43f af73 	beq.w	200e16 <serve_interrupt.lto_priv.45+0x36>
  200f30:	1d20      	adds	r0, r4, #4
  200f32:	2110      	movs	r1, #16
  200f34:	f7ff ff04 	bl	200d40 <chEvtBroadcastFlagsI>
  200f38:	e76d      	b.n	200e16 <serve_interrupt.lto_priv.45+0x36>
  200f3a:	2104      	movs	r1, #4
  200f3c:	1860      	adds	r0, r4, r1
  200f3e:	f7ff feff 	bl	200d40 <chEvtBroadcastFlagsI>
  200f42:	e77d      	b.n	200e40 <serve_interrupt.lto_priv.45+0x60>
  if (iqIsFullI(iqp)) {
  200f44:	6962      	ldr	r2, [r4, #20]
  200f46:	2a00      	cmp	r2, #0
  200f48:	d080      	beq.n	200e4c <serve_interrupt.lto_priv.45+0x6c>
  200f4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  200f4e:	1d20      	adds	r0, r4, #4
  200f50:	f7ff fef6 	bl	200d40 <chEvtBroadcastFlagsI>
  200f54:	e792      	b.n	200e7c <serve_interrupt.lto_priv.45+0x9c>
  if (oqIsEmptyI(oqp)) {
  200f56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  200f58:	2a00      	cmp	r2, #0
  200f5a:	d0c4      	beq.n	200ee6 <serve_interrupt.lto_priv.45+0x106>
  200f5c:	2108      	movs	r1, #8
  200f5e:	1d20      	adds	r0, r4, #4
  200f60:	f7ff feee 	bl	200d40 <chEvtBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  200f64:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  200f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  200f6c:	6033      	str	r3, [r6, #0]
  200f6e:	e7d4      	b.n	200f1a <serve_interrupt.lto_priv.45+0x13a>

00200f70 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
  200f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  200f74:	f002 0903 	and.w	r9, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  200f78:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  200f7c:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  200f80:	f3c2 1e41 	ubfx	lr, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  200f84:	2600      	movs	r6, #0
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  200f86:	464f      	mov	r7, r9
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  200f88:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  200f8c:	f04f 0a0f 	mov.w	sl, #15
  200f90:	e00e      	b.n	200fb0 <_pal_lld_setgroupmode+0x40>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  200f92:	6a03      	ldr	r3, [r0, #32]
  200f94:	ea23 0404 	bic.w	r4, r3, r4
  200f98:	4325      	orrs	r5, r4
  200f9a:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  200f9c:	0849      	lsrs	r1, r1, #1
  200f9e:	d047      	beq.n	201030 <_pal_lld_setgroupmode+0xc0>
      return;
    otyper <<= 1;
  200fa0:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  200fa4:	3601      	adds	r6, #1
    ospeedr <<= 2;
  200fa6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
  200faa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
  200fae:	00bf      	lsls	r7, r7, #2
    if ((mask & 1) != 0) {
  200fb0:	07cb      	lsls	r3, r1, #31
  200fb2:	d5f3      	bpl.n	200f9c <_pal_lld_setgroupmode+0x2c>
      m1 = 1 << bit;
  200fb4:	2301      	movs	r3, #1
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  200fb6:	6845      	ldr	r5, [r0, #4]
      altrmask = altr << ((bit & 7) * 4);
  200fb8:	f006 0407 	and.w	r4, r6, #7
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  200fbc:	f1b9 0f02 	cmp.w	r9, #2
      m1 = 1 << bit;
  200fc0:	fa03 fb06 	lsl.w	fp, r3, r6
      m2 = 3 << (bit * 2);
  200fc4:	fa06 f303 	lsl.w	r3, r6, r3
      altrmask = altr << ((bit & 7) * 4);
  200fc8:	ea4f 0484 	mov.w	r4, r4, lsl #2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  200fcc:	ea25 0b0b 	bic.w	fp, r5, fp
      m2 = 3 << (bit * 2);
  200fd0:	f04f 0503 	mov.w	r5, #3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  200fd4:	ea4b 0b08 	orr.w	fp, fp, r8
      m2 = 3 << (bit * 2);
  200fd8:	fa05 f303 	lsl.w	r3, r5, r3
      altrmask = altr << ((bit & 7) * 4);
  200fdc:	fa02 f504 	lsl.w	r5, r2, r4
      m4 = 15 << ((bit & 7) * 4);
  200fe0:	fa0a f404 	lsl.w	r4, sl, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  200fe4:	f8c0 b004 	str.w	fp, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  200fe8:	ea6f 0303 	mvn.w	r3, r3
  200fec:	f8d0 b008 	ldr.w	fp, [r0, #8]
  200ff0:	ea0b 0b03 	and.w	fp, fp, r3
  200ff4:	ea4b 0b0c 	orr.w	fp, fp, ip
  200ff8:	f8c0 b008 	str.w	fp, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  200ffc:	f8d0 b00c 	ldr.w	fp, [r0, #12]
  201000:	ea03 0b0b 	and.w	fp, r3, fp
  201004:	ea4b 0b0e 	orr.w	fp, fp, lr
  201008:	f8c0 b00c 	str.w	fp, [r0, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  20100c:	d012      	beq.n	201034 <_pal_lld_setgroupmode+0xc4>
        port->MODER   = (port->MODER & ~m2) | moder;
  20100e:	f8d0 b000 	ldr.w	fp, [r0]
        if (bit < 8)
  201012:	2e07      	cmp	r6, #7
        port->MODER   = (port->MODER & ~m2) | moder;
  201014:	ea03 030b 	and.w	r3, r3, fp
  201018:	ea43 0307 	orr.w	r3, r3, r7
  20101c:	6003      	str	r3, [r0, #0]
        if (bit < 8)
  20101e:	d9b8      	bls.n	200f92 <_pal_lld_setgroupmode+0x22>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  201020:	6a43      	ldr	r3, [r0, #36]	; 0x24
    if (!mask)
  201022:	0849      	lsrs	r1, r1, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  201024:	ea23 0404 	bic.w	r4, r3, r4
  201028:	ea45 0504 	orr.w	r5, r5, r4
  20102c:	6245      	str	r5, [r0, #36]	; 0x24
    if (!mask)
  20102e:	d1b7      	bne.n	200fa0 <_pal_lld_setgroupmode+0x30>
  201030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bit < 8)
  201034:	2e07      	cmp	r6, #7
  201036:	d80a      	bhi.n	20104e <_pal_lld_setgroupmode+0xde>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  201038:	f8d0 b020 	ldr.w	fp, [r0, #32]
  20103c:	ea2b 0404 	bic.w	r4, fp, r4
  201040:	4325      	orrs	r5, r4
  201042:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
  201044:	6804      	ldr	r4, [r0, #0]
  201046:	4023      	ands	r3, r4
  201048:	433b      	orrs	r3, r7
  20104a:	6003      	str	r3, [r0, #0]
  20104c:	e7a6      	b.n	200f9c <_pal_lld_setgroupmode+0x2c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  20104e:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
  201052:	ea2b 0404 	bic.w	r4, fp, r4
  201056:	4325      	orrs	r5, r4
  201058:	6245      	str	r5, [r0, #36]	; 0x24
  20105a:	e7f3      	b.n	201044 <_pal_lld_setgroupmode+0xd4>
  20105c:	0000      	movs	r0, r0
	...

00201060 <_port_irq_epilogue>:
  201060:	2320      	movs	r3, #32
  201062:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  201066:	4b11      	ldr	r3, [pc, #68]	; (2010ac <_port_irq_epilogue+0x4c>)
  201068:	685b      	ldr	r3, [r3, #4]
  20106a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  20106e:	d102      	bne.n	201076 <_port_irq_epilogue+0x16>
  201070:	f383 8811 	msr	BASEPRI, r3
  201074:	4770      	bx	lr
void _port_irq_epilogue(void) {
  201076:	b480      	push	{r7}
  201078:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  20107a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  20107e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  201082:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  201086:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  20108a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  20108e:	4a08      	ldr	r2, [pc, #32]	; (2010b0 <_port_irq_epilogue+0x50>)
  201090:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  201092:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  201094:	6889      	ldr	r1, [r1, #8]
  201096:	6892      	ldr	r2, [r2, #8]
  201098:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  20109a:	bf8c      	ite	hi
  20109c:	4a05      	ldrhi	r2, [pc, #20]	; (2010b4 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  20109e:	4a06      	ldrls	r2, [pc, #24]	; (2010b8 <_port_irq_epilogue+0x58>)
  2010a0:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  2010a4:	46bd      	mov	sp, r7
  2010a6:	bc80      	pop	{r7}
  2010a8:	4770      	bx	lr
  2010aa:	bf00      	nop
  2010ac:	e000ed00 	.word	0xe000ed00
  2010b0:	20000920 	.word	0x20000920
  2010b4:	002002f5 	.word	0x002002f5
  2010b8:	002002f8 	.word	0x002002f8
  2010bc:	00000000 	.word	0x00000000

002010c0 <Vector188>:
/**
 * @brief   UART7 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
  2010c0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD7);
  2010c2:	4803      	ldr	r0, [pc, #12]	; (2010d0 <Vector188+0x10>)
  2010c4:	f7ff fe8c 	bl	200de0 <serve_interrupt.lto_priv.45>

  OSAL_IRQ_EPILOGUE();
}
  2010c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2010cc:	f7ff bfc8 	b.w	201060 <_port_irq_epilogue>
  2010d0:	20000860 	.word	0x20000860
	...

002010e0 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
  2010e0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
  2010e2:	4d17      	ldr	r5, [pc, #92]	; (201140 <VectorB4+0x60>)
  2010e4:	69ab      	ldr	r3, [r5, #24]
  2010e6:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  2010e8:	68da      	ldr	r2, [r3, #12]
  2010ea:	4014      	ands	r4, r2
  2010ec:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
  2010ee:	43d2      	mvns	r2, r2
  2010f0:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  2010f2:	07a3      	lsls	r3, r4, #30
  2010f4:	d504      	bpl.n	201100 <VectorB4+0x20>
      (pwmp->config->channels[0].callback != NULL))
  2010f6:	686b      	ldr	r3, [r5, #4]
  2010f8:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  2010fa:	b10b      	cbz	r3, 201100 <VectorB4+0x20>
    pwmp->config->channels[0].callback(pwmp);
  2010fc:	4628      	mov	r0, r5
  2010fe:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  201100:	0760      	lsls	r0, r4, #29
  201102:	d504      	bpl.n	20110e <VectorB4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
  201104:	686b      	ldr	r3, [r5, #4]
  201106:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  201108:	b10b      	cbz	r3, 20110e <VectorB4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
  20110a:	480d      	ldr	r0, [pc, #52]	; (201140 <VectorB4+0x60>)
  20110c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  20110e:	0721      	lsls	r1, r4, #28
  201110:	d504      	bpl.n	20111c <VectorB4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
  201112:	686b      	ldr	r3, [r5, #4]
  201114:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  201116:	b10b      	cbz	r3, 20111c <VectorB4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
  201118:	4809      	ldr	r0, [pc, #36]	; (201140 <VectorB4+0x60>)
  20111a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  20111c:	06e2      	lsls	r2, r4, #27
  20111e:	d504      	bpl.n	20112a <VectorB4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
  201120:	686b      	ldr	r3, [r5, #4]
  201122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  201124:	b10b      	cbz	r3, 20112a <VectorB4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
  201126:	4806      	ldr	r0, [pc, #24]	; (201140 <VectorB4+0x60>)
  201128:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
  20112a:	07e3      	lsls	r3, r4, #31
  20112c:	d504      	bpl.n	201138 <VectorB4+0x58>
  20112e:	686b      	ldr	r3, [r5, #4]
  201130:	689b      	ldr	r3, [r3, #8]
  201132:	b10b      	cbz	r3, 201138 <VectorB4+0x58>
    pwmp->config->callback(pwmp);
  201134:	4802      	ldr	r0, [pc, #8]	; (201140 <VectorB4+0x60>)
  201136:	4798      	blx	r3
}
  201138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
  20113c:	f7ff bf90 	b.w	201060 <_port_irq_epilogue>
  201140:	20000844 	.word	0x20000844
	...

00201150 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
  201150:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  201152:	4b0b      	ldr	r3, [pc, #44]	; (201180 <VectorB8+0x30>)
  201154:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  201156:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  201158:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  20115a:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  20115c:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  20115e:	d107      	bne.n	201170 <VectorB8+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  201160:	2002      	movs	r0, #2
  201162:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  201164:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  201166:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  201168:	68d1      	ldr	r1, [r2, #12]
  20116a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  20116e:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  201170:	685b      	ldr	r3, [r3, #4]
  201172:	4803      	ldr	r0, [pc, #12]	; (201180 <VectorB8+0x30>)
  201174:	685b      	ldr	r3, [r3, #4]
  201176:	4798      	blx	r3
}
  201178:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20117c:	f7ff bf70 	b.w	201060 <_port_irq_epilogue>
  201180:	20000834 	.word	0x20000834
	...

00201190 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
  201190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201192:	2720      	movs	r7, #32
  201194:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  201198:	4d12      	ldr	r5, [pc, #72]	; (2011e4 <SysTick_Handler+0x54>)
  20119a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20119c:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  20119e:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  2011a0:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  2011a4:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  2011a6:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  2011a8:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  2011aa:	d013      	beq.n	2011d4 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  2011ac:	891c      	ldrh	r4, [r3, #8]
  2011ae:	3c01      	subs	r4, #1
  2011b0:	b2a4      	uxth	r4, r4
  2011b2:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  2011b4:	b974      	cbnz	r4, 2011d4 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  2011b6:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  2011b8:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  2011ba:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  2011bc:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  2011be:	61ea      	str	r2, [r5, #28]
  2011c0:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  2011c4:	6918      	ldr	r0, [r3, #16]
  2011c6:	4788      	blx	r1
  2011c8:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  2011cc:	69eb      	ldr	r3, [r5, #28]
  2011ce:	891a      	ldrh	r2, [r3, #8]
  2011d0:	2a00      	cmp	r2, #0
  2011d2:	d0f0      	beq.n	2011b6 <SysTick_Handler+0x26>
  2011d4:	2300      	movs	r3, #0
  2011d6:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
  2011da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  2011de:	f7ff bf3f 	b.w	201060 <_port_irq_epilogue>
  2011e2:	bf00      	nop
  2011e4:	20000920 	.word	0x20000920
	...

002011f0 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2011f0:	4b08      	ldr	r3, [pc, #32]	; (201214 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
  2011f2:	4809      	ldr	r0, [pc, #36]	; (201218 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2011f4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
  2011f6:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2011f8:	0d89      	lsrs	r1, r1, #22
  2011fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  2011fe:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
  201200:	058c      	lsls	r4, r1, #22
  201202:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
  201204:	b10a      	cbz	r2, 20120a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
  201206:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  201208:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
  20120a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20120e:	f7ff bf27 	b.w	201060 <_port_irq_epilogue>
  201212:	bf00      	nop
  201214:	40026400 	.word	0x40026400
  201218:	20000a90 	.word	0x20000a90
  20121c:	00000000 	.word	0x00000000

00201220 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  201220:	4b08      	ldr	r3, [pc, #32]	; (201244 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
  201222:	4809      	ldr	r0, [pc, #36]	; (201248 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  201224:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
  201226:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  201228:	0c09      	lsrs	r1, r1, #16
  20122a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  20122e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
  201230:	040c      	lsls	r4, r1, #16
  201232:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
  201234:	b10a      	cbz	r2, 20123a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
  201236:	6f40      	ldr	r0, [r0, #116]	; 0x74
  201238:	4790      	blx	r2
}
  20123a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20123e:	f7ff bf0f 	b.w	201060 <_port_irq_epilogue>
  201242:	bf00      	nop
  201244:	40026400 	.word	0x40026400
  201248:	20000a90 	.word	0x20000a90
  20124c:	00000000 	.word	0x00000000

00201250 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  201250:	4b08      	ldr	r3, [pc, #32]	; (201274 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
  201252:	4809      	ldr	r0, [pc, #36]	; (201278 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  201254:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
  201256:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  201258:	0989      	lsrs	r1, r1, #6
  20125a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  20125e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
  201260:	018c      	lsls	r4, r1, #6
  201262:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
  201264:	b10a      	cbz	r2, 20126a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
  201266:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  201268:	4790      	blx	r2
}
  20126a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20126e:	f7ff bef7 	b.w	201060 <_port_irq_epilogue>
  201272:	bf00      	nop
  201274:	40026400 	.word	0x40026400
  201278:	20000a90 	.word	0x20000a90
  20127c:	00000000 	.word	0x00000000

00201280 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  201280:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  201282:	4b07      	ldr	r3, [pc, #28]	; (2012a0 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
  201284:	4807      	ldr	r0, [pc, #28]	; (2012a4 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  201286:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
  201288:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20128a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
  20128e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
  201290:	b10a      	cbz	r2, 201296 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
  201292:	6e40      	ldr	r0, [r0, #100]	; 0x64
  201294:	4790      	blx	r2
}
  201296:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20129a:	f7ff bee1 	b.w	201060 <_port_irq_epilogue>
  20129e:	bf00      	nop
  2012a0:	40026400 	.word	0x40026400
  2012a4:	20000a90 	.word	0x20000a90
	...

002012b0 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2012b0:	4b08      	ldr	r3, [pc, #32]	; (2012d4 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
  2012b2:	4809      	ldr	r0, [pc, #36]	; (2012d8 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2012b4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
  2012b6:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2012b8:	0d89      	lsrs	r1, r1, #22
  2012ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  2012be:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
  2012c0:	058c      	lsls	r4, r1, #22
  2012c2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
  2012c4:	b10a      	cbz	r2, 2012ca <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
  2012c6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  2012c8:	4790      	blx	r2
}
  2012ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2012ce:	f7ff bec7 	b.w	201060 <_port_irq_epilogue>
  2012d2:	bf00      	nop
  2012d4:	40026400 	.word	0x40026400
  2012d8:	20000a90 	.word	0x20000a90
  2012dc:	00000000 	.word	0x00000000

002012e0 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2012e0:	4b08      	ldr	r3, [pc, #32]	; (201304 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
  2012e2:	4809      	ldr	r0, [pc, #36]	; (201308 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2012e4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
  2012e6:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2012e8:	0c09      	lsrs	r1, r1, #16
  2012ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  2012ee:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
  2012f0:	040c      	lsls	r4, r1, #16
  2012f2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
  2012f4:	b10a      	cbz	r2, 2012fa <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
  2012f6:	6d40      	ldr	r0, [r0, #84]	; 0x54
  2012f8:	4790      	blx	r2
}
  2012fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2012fe:	f7ff beaf 	b.w	201060 <_port_irq_epilogue>
  201302:	bf00      	nop
  201304:	40026400 	.word	0x40026400
  201308:	20000a90 	.word	0x20000a90
  20130c:	00000000 	.word	0x00000000

00201310 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201310:	4b08      	ldr	r3, [pc, #32]	; (201334 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
  201312:	4809      	ldr	r0, [pc, #36]	; (201338 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201314:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
  201316:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201318:	0989      	lsrs	r1, r1, #6
  20131a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  20131e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
  201320:	018c      	lsls	r4, r1, #6
  201322:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
  201324:	b10a      	cbz	r2, 20132a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
  201326:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  201328:	4790      	blx	r2
}
  20132a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20132e:	f7ff be97 	b.w	201060 <_port_irq_epilogue>
  201332:	bf00      	nop
  201334:	40026400 	.word	0x40026400
  201338:	20000a90 	.word	0x20000a90
  20133c:	00000000 	.word	0x00000000

00201340 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  201340:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  201342:	4b07      	ldr	r3, [pc, #28]	; (201360 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
  201344:	4807      	ldr	r0, [pc, #28]	; (201364 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  201346:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
  201348:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  20134a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
  20134e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
  201350:	b10a      	cbz	r2, 201356 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
  201352:	6c40      	ldr	r0, [r0, #68]	; 0x44
  201354:	4790      	blx	r2
}
  201356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20135a:	f7ff be81 	b.w	201060 <_port_irq_epilogue>
  20135e:	bf00      	nop
  201360:	40026400 	.word	0x40026400
  201364:	20000a90 	.word	0x20000a90
	...

00201370 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201370:	4b08      	ldr	r3, [pc, #32]	; (201394 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
  201372:	4809      	ldr	r0, [pc, #36]	; (201398 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201374:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
  201376:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  201378:	0d89      	lsrs	r1, r1, #22
  20137a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  20137e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
  201380:	058c      	lsls	r4, r1, #22
  201382:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
  201384:	b10a      	cbz	r2, 20138a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
  201386:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  201388:	4790      	blx	r2
}
  20138a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20138e:	f7ff be67 	b.w	201060 <_port_irq_epilogue>
  201392:	bf00      	nop
  201394:	40026000 	.word	0x40026000
  201398:	20000a90 	.word	0x20000a90
  20139c:	00000000 	.word	0x00000000

002013a0 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2013a0:	4b08      	ldr	r3, [pc, #32]	; (2013c4 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
  2013a2:	4809      	ldr	r0, [pc, #36]	; (2013c8 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2013a4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
  2013a6:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2013a8:	0c09      	lsrs	r1, r1, #16
  2013aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  2013ae:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
  2013b0:	040c      	lsls	r4, r1, #16
  2013b2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
  2013b4:	b10a      	cbz	r2, 2013ba <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
  2013b6:	6b40      	ldr	r0, [r0, #52]	; 0x34
  2013b8:	4790      	blx	r2
}
  2013ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2013be:	f7ff be4f 	b.w	201060 <_port_irq_epilogue>
  2013c2:	bf00      	nop
  2013c4:	40026000 	.word	0x40026000
  2013c8:	20000a90 	.word	0x20000a90
  2013cc:	00000000 	.word	0x00000000

002013d0 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2013d0:	4b08      	ldr	r3, [pc, #32]	; (2013f4 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
  2013d2:	4809      	ldr	r0, [pc, #36]	; (2013f8 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2013d4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
  2013d6:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2013d8:	0989      	lsrs	r1, r1, #6
  2013da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  2013de:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
  2013e0:	018c      	lsls	r4, r1, #6
  2013e2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
  2013e4:	b10a      	cbz	r2, 2013ea <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
  2013e6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  2013e8:	4790      	blx	r2
}
  2013ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2013ee:	f7ff be37 	b.w	201060 <_port_irq_epilogue>
  2013f2:	bf00      	nop
  2013f4:	40026000 	.word	0x40026000
  2013f8:	20000a90 	.word	0x20000a90
  2013fc:	00000000 	.word	0x00000000

00201400 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  201400:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  201402:	4b07      	ldr	r3, [pc, #28]	; (201420 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
  201404:	4807      	ldr	r0, [pc, #28]	; (201424 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  201406:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
  201408:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20140a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
  20140e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
  201410:	b10a      	cbz	r2, 201416 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
  201412:	6a40      	ldr	r0, [r0, #36]	; 0x24
  201414:	4790      	blx	r2
}
  201416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20141a:	f7ff be21 	b.w	201060 <_port_irq_epilogue>
  20141e:	bf00      	nop
  201420:	40026000 	.word	0x40026000
  201424:	20000a90 	.word	0x20000a90
	...

00201430 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  201430:	4b08      	ldr	r3, [pc, #32]	; (201454 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
  201432:	4809      	ldr	r0, [pc, #36]	; (201458 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  201434:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
  201436:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  201438:	0d89      	lsrs	r1, r1, #22
  20143a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  20143e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
  201440:	058c      	lsls	r4, r1, #22
  201442:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
  201444:	b10a      	cbz	r2, 20144a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
  201446:	69c0      	ldr	r0, [r0, #28]
  201448:	4790      	blx	r2
}
  20144a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20144e:	f7ff be07 	b.w	201060 <_port_irq_epilogue>
  201452:	bf00      	nop
  201454:	40026000 	.word	0x40026000
  201458:	20000a90 	.word	0x20000a90
  20145c:	00000000 	.word	0x00000000

00201460 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201460:	4b08      	ldr	r3, [pc, #32]	; (201484 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
  201462:	4809      	ldr	r0, [pc, #36]	; (201488 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201464:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
  201466:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  201468:	0c09      	lsrs	r1, r1, #16
  20146a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  20146e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
  201470:	040c      	lsls	r4, r1, #16
  201472:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
  201474:	b10a      	cbz	r2, 20147a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
  201476:	6940      	ldr	r0, [r0, #20]
  201478:	4790      	blx	r2
}
  20147a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20147e:	f7ff bdef 	b.w	201060 <_port_irq_epilogue>
  201482:	bf00      	nop
  201484:	40026000 	.word	0x40026000
  201488:	20000a90 	.word	0x20000a90
  20148c:	00000000 	.word	0x00000000

00201490 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201490:	4b08      	ldr	r3, [pc, #32]	; (2014b4 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
  201492:	4809      	ldr	r0, [pc, #36]	; (2014b8 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201494:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
  201496:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  201498:	0989      	lsrs	r1, r1, #6
  20149a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  20149e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
  2014a0:	018c      	lsls	r4, r1, #6
  2014a2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
  2014a4:	b10a      	cbz	r2, 2014aa <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
  2014a6:	68c0      	ldr	r0, [r0, #12]
  2014a8:	4790      	blx	r2
}
  2014aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2014ae:	f7ff bdd7 	b.w	201060 <_port_irq_epilogue>
  2014b2:	bf00      	nop
  2014b4:	40026000 	.word	0x40026000
  2014b8:	20000a90 	.word	0x20000a90
  2014bc:	00000000 	.word	0x00000000

002014c0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  2014c0:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2014c2:	4b07      	ldr	r3, [pc, #28]	; (2014e0 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
  2014c4:	4a07      	ldr	r2, [pc, #28]	; (2014e4 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2014c6:	6819      	ldr	r1, [r3, #0]
  2014c8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
  2014cc:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
  2014ce:	6813      	ldr	r3, [r2, #0]
  2014d0:	b10b      	cbz	r3, 2014d6 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
  2014d2:	6850      	ldr	r0, [r2, #4]
  2014d4:	4798      	blx	r3
}
  2014d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2014da:	f7ff bdc1 	b.w	201060 <_port_irq_epilogue>
  2014de:	bf00      	nop
  2014e0:	40026000 	.word	0x40026000
  2014e4:	20000a90 	.word	0x20000a90
	...

002014f0 <Vector88>:
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
  2014f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sr = ADC1->SR;
  2014f2:	4b23      	ldr	r3, [pc, #140]	; (201580 <Vector88+0x90>)
  ADC1->SR = 0;
  2014f4:	2100      	movs	r1, #0
  sr = ADC1->SR;
  2014f6:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
  2014f8:	6019      	str	r1, [r3, #0]
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
  2014fa:	0693      	lsls	r3, r2, #26
  2014fc:	d535      	bpl.n	20156a <Vector88+0x7a>
  2014fe:	4c21      	ldr	r4, [pc, #132]	; (201584 <Vector88+0x94>)
  201500:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  201502:	6802      	ldr	r2, [r0, #0]
  201504:	6853      	ldr	r3, [r2, #4]
  201506:	2b00      	cmp	r3, #0
  201508:	d02f      	beq.n	20156a <Vector88+0x7a>
    if (ADCD1.grpp != NULL)
  20150a:	6921      	ldr	r1, [r4, #16]
  20150c:	b369      	cbz	r1, 20156a <Vector88+0x7a>
  dmaStreamDisable(adcp->dmastp);
  20150e:	6813      	ldr	r3, [r2, #0]
  201510:	f023 031f 	bic.w	r3, r3, #31
  201514:	6013      	str	r3, [r2, #0]
  201516:	6813      	ldr	r3, [r2, #0]
  201518:	f013 0301 	ands.w	r3, r3, #1
  20151c:	d1fb      	bne.n	201516 <Vector88+0x26>
  20151e:	7a07      	ldrb	r7, [r0, #8]
  201520:	223d      	movs	r2, #61	; 0x3d
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201522:	688d      	ldr	r5, [r1, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  201524:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
  201526:	6846      	ldr	r6, [r0, #4]
  201528:	fa02 f707 	lsl.w	r7, r2, r7
  adcp->adc->CR1 = 0;
  20152c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  20152e:	6037      	str	r7, [r6, #0]
  adcp->adc->CR1 = 0;
  201530:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  201532:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  201534:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201536:	b1fd      	cbz	r5, 201578 <Vector88+0x88>
  201538:	2305      	movs	r3, #5
  20153a:	4812      	ldr	r0, [pc, #72]	; (201584 <Vector88+0x94>)
  20153c:	7023      	strb	r3, [r4, #0]
  20153e:	47a8      	blx	r5
  201540:	7823      	ldrb	r3, [r4, #0]
  201542:	2b05      	cmp	r3, #5
  201544:	d015      	beq.n	201572 <Vector88+0x82>
  201546:	2300      	movs	r3, #0
  201548:	6123      	str	r3, [r4, #16]
  20154a:	2320      	movs	r3, #32
  20154c:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  201550:	6963      	ldr	r3, [r4, #20]
  201552:	b13b      	cbz	r3, 201564 <Vector88+0x74>
    tp->u.rdymsg = msg;
  201554:	f04f 31ff 	mov.w	r1, #4294967295
    *trp = NULL;
  201558:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  20155a:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
  20155c:	6259      	str	r1, [r3, #36]	; 0x24
    *trp = NULL;
  20155e:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
  201560:	f7ff fb3e 	bl	200be0 <chSchReadyI>
  201564:	2300      	movs	r3, #0
  201566:	f383 8811 	msr	BASEPRI, r3
}
  20156a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  20156e:	f7ff bd77 	b.w	201060 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201572:	2302      	movs	r3, #2
  201574:	7023      	strb	r3, [r4, #0]
  201576:	e7e6      	b.n	201546 <Vector88+0x56>
  201578:	2302      	movs	r3, #2
  20157a:	6125      	str	r5, [r4, #16]
  20157c:	7023      	strb	r3, [r4, #0]
  20157e:	e7e4      	b.n	20154a <Vector88+0x5a>
  201580:	40012000 	.word	0x40012000
  201584:	20000800 	.word	0x20000800
	...

00201590 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  201590:	4b0e      	ldr	r3, [pc, #56]	; (2015cc <chTMStopMeasurementX+0x3c>)
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  201592:	6882      	ldr	r2, [r0, #8]
  201594:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  201596:	490e      	ldr	r1, [pc, #56]	; (2015d0 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  201598:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  20159a:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  20159c:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  20159e:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  2015a0:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  2015a2:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  2015a4:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  2015a6:	6083      	str	r3, [r0, #8]
  tmp->n++;
  2015a8:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  2015aa:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  2015ae:	18e4      	adds	r4, r4, r3
  2015b0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  2015b4:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  2015b6:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  2015b8:	bf88      	it	hi
  2015ba:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  2015bc:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  2015be:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  2015c2:	bf38      	it	cc
  2015c4:	6003      	strcc	r3, [r0, #0]
}
  2015c6:	bc30      	pop	{r4, r5}
  2015c8:	4770      	bx	lr
  2015ca:	bf00      	nop
  2015cc:	e0001000 	.word	0xe0001000
  2015d0:	20000920 	.word	0x20000920
	...

002015e0 <chThdExit>:
void chThdExit(msg_t msg) {
  2015e0:	b538      	push	{r3, r4, r5, lr}
  2015e2:	2220      	movs	r2, #32
  2015e4:	4603      	mov	r3, r0
  2015e6:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  2015ea:	4a10      	ldr	r2, [pc, #64]	; (20162c <chThdExit+0x4c>)
  2015ec:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  2015ee:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  2015f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  2015f4:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  2015f6:	4285      	cmp	r5, r0
  2015f8:	d006      	beq.n	201608 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  2015fa:	6803      	ldr	r3, [r0, #0]
  2015fc:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  2015fe:	f7ff faef 	bl	200be0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  201602:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  201604:	42a8      	cmp	r0, r5
  201606:	d1f8      	bne.n	2015fa <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  201608:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  20160c:	b943      	cbnz	r3, 201620 <chThdExit+0x40>
  20160e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  201612:	079b      	lsls	r3, r3, #30
  201614:	d104      	bne.n	201620 <chThdExit+0x40>
    REG_REMOVE(tp);
  201616:	6922      	ldr	r2, [r4, #16]
  201618:	6963      	ldr	r3, [r4, #20]
  20161a:	611a      	str	r2, [r3, #16]
  20161c:	6922      	ldr	r2, [r4, #16]
  20161e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  201620:	200f      	movs	r0, #15
}
  201622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  201626:	f7ff bbc3 	b.w	200db0 <chSchGoSleepS>
  20162a:	bf00      	nop
  20162c:	20000920 	.word	0x20000920

00201630 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  201630:	4a0e      	ldr	r2, [pc, #56]	; (20166c <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  201632:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  201634:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  201636:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  201638:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  20163a:	2500      	movs	r5, #0
  thread_t *otp = currp;
  20163c:	6994      	ldr	r4, [r2, #24]
  20163e:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  201640:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  201642:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  201646:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  20164a:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  20164c:	6190      	str	r0, [r2, #24]
  20164e:	e000      	b.n	201652 <chSchDoReschedule+0x22>
  201650:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  201652:	689a      	ldr	r2, [r3, #8]
  201654:	4291      	cmp	r1, r2
  201656:	d3fb      	bcc.n	201650 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  201658:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  20165a:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  20165c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  20165e:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  201660:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201662:	605c      	str	r4, [r3, #4]
}
  201664:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201666:	f7fe be35 	b.w	2002d4 <_port_switch>
  20166a:	bf00      	nop
  20166c:	20000920 	.word	0x20000920

00201670 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
  201670:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201674:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  201676:	b5f0      	push	{r4, r5, r6, r7, lr}
  201678:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
  20167a:	d031      	beq.n	2016e0 <chSchGoSleepTimeoutS+0x70>
    chVTDoSetI(&vt, time, wakeup, currp);
  20167c:	4c1c      	ldr	r4, [pc, #112]	; (2016f0 <chSchGoSleepTimeoutS+0x80>)
  20167e:	4607      	mov	r7, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  201680:	481c      	ldr	r0, [pc, #112]	; (2016f4 <chSchGoSleepTimeoutS+0x84>)
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
  201682:	69e3      	ldr	r3, [r4, #28]
  vtp->par = par;
  201684:	69a5      	ldr	r5, [r4, #24]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  201686:	891a      	ldrh	r2, [r3, #8]
  vtp->par = par;
  201688:	9505      	str	r5, [sp, #20]
  while (p->delta < delta) {
  20168a:	4291      	cmp	r1, r2
  vtp->func = vtfunc;
  20168c:	9004      	str	r0, [sp, #16]
  while (p->delta < delta) {
  20168e:	d905      	bls.n	20169c <chSchGoSleepTimeoutS+0x2c>
    delta -= p->delta;
  201690:	1a89      	subs	r1, r1, r2
    p = p->next;
  201692:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  201694:	b289      	uxth	r1, r1
  while (p->delta < delta) {
  201696:	891a      	ldrh	r2, [r3, #8]
  201698:	428a      	cmp	r2, r1
  20169a:	d3f9      	bcc.n	201690 <chSchGoSleepTimeoutS+0x20>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  20169c:	685d      	ldr	r5, [r3, #4]
  vtp->prev->next = vtp;
  20169e:	aa01      	add	r2, sp, #4
  vtp->next = p;
  2016a0:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  2016a2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
  2016a6:	9502      	str	r5, [sp, #8]
    chSchGoSleepS(newstate);
  2016a8:	4638      	mov	r0, r7
  vtp->prev->next = vtp;
  2016aa:	602a      	str	r2, [r5, #0]
  p->prev = vtp;
  2016ac:	605a      	str	r2, [r3, #4]
  vtp->delta = delta
  2016ae:	f8ad 100c 	strh.w	r1, [sp, #12]
  p->delta -= delta;
  2016b2:	891a      	ldrh	r2, [r3, #8]
  2016b4:	1a51      	subs	r1, r2, r1
  2016b6:	8119      	strh	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  2016b8:	84a6      	strh	r6, [r4, #36]	; 0x24
  2016ba:	f7ff fb79 	bl	200db0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  2016be:	9b04      	ldr	r3, [sp, #16]
  2016c0:	b153      	cbz	r3, 2016d8 <chSchGoSleepTimeoutS+0x68>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
  2016c2:	9b01      	ldr	r3, [sp, #4]
  2016c4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  2016c8:	891a      	ldrh	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
  2016ca:	9902      	ldr	r1, [sp, #8]
  vtp->next->delta += vtp->delta;
  2016cc:	4402      	add	r2, r0
  2016ce:	811a      	strh	r2, [r3, #8]
  vtp->prev->next = vtp->next;
  2016d0:	600b      	str	r3, [r1, #0]
  vtp->next->prev = vtp->prev;
  2016d2:	9b01      	ldr	r3, [sp, #4]
  2016d4:	6059      	str	r1, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
  2016d6:	84a6      	strh	r6, [r4, #36]	; 0x24
  return currp->u.rdymsg;
  2016d8:	69a3      	ldr	r3, [r4, #24]
}
  2016da:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2016dc:	b007      	add	sp, #28
  2016de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2016e0:	4c03      	ldr	r4, [pc, #12]	; (2016f0 <chSchGoSleepTimeoutS+0x80>)
    chSchGoSleepS(newstate);
  2016e2:	f7ff fb65 	bl	200db0 <chSchGoSleepS>
  return currp->u.rdymsg;
  2016e6:	69a3      	ldr	r3, [r4, #24]
}
  2016e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2016ea:	b007      	add	sp, #28
  2016ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2016ee:	bf00      	nop
  2016f0:	20000920 	.word	0x20000920
  2016f4:	00200b71 	.word	0x00200b71
	...

00201700 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
  201700:	b161      	cbz	r1, 20171c <chThdEnqueueTimeoutS+0x1c>
  201702:	4602      	mov	r2, r0
  queue_insert(currp, tqp);
  201704:	4b07      	ldr	r3, [pc, #28]	; (201724 <chThdEnqueueTimeoutS+0x24>)
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201706:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  201708:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  20170a:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  20170c:	6854      	ldr	r4, [r2, #4]
  20170e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
  201712:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  201714:	6053      	str	r3, [r2, #4]
}
  201716:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201718:	f7ff bfaa 	b.w	201670 <chSchGoSleepTimeoutS>
}
  20171c:	f04f 30ff 	mov.w	r0, #4294967295
  201720:	4770      	bx	lr
  201722:	bf00      	nop
  201724:	20000920 	.word	0x20000920
	...

00201730 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  201730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201734:	4699      	mov	r9, r3
  201736:	b083      	sub	sp, #12
  201738:	4604      	mov	r4, r0
  20173a:	460e      	mov	r6, r1
  20173c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  20173e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  201742:	2320      	movs	r3, #32
  201744:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.systime;
  201748:	4b26      	ldr	r3, [pc, #152]	; (2017e4 <oqWriteTimeout+0xb4>)
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  20174a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t w = 0;
  20174e:	2700      	movs	r7, #0
  201750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201752:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  201756:	fa19 f383 	uxtah	r3, r9, r3
  20175a:	b29b      	uxth	r3, r3
  20175c:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  20175e:	68a3      	ldr	r3, [r4, #8]
  201760:	b313      	cbz	r3, 2017a8 <oqWriteTimeout+0x78>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  201762:	6961      	ldr	r1, [r4, #20]
  201764:	f106 0b01 	add.w	fp, r6, #1
    oqp->q_counter--;
  201768:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  20176a:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  20176c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  20176e:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  201770:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201772:	7833      	ldrb	r3, [r6, #0]
  201774:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  201776:	6961      	ldr	r1, [r4, #20]
  201778:	6923      	ldr	r3, [r4, #16]
  20177a:	4299      	cmp	r1, r3
  20177c:	d301      	bcc.n	201782 <oqWriteTimeout+0x52>
      oqp->q_wrptr = oqp->q_buffer;
  20177e:	68e3      	ldr	r3, [r4, #12]
  201780:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  201782:	f1b8 0f00 	cmp.w	r8, #0
  201786:	d001      	beq.n	20178c <oqWriteTimeout+0x5c>
      nfy(oqp);
  201788:	4620      	mov	r0, r4
  20178a:	47c0      	blx	r8
  20178c:	2300      	movs	r3, #0
  20178e:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  201792:	3d01      	subs	r5, #1
    w++;
  201794:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  201798:	d019      	beq.n	2017ce <oqWriteTimeout+0x9e>
  20179a:	2320      	movs	r3, #32
  20179c:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  2017a0:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  2017a2:	465e      	mov	r6, fp
    while (oqIsFullI(oqp)) {
  2017a4:	2b00      	cmp	r3, #0
  2017a6:	d1dc      	bne.n	201762 <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2017a8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  2017ac:	4592      	cmp	sl, r2
  2017ae:	d812      	bhi.n	2017d6 <oqWriteTimeout+0xa6>
  2017b0:	4a0c      	ldr	r2, [pc, #48]	; (2017e4 <oqWriteTimeout+0xb4>)
  2017b2:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  2017b4:	9a01      	ldr	r2, [sp, #4]
  2017b6:	1a51      	subs	r1, r2, r1
  2017b8:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  2017ba:	4589      	cmp	r9, r1
  2017bc:	d305      	bcc.n	2017ca <oqWriteTimeout+0x9a>
  return chThdEnqueueTimeoutS(tqp, time);
  2017be:	4620      	mov	r0, r4
  2017c0:	f7ff ff9e 	bl	201700 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2017c4:	2800      	cmp	r0, #0
  2017c6:	d0ca      	beq.n	20175e <oqWriteTimeout+0x2e>
  2017c8:	2300      	movs	r3, #0
  2017ca:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  2017ce:	4638      	mov	r0, r7
  2017d0:	b003      	add	sp, #12
  2017d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  2017d6:	4649      	mov	r1, r9
  2017d8:	4620      	mov	r0, r4
  2017da:	f7ff ff91 	bl	201700 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  2017de:	2800      	cmp	r0, #0
  2017e0:	d0bd      	beq.n	20175e <oqWriteTimeout+0x2e>
  2017e2:	e7f1      	b.n	2017c8 <oqWriteTimeout+0x98>
  2017e4:	20000920 	.word	0x20000920
	...

002017f0 <_writet.lto_priv.42>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  2017f0:	3030      	adds	r0, #48	; 0x30
  2017f2:	f7ff bf9d 	b.w	201730 <oqWriteTimeout>
  2017f6:	bf00      	nop
	...

00201800 <_write.lto_priv.36>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  201800:	3030      	adds	r0, #48	; 0x30
  201802:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201806:	f7ff bf93 	b.w	201730 <oqWriteTimeout>
  20180a:	bf00      	nop
  20180c:	0000      	movs	r0, r0
	...

00201810 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  201810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  201812:	4604      	mov	r4, r0
  201814:	460f      	mov	r7, r1
  201816:	4616      	mov	r6, r2
  201818:	2320      	movs	r3, #32
  20181a:	f383 8811 	msr	BASEPRI, r3
  20181e:	e003      	b.n	201828 <oqPutTimeout+0x18>
  201820:	f7ff ff6e 	bl	201700 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201824:	2800      	cmp	r0, #0
  201826:	db19      	blt.n	20185c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  201828:	68a5      	ldr	r5, [r4, #8]
  20182a:	4631      	mov	r1, r6
  20182c:	4620      	mov	r0, r4
  20182e:	2d00      	cmp	r5, #0
  201830:	d0f6      	beq.n	201820 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  201832:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  201834:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  201836:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  201838:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  20183a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  20183c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  20183e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  201840:	6962      	ldr	r2, [r4, #20]
  201842:	6923      	ldr	r3, [r4, #16]
  201844:	429a      	cmp	r2, r3
  201846:	d301      	bcc.n	20184c <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  201848:	68e3      	ldr	r3, [r4, #12]
  20184a:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  20184c:	69e3      	ldr	r3, [r4, #28]
  20184e:	b10b      	cbz	r3, 201854 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  201850:	4620      	mov	r0, r4
  201852:	4798      	blx	r3
  201854:	2000      	movs	r0, #0
  201856:	f380 8811 	msr	BASEPRI, r0
}
  20185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  20185c:	f385 8811 	msr	BASEPRI, r5
  201860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201862:	bf00      	nop
	...

00201870 <_putt.lto_priv.40>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  201870:	3030      	adds	r0, #48	; 0x30
  201872:	f7ff bfcd 	b.w	201810 <oqPutTimeout>
  201876:	bf00      	nop
	...

00201880 <_put.lto_priv.38>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  201880:	3030      	adds	r0, #48	; 0x30
  201882:	f64f 72ff 	movw	r2, #65535	; 0xffff
  201886:	f7ff bfc3 	b.w	201810 <oqPutTimeout>
  20188a:	bf00      	nop
  20188c:	0000      	movs	r0, r0
	...

00201890 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  201890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201894:	4699      	mov	r9, r3
  201896:	b083      	sub	sp, #12
  201898:	4604      	mov	r4, r0
  20189a:	460e      	mov	r6, r1
  20189c:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  20189e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  2018a2:	2320      	movs	r3, #32
  2018a4:	f383 8811 	msr	BASEPRI, r3
  2018a8:	4b26      	ldr	r3, [pc, #152]	; (201944 <iqReadTimeout+0xb4>)
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2018aa:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t r = 0;
  2018ae:	2700      	movs	r7, #0
  2018b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  2018b2:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  2018b6:	fa19 f383 	uxtah	r3, r9, r3
  2018ba:	b29b      	uxth	r3, r3
  2018bc:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  2018be:	68a3      	ldr	r3, [r4, #8]
  2018c0:	b313      	cbz	r3, 201908 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
  2018c2:	69a1      	ldr	r1, [r4, #24]
  2018c4:	f106 0b01 	add.w	fp, r6, #1
    iqp->q_counter--;
  2018c8:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  2018ca:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  2018cc:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  2018ce:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  2018d0:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  2018d2:	780b      	ldrb	r3, [r1, #0]
  2018d4:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  2018d6:	69a1      	ldr	r1, [r4, #24]
  2018d8:	6923      	ldr	r3, [r4, #16]
  2018da:	4299      	cmp	r1, r3
  2018dc:	d301      	bcc.n	2018e2 <iqReadTimeout+0x52>
      iqp->q_rdptr = iqp->q_buffer;
  2018de:	68e3      	ldr	r3, [r4, #12]
  2018e0:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  2018e2:	f1b8 0f00 	cmp.w	r8, #0
  2018e6:	d001      	beq.n	2018ec <iqReadTimeout+0x5c>
      nfy(iqp);
  2018e8:	4620      	mov	r0, r4
  2018ea:	47c0      	blx	r8
  2018ec:	2300      	movs	r3, #0
  2018ee:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  2018f2:	3d01      	subs	r5, #1
    r++;
  2018f4:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  2018f8:	d019      	beq.n	20192e <iqReadTimeout+0x9e>
  2018fa:	2320      	movs	r3, #32
  2018fc:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  201900:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201902:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
  201904:	2b00      	cmp	r3, #0
  201906:	d1dc      	bne.n	2018c2 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201908:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  20190c:	4592      	cmp	sl, r2
  20190e:	d812      	bhi.n	201936 <iqReadTimeout+0xa6>
  201910:	4a0c      	ldr	r2, [pc, #48]	; (201944 <iqReadTimeout+0xb4>)
  201912:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  201914:	9a01      	ldr	r2, [sp, #4]
  201916:	1a51      	subs	r1, r2, r1
  201918:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  20191a:	4589      	cmp	r9, r1
  20191c:	d305      	bcc.n	20192a <iqReadTimeout+0x9a>
  20191e:	4620      	mov	r0, r4
  201920:	f7ff feee 	bl	201700 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201924:	2800      	cmp	r0, #0
  201926:	d0ca      	beq.n	2018be <iqReadTimeout+0x2e>
  201928:	2300      	movs	r3, #0
  20192a:	f383 8811 	msr	BASEPRI, r3
}
  20192e:	4638      	mov	r0, r7
  201930:	b003      	add	sp, #12
  201932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201936:	4649      	mov	r1, r9
  201938:	4620      	mov	r0, r4
  20193a:	f7ff fee1 	bl	201700 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  20193e:	2800      	cmp	r0, #0
  201940:	d0bd      	beq.n	2018be <iqReadTimeout+0x2e>
  201942:	e7f1      	b.n	201928 <iqReadTimeout+0x98>
  201944:	20000920 	.word	0x20000920
	...

00201950 <_readt.lto_priv.43>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  201950:	300c      	adds	r0, #12
  201952:	f7ff bf9d 	b.w	201890 <iqReadTimeout>
  201956:	bf00      	nop
	...

00201960 <_read.lto_priv.37>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  201960:	300c      	adds	r0, #12
  201962:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201966:	f7ff bf93 	b.w	201890 <iqReadTimeout>
  20196a:	bf00      	nop
  20196c:	0000      	movs	r0, r0
	...

00201970 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  201970:	b570      	push	{r4, r5, r6, lr}
  201972:	2320      	movs	r3, #32
  201974:	4604      	mov	r4, r0
  201976:	460e      	mov	r6, r1
  201978:	f383 8811 	msr	BASEPRI, r3
  20197c:	e003      	b.n	201986 <iqGetTimeout+0x16>
  20197e:	f7ff febf 	bl	201700 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201982:	2800      	cmp	r0, #0
  201984:	db19      	blt.n	2019ba <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  201986:	68a5      	ldr	r5, [r4, #8]
  201988:	4631      	mov	r1, r6
  20198a:	4620      	mov	r0, r4
  20198c:	2d00      	cmp	r5, #0
  20198e:	d0f6      	beq.n	20197e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  201990:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  201992:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201994:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201996:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  201998:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  20199a:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  20199c:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  20199e:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  2019a0:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  2019a2:	d301      	bcc.n	2019a8 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  2019a4:	68e3      	ldr	r3, [r4, #12]
  2019a6:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  2019a8:	69e3      	ldr	r3, [r4, #28]
  2019aa:	b10b      	cbz	r3, 2019b0 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  2019ac:	4620      	mov	r0, r4
  2019ae:	4798      	blx	r3
  2019b0:	2300      	movs	r3, #0
  2019b2:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  2019b6:	4628      	mov	r0, r5
}
  2019b8:	bd70      	pop	{r4, r5, r6, pc}
  2019ba:	f385 8811 	msr	BASEPRI, r5
  2019be:	bd70      	pop	{r4, r5, r6, pc}

002019c0 <_gett.lto_priv.41>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  2019c0:	300c      	adds	r0, #12
  2019c2:	f7ff bfd5 	b.w	201970 <iqGetTimeout>
  2019c6:	bf00      	nop
	...

002019d0 <_get.lto_priv.39>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  2019d0:	300c      	adds	r0, #12
  2019d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
  2019d6:	f7ff bfcb 	b.w	201970 <iqGetTimeout>
  2019da:	bf00      	nop
  2019dc:	0000      	movs	r0, r0
	...

002019e0 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  2019e0:	e7fe      	b.n	2019e0 <BusFault_Handler>
  2019e2:	bf00      	nop
	...

002019f0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  2019f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  2019f2:	4f12      	ldr	r7, [pc, #72]	; (201a3c <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  2019f4:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  2019f6:	4d12      	ldr	r5, [pc, #72]	; (201a40 <__init_ram_areas+0x50>)
  2019f8:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  2019fc:	4c11      	ldr	r4, [pc, #68]	; (201a44 <__init_ram_areas+0x54>)
  2019fe:	4b12      	ldr	r3, [pc, #72]	; (201a48 <__init_ram_areas+0x58>)
  201a00:	4912      	ldr	r1, [pc, #72]	; (201a4c <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  201a02:	429c      	cmp	r4, r3
  201a04:	d911      	bls.n	201a2a <__init_ram_areas+0x3a>
  201a06:	3904      	subs	r1, #4
  201a08:	461a      	mov	r2, r3
      *p = *tp;
  201a0a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  201a0e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  201a12:	4294      	cmp	r4, r2
  201a14:	d8f9      	bhi.n	201a0a <__init_ram_areas+0x1a>
  201a16:	43da      	mvns	r2, r3
  201a18:	4414      	add	r4, r2
  201a1a:	f024 0403 	bic.w	r4, r4, #3
  201a1e:	3404      	adds	r4, #4
  201a20:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  201a22:	429d      	cmp	r5, r3
  201a24:	d903      	bls.n	201a2e <__init_ram_areas+0x3e>
      *p = 0;
  201a26:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  201a2a:	429d      	cmp	r5, r3
  201a2c:	d8fb      	bhi.n	201a26 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  201a2e:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  201a30:	4577      	cmp	r7, lr
  201a32:	d202      	bcs.n	201a3a <__init_ram_areas+0x4a>
  201a34:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  201a38:	e7e3      	b.n	201a02 <__init_ram_areas+0x12>
  201a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201a3c:	080026fc 	.word	0x080026fc
  201a40:	20020044 	.word	0x20020044
  201a44:	20020044 	.word	0x20020044
  201a48:	20020044 	.word	0x20020044
  201a4c:	080028f8 	.word	0x080028f8

00201a50 <__default_exit>:
void __default_exit(void) {
  201a50:	e7fe      	b.n	201a50 <__default_exit>
  201a52:	bf00      	nop
	...

00201a60 <__late_init>:
void __late_init(void) {}
  201a60:	4770      	bx	lr
  201a62:	bf00      	nop
	...

00201a70 <__core_init>:
void __core_init(void) {
  201a70:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  201a72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201a76:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  201a7a:	4c1b      	ldr	r4, [pc, #108]	; (201ae8 <__core_init+0x78>)
  201a7c:	2200      	movs	r2, #0
  201a7e:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  201a82:	6963      	ldr	r3, [r4, #20]
  201a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  201a88:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  201a8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201a8e:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  201a92:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  201a96:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  201a9a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  201a9e:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  201aa2:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  201aa6:	f3c3 334e 	ubfx	r3, r3, #13, #15
  201aaa:	07b7      	lsls	r7, r6, #30
  201aac:	015d      	lsls	r5, r3, #5
  201aae:	ea05 000e 	and.w	r0, r5, lr
  201ab2:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  201ab4:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  201ab6:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  201aba:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  201abc:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  201ac0:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  201ac4:	1c53      	adds	r3, r2, #1
  201ac6:	d1f6      	bne.n	201ab6 <__core_init+0x46>
  201ac8:	3d20      	subs	r5, #32
    } while(sets--);
  201aca:	f115 0f20 	cmn.w	r5, #32
  201ace:	d1ee      	bne.n	201aae <__core_init+0x3e>
  201ad0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  201ad4:	6963      	ldr	r3, [r4, #20]
  201ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  201ada:	6163      	str	r3, [r4, #20]
  201adc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201ae0:	f3bf 8f6f 	isb	sy
  201ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201ae6:	bf00      	nop
  201ae8:	e000ed00 	.word	0xe000ed00
  201aec:	00000000 	.word	0x00000000

00201af0 <adcerrorcallback>:
  (void)buffer;
  (void)n;
}

/* ADC errors callback, should never happen */
static void adcerrorcallback(ADCDriver *adcp, adcerror_t err) {
  201af0:	4770      	bx	lr
  201af2:	bf00      	nop
	...

00201b00 <adccallback>:
{
  201b00:	4770      	bx	lr
  201b02:	bf00      	nop
	...

00201b10 <Vector18C>:
/**
 * @brief   UART8 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART8_HANDLER) {
  201b10:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD8);
  201b12:	4803      	ldr	r0, [pc, #12]	; (201b20 <Vector18C+0x10>)
  201b14:	f7ff f964 	bl	200de0 <serve_interrupt.lto_priv.45>

  OSAL_IRQ_EPILOGUE();
}
  201b18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201b1c:	f7ff baa0 	b.w	201060 <_port_irq_epilogue>
  201b20:	200008c0 	.word	0x200008c0
	...

00201b30 <main>:
  tqp->next = (thread_t *)tqp;
  201b30:	f8df a270 	ldr.w	sl, [pc, #624]	; 201da4 <main+0x274>
  ch.rlist.prio = NOPRIO;
  201b34:	2400      	movs	r4, #0
  ch.vtlist.delta = (systime_t)-1;
  201b36:	f64f 71ff 	movw	r1, #65535	; 0xffff
  tmp->best       = (rtcnt_t)-1;
  201b3a:	f04f 32ff 	mov.w	r2, #4294967295
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  201b3e:	f10a 031c 	add.w	r3, sl, #28
  tmp->cumulative = (rttime_t)0;
  201b42:	2600      	movs	r6, #0
  ch.vtlist.delta = (systime_t)-1;
  201b44:	f8aa 1024 	strh.w	r1, [sl, #36]	; 0x24
  REG_INSERT(tp);
  201b48:	f10a 052c 	add.w	r5, sl, #44	; 0x2c
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  201b4c:	f8ca 301c 	str.w	r3, [sl, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  201b50:	f8ca 3020 	str.w	r3, [sl, #32]
  201b54:	f8ca a000 	str.w	sl, [sl]
  tqp->prev = (thread_t *)tqp;
  201b58:	f8ca a004 	str.w	sl, [sl, #4]
  ch.rlist.newer = (thread_t *)&ch.rlist;
  201b5c:	f8ca a010 	str.w	sl, [sl, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  201b60:	f8ca a014 	str.w	sl, [sl, #20]
  ch.rlist.prio = NOPRIO;
  201b64:	f8ca 4008 	str.w	r4, [sl, #8]
  ch.vtlist.systime = (systime_t)0;
  201b68:	f8aa 4026 	strh.w	r4, [sl, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  201b6c:	f8ca 4070 	str.w	r4, [sl, #112]	; 0x70
    .cr1    = 0,
    .cr2    = 0,
    .cr3    = 0
};
int main(void)
{
  201b70:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  201b74:	b089      	sub	sp, #36	; 0x24
  tmp->cumulative = (rttime_t)0;
  201b76:	2700      	movs	r7, #0
  chTMStartMeasurementX(&tm);
  201b78:	a802      	add	r0, sp, #8
  tmp->best       = (rtcnt_t)-1;
  201b7a:	9202      	str	r2, [sp, #8]
  tmp->worst      = (rtcnt_t)0;
  201b7c:	9403      	str	r4, [sp, #12]
  tmp->last       = (rtcnt_t)0;
  201b7e:	9404      	str	r4, [sp, #16]
  tmp->n          = (ucnt_t)0;
  201b80:	9405      	str	r4, [sp, #20]
  tmp->cumulative = (rttime_t)0;
  201b82:	e9cd 6706 	strd	r6, r7, [sp, #24]
  chTMStartMeasurementX(&tm);
  201b86:	f000 fdb3 	bl	2026f0 <chTMStartMeasurementX.constprop.28>
  chTMStopMeasurementX(&tm);
  201b8a:	a802      	add	r0, sp, #8
  201b8c:	f7ff fd00 	bl	201590 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  201b90:	4b70      	ldr	r3, [pc, #448]	; (201d54 <main+0x224>)
  201b92:	4971      	ldr	r1, [pc, #452]	; (201d58 <main+0x228>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  201b94:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  nextmem = __heap_base__;
  201b98:	4a70      	ldr	r2, [pc, #448]	; (201d5c <main+0x22c>)
  tp->prio      = prio;
  201b9a:	2780      	movs	r7, #128	; 0x80
  201b9c:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
  201b9e:	f103 0e10 	add.w	lr, r3, #16
  201ba2:	496f      	ldr	r1, [pc, #444]	; (201d60 <main+0x230>)
  endmem  = __heap_end__;
  201ba4:	4e6f      	ldr	r6, [pc, #444]	; (201d64 <main+0x234>)
  nextmem = __heap_base__;
  201ba6:	6011      	str	r1, [r2, #0]
  tp->refs      = (trefs_t)1;
  201ba8:	2201      	movs	r2, #1
  endmem  = __heap_end__;
  201baa:	496f      	ldr	r1, [pc, #444]	; (201d68 <main+0x238>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  201bac:	f88a 404d 	strb.w	r4, [sl, #77]	; 0x4d
  201bb0:	600e      	str	r6, [r1, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  201bb2:	496e      	ldr	r1, [pc, #440]	; (201d6c <main+0x23c>)
  ch.tm.offset = tm.last;
  201bb4:	9804      	ldr	r0, [sp, #16]
  201bb6:	68ce      	ldr	r6, [r1, #12]
  201bb8:	f8ca 0070 	str.w	r0, [sl, #112]	; 0x70
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  201bbc:	ea06 060c 	and.w	r6, r6, ip
  reg_value  =  (reg_value                                   |
  201bc0:	486b      	ldr	r0, [pc, #428]	; (201d70 <main+0x240>)
  tp->name      = name;
  201bc2:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 201da8 <main+0x278>
  201bc6:	4330      	orrs	r0, r6
  REG_INSERT(tp);
  201bc8:	f8da 6014 	ldr.w	r6, [sl, #20]
  tp->prio      = prio;
  201bcc:	f8ca 7034 	str.w	r7, [sl, #52]	; 0x34
  tp->realprio  = prio;
  201bd0:	f8ca 7068 	str.w	r7, [sl, #104]	; 0x68
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  201bd4:	4f67      	ldr	r7, [pc, #412]	; (201d74 <main+0x244>)
  tp->epending  = (eventmask_t)0;
  201bd6:	f8ca 4060 	str.w	r4, [sl, #96]	; 0x60
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  201bda:	619c      	str	r4, [r3, #24]
  201bdc:	f8c3 e010 	str.w	lr, [r3, #16]
  tqp->prev = (thread_t *)tqp;
  201be0:	f8c3 e014 	str.w	lr, [r3, #20]
  tlp->next = (thread_t *)tlp;
  201be4:	f10a 0e54 	add.w	lr, sl, #84	; 0x54
  REG_INSERT(tp);
  201be8:	f8ca 6040 	str.w	r6, [sl, #64]	; 0x40
  tp->refs      = (trefs_t)1;
  201bec:	f88a 204e 	strb.w	r2, [sl, #78]	; 0x4e
  tp->mtxlist   = NULL;
  201bf0:	f8ca 4064 	str.w	r4, [sl, #100]	; 0x64
  REG_INSERT(tp);
  201bf4:	f8ca a03c 	str.w	sl, [sl, #60]	; 0x3c
  tp->name      = name;
  201bf8:	f8ca c044 	str.w	ip, [sl, #68]	; 0x44
  REG_INSERT(tp);
  201bfc:	6135      	str	r5, [r6, #16]
  tqp->next = (thread_t *)tqp;
  201bfe:	f10a 0658 	add.w	r6, sl, #88	; 0x58
  SCB->AIRCR =  reg_value;
  201c02:	60c8      	str	r0, [r1, #12]
  201c04:	68f8      	ldr	r0, [r7, #12]
  H_NEXT(&default_heap.header) = NULL;
  201c06:	609c      	str	r4, [r3, #8]
  201c08:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  H_PAGES(&default_heap.header) = 0;
  201c0c:	60dc      	str	r4, [r3, #12]
  201c0e:	f8ca 5014 	str.w	r5, [sl, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  201c12:	f8ca 5018 	str.w	r5, [sl, #24]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  201c16:	2520      	movs	r5, #32
  tlp->next = (thread_t *)tlp;
  201c18:	f8ca e054 	str.w	lr, [sl, #84]	; 0x54
  201c1c:	f04f 0e10 	mov.w	lr, #16
  DWT->LAR = 0xC5ACCE55U;
  201c20:	4b55      	ldr	r3, [pc, #340]	; (201d78 <main+0x248>)
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  201c22:	f8ca 4048 	str.w	r4, [sl, #72]	; 0x48
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  201c26:	f88a 204c 	strb.w	r2, [sl, #76]	; 0x4c
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  201c2a:	60f8      	str	r0, [r7, #12]
  DWT->LAR = 0xC5ACCE55U;
  201c2c:	4853      	ldr	r0, [pc, #332]	; (201d7c <main+0x24c>)
  tqp->next = (thread_t *)tqp;
  201c2e:	f8ca 6058 	str.w	r6, [sl, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  201c32:	f8ca 605c 	str.w	r6, [sl, #92]	; 0x5c
  201c36:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  201c3a:	6818      	ldr	r0, [r3, #0]
  201c3c:	4310      	orrs	r0, r2
  201c3e:	6018      	str	r0, [r3, #0]
  201c40:	f881 e01f 	strb.w	lr, [r1, #31]
  201c44:	f881 5022 	strb.w	r5, [r1, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201c48:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
  201c4c:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201c4e:	f385 8811 	msr	BASEPRI, r5
  tp->wabase = tdp->wbase;
  201c52:	4b4b      	ldr	r3, [pc, #300]	; (201d80 <main+0x250>)
  tp->state     = CH_STATE_WTSTART;
  201c54:	2502      	movs	r5, #2
  REG_INSERT(tp);
  201c56:	f8da 1014 	ldr.w	r1, [sl, #20]
  tp->prio      = prio;
  201c5a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201c5e:	f103 066c 	add.w	r6, r3, #108	; 0x6c
  tp->realprio  = prio;
  201c62:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  REG_INSERT(tp);
  201c66:	f103 0090 	add.w	r0, r3, #144	; 0x90
  tp->refs      = (trefs_t)1;
  201c6a:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201c6e:	4a45      	ldr	r2, [pc, #276]	; (201d84 <main+0x254>)
  201c70:	4f45      	ldr	r7, [pc, #276]	; (201d88 <main+0x258>)
  201c72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  tp->name      = name;
  201c76:	4a45      	ldr	r2, [pc, #276]	; (201d8c <main+0x25c>)
  tp->state     = CH_STATE_WTSTART;
  201c78:	f883 50b0 	strb.w	r5, [r3, #176]	; 0xb0
  tqp->next = (thread_t *)tqp;
  201c7c:	f103 05bc 	add.w	r5, r3, #188	; 0xbc
  REG_INSERT(tp);
  201c80:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  tp->flags     = CH_FLAG_MODE_STATIC;
  201c84:	f883 40b1 	strb.w	r4, [r3, #177]	; 0xb1
  tp->epending  = (eventmask_t)0;
  201c88:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201c8c:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
  tlp->next = (thread_t *)tlp;
  201c90:	f103 06b8 	add.w	r6, r3, #184	; 0xb8
  tp->name      = name;
  201c94:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201c98:	671c      	str	r4, [r3, #112]	; 0x70
  tp->mtxlist   = NULL;
  201c9a:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
  REG_INSERT(tp);
  201c9e:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  201ca2:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201ca6:	66df      	str	r7, [r3, #108]	; 0x6c
  REG_INSERT(tp);
  201ca8:	6108      	str	r0, [r1, #16]
  thread_t *otp = currp;
  201caa:	f8da 2018 	ldr.w	r2, [sl, #24]
  ntp->u.rdymsg = msg;
  201cae:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  if (ntp->prio <= otp->prio) {
  201cb2:	6891      	ldr	r1, [r2, #8]
  201cb4:	f8ca 0014 	str.w	r0, [sl, #20]
  201cb8:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  201cbc:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  201cc0:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
  201cc4:	2900      	cmp	r1, #0
  201cc6:	f000 83b8 	beq.w	20243a <main+0x90a>
  cp = (thread_t *)&ch.rlist.queue;
  201cca:	4652      	mov	r2, sl
  tp->state = CH_STATE_READY;
  201ccc:	f883 40b0 	strb.w	r4, [r3, #176]	; 0xb0
    cp = cp->queue.next;
  201cd0:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
  201cd2:	6891      	ldr	r1, [r2, #8]
  201cd4:	2900      	cmp	r1, #0
  201cd6:	d1fb      	bne.n	201cd0 <main+0x1a0>
  tp->queue.next             = cp;
  201cd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
  201cdc:	6854      	ldr	r4, [r2, #4]
  201cde:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
  201ce2:	6020      	str	r0, [r4, #0]
  cp->queue.prev             = tp;
  201ce4:	6050      	str	r0, [r2, #4]
  201ce6:	f381 8811 	msr	BASEPRI, r1
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  201cea:	4b29      	ldr	r3, [pc, #164]	; (201d90 <main+0x260>)
  201cec:	f04f 32ff 	mov.w	r2, #4294967295
  PWR->CR1 |= PWR_CR1_DBP;
  201cf0:	4c28      	ldr	r4, [pc, #160]	; (201d94 <main+0x264>)
  rccResetAHB1(~0);
  201cf2:	6918      	ldr	r0, [r3, #16]
  201cf4:	611a      	str	r2, [r3, #16]
  201cf6:	6119      	str	r1, [r3, #16]
  rccResetAHB2(~0);
  201cf8:	6958      	ldr	r0, [r3, #20]
  201cfa:	615a      	str	r2, [r3, #20]
  201cfc:	6159      	str	r1, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  201cfe:	6a18      	ldr	r0, [r3, #32]
  201d00:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  201d04:	6218      	str	r0, [r3, #32]
  201d06:	6219      	str	r1, [r3, #32]
  rccResetAPB2(~0);
  201d08:	6a58      	ldr	r0, [r3, #36]	; 0x24
  201d0a:	625a      	str	r2, [r3, #36]	; 0x24
  201d0c:	6259      	str	r1, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  201d0e:	6822      	ldr	r2, [r4, #0]
  201d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  201d14:	6022      	str	r2, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  201d16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  201d18:	f402 7240 	and.w	r2, r2, #768	; 0x300
  201d1c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  201d20:	d003      	beq.n	201d2a <main+0x1fa>
    RCC->BDCR = RCC_BDCR_BDRST;
  201d22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  201d26:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  201d28:	6719      	str	r1, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201d2a:	4b19      	ldr	r3, [pc, #100]	; (201d90 <main+0x260>)
  201d2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  201d2e:	4618      	mov	r0, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201d30:	f042 0219 	orr.w	r2, r2, #25
  201d34:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  201d36:	6f03      	ldr	r3, [r0, #112]	; 0x70
  201d38:	079b      	lsls	r3, r3, #30
  201d3a:	d5fc      	bpl.n	201d36 <main+0x206>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  201d3c:	4d15      	ldr	r5, [pc, #84]	; (201d94 <main+0x264>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  201d3e:	2400      	movs	r4, #0
  201d40:	4815      	ldr	r0, [pc, #84]	; (201d98 <main+0x268>)
  201d42:	686a      	ldr	r2, [r5, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
  201d44:	4623      	mov	r3, r4
  dma_streams_mask = 0U;
  201d46:	4e15      	ldr	r6, [pc, #84]	; (201d9c <main+0x26c>)
  201d48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  201d4c:	606a      	str	r2, [r5, #4]
  201d4e:	4a14      	ldr	r2, [pc, #80]	; (201da0 <main+0x270>)
  201d50:	6014      	str	r4, [r2, #0]
  201d52:	e02d      	b.n	201db0 <main+0x280>
  201d54:	20000a70 	.word	0x20000a70
  201d58:	00200b21 	.word	0x00200b21
  201d5c:	20000b18 	.word	0x20000b18
  201d60:	20020048 	.word	0x20020048
  201d64:	20080000 	.word	0x20080000
  201d68:	20000b14 	.word	0x20000b14
  201d6c:	e000ed00 	.word	0xe000ed00
  201d70:	05fa0300 	.word	0x05fa0300
  201d74:	e000edf0 	.word	0xe000edf0
  201d78:	e0001000 	.word	0xe0001000
  201d7c:	c5acce55 	.word	0xc5acce55
  201d80:	20000998 	.word	0x20000998
  201d84:	002002e5 	.word	0x002002e5
  201d88:	00200da1 	.word	0x00200da1
  201d8c:	0800288c 	.word	0x0800288c
  201d90:	40023800 	.word	0x40023800
  201d94:	40007000 	.word	0x40007000
  201d98:	08002788 	.word	0x08002788
  201d9c:	40026010 	.word	0x40026010
  201da0:	20000b10 	.word	0x20000b10
  201da4:	20000920 	.word	0x20000920
  201da8:	08002864 	.word	0x08002864
  201dac:	f850 6c0c 	ldr.w	r6, [r0, #-12]
    dma_isr_redir[i].dma_func = NULL;
  201db0:	4acf      	ldr	r2, [pc, #828]	; (2020f0 <main+0x5c0>)
  201db2:	300c      	adds	r0, #12
    _stm32_dma_streams[i].stream->CR = 0U;
  201db4:	6033      	str	r3, [r6, #0]
    dma_isr_redir[i].dma_func = NULL;
  201db6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  201dba:	3101      	adds	r1, #1
  201dbc:	2910      	cmp	r1, #16
  201dbe:	d1f5      	bne.n	201dac <main+0x27c>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
  201dc0:	f04f 34ff 	mov.w	r4, #4294967295
  201dc4:	4fcb      	ldr	r7, [pc, #812]	; (2020f4 <main+0x5c4>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
  201dc6:	4acc      	ldr	r2, [pc, #816]	; (2020f8 <main+0x5c8>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  201dc8:	f240 75ff 	movw	r5, #2047	; 0x7ff
  DMA1->LIFCR = 0xFFFFFFFFU;
  201dcc:	60bc      	str	r4, [r7, #8]
  gpiop->ODR     = config->odr;
  201dce:	f64f 70ff 	movw	r0, #65535	; 0xffff
  DMA1->HIFCR = 0xFFFFFFFFU;
  201dd2:	60fc      	str	r4, [r7, #12]
  201dd4:	f64b 797e 	movw	r9, #49022	; 0xbf7e
  DMA2->LIFCR = 0xFFFFFFFFU;
  201dd8:	6094      	str	r4, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
  201dda:	60d4      	str	r4, [r2, #12]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  201ddc:	f5a2 5230 	sub.w	r2, r2, #11264	; 0x2c00
  201de0:	4ec6      	ldr	r6, [pc, #792]	; (2020fc <main+0x5cc>)
  201de2:	6b12      	ldr	r2, [r2, #48]	; 0x30
  gpiop->AFRH    = config->afrh;
  201de4:	4fc6      	ldr	r7, [pc, #792]	; (202100 <main+0x5d0>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  201de6:	432a      	orrs	r2, r5
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  201de8:	f8df 8384 	ldr.w	r8, [pc, #900]	; 202170 <main+0x640>
  iqp->q_buffer  = bp;
  201dec:	f8df c384 	ldr.w	ip, [pc, #900]	; 202174 <main+0x644>
  201df0:	6332      	str	r2, [r6, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  201df2:	6d32      	ldr	r2, [r6, #80]	; 0x50
  sdp->vmt = &vmt;
  201df4:	f8df b380 	ldr.w	fp, [pc, #896]	; 202178 <main+0x648>
  201df8:	4315      	orrs	r5, r2
  gpiop->OTYPER  = config->otyper;
  201dfa:	4ac2      	ldr	r2, [pc, #776]	; (202104 <main+0x5d4>)
  oqp->q_buffer  = bp;
  201dfc:	f8df e37c 	ldr.w	lr, [pc, #892]	; 20217c <main+0x64c>
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  201e00:	6535      	str	r5, [r6, #80]	; 0x50
  gpiop->MODER   = config->moder;
  201e02:	f04f 6608 	mov.w	r6, #142606336	; 0x8800000
  gpiop->PUPDR   = config->pupdr;
  201e06:	4dc0      	ldr	r5, [pc, #768]	; (202108 <main+0x5d8>)
  gpiop->OTYPER  = config->otyper;
  201e08:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201e0a:	6094      	str	r4, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
  201e0c:	60d5      	str	r5, [r2, #12]
  gpiop->AFRL    = config->afrl;
  201e0e:	4dbf      	ldr	r5, [pc, #764]	; (20210c <main+0x5dc>)
  gpiop->ODR     = config->odr;
  201e10:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
  201e12:	6215      	str	r5, [r2, #32]
  gpiop->PUPDR   = config->pupdr;
  201e14:	f04f 3555 	mov.w	r5, #1431655765	; 0x55555555
  gpiop->AFRH    = config->afrh;
  201e18:	6257      	str	r7, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201e1a:	4fbd      	ldr	r7, [pc, #756]	; (202110 <main+0x5e0>)
  201e1c:	6017      	str	r7, [r2, #0]
  gpiop->OSPEEDR = config->ospeedr;
  201e1e:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
  gpiop->OTYPER  = config->otyper;
  201e22:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  201e26:	f8c2 4408 	str.w	r4, [r2, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  201e2a:	f104 448a 	add.w	r4, r4, #1157627904	; 0x45000000
  201e2e:	f104 1455 	add.w	r4, r4, #5570645	; 0x550055
  201e32:	f504 54a8 	add.w	r4, r4, #5376	; 0x1500
  201e36:	f8c2 440c 	str.w	r4, [r2, #1036]	; 0x40c
  gpiop->AFRH    = config->afrh;
  201e3a:	f44f 0430 	mov.w	r4, #11534336	; 0xb00000
  gpiop->ODR     = config->odr;
  201e3e:	f8c2 9414 	str.w	r9, [r2, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  201e42:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201e46:	f8c2 4424 	str.w	r4, [r2, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  201e4a:	4cb2      	ldr	r4, [pc, #712]	; (202114 <main+0x5e4>)
  gpiop->OSPEEDR = config->ospeedr;
  201e4c:	f8df 9330 	ldr.w	r9, [pc, #816]	; 202180 <main+0x650>
  gpiop->MODER   = config->moder;
  201e50:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  201e54:	4cb0      	ldr	r4, [pc, #704]	; (202118 <main+0x5e8>)
  201e56:	4ab1      	ldr	r2, [pc, #708]	; (20211c <main+0x5ec>)
  201e58:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201e5a:	60a7      	str	r7, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  201e5c:	4fb0      	ldr	r7, [pc, #704]	; (202120 <main+0x5f0>)
  201e5e:	60e7      	str	r7, [r4, #12]
  gpiop->AFRL    = config->afrl;
  201e60:	4fb0      	ldr	r7, [pc, #704]	; (202124 <main+0x5f4>)
  gpiop->ODR     = config->odr;
  201e62:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  201e64:	6227      	str	r7, [r4, #32]
  gpiop->MODER   = config->moder;
  201e66:	f640 2708 	movw	r7, #2568	; 0xa08
  gpiop->AFRH    = config->afrh;
  201e6a:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201e6c:	6027      	str	r7, [r4, #0]
  gpiop->OSPEEDR = config->ospeedr;
  201e6e:	f46f 1740 	mvn.w	r7, #3145728	; 0x300000
  gpiop->OTYPER  = config->otyper;
  201e72:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  201e76:	f8c4 7408 	str.w	r7, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  201e7a:	4fab      	ldr	r7, [pc, #684]	; (202128 <main+0x5f8>)
  201e7c:	f8c4 740c 	str.w	r7, [r4, #1036]	; 0x40c
  gpiop->AFRH    = config->afrh;
  201e80:	2777      	movs	r7, #119	; 0x77
  gpiop->ODR     = config->odr;
  201e82:	f8c4 0414 	str.w	r0, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  201e86:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201e8a:	f8c4 7424 	str.w	r7, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  201e8e:	f44f 2720 	mov.w	r7, #655360	; 0xa0000
  201e92:	f8c4 7400 	str.w	r7, [r4, #1024]	; 0x400
  201e96:	2701      	movs	r7, #1
  gpiop->OTYPER  = config->otyper;
  201e98:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  201e9c:	f8c4 9808 	str.w	r9, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  201ea0:	f8c4 580c 	str.w	r5, [r4, #2060]	; 0x80c
  gpiop->OTYPER  = config->otyper;
  201ea4:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 202184 <main+0x654>
  gpiop->ODR     = config->odr;
  201ea8:	f8c4 0814 	str.w	r0, [r4, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  201eac:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  201eb0:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  201eb4:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  201eb8:	4c9c      	ldr	r4, [pc, #624]	; (20212c <main+0x5fc>)
  gpiop->OTYPER  = config->otyper;
  201eba:	f8c9 3004 	str.w	r3, [r9, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201ebe:	f8c9 4008 	str.w	r4, [r9, #8]
  gpiop->OTYPER  = config->otyper;
  201ec2:	4c9b      	ldr	r4, [pc, #620]	; (202130 <main+0x600>)
  gpiop->PUPDR   = config->pupdr;
  201ec4:	f8c9 500c 	str.w	r5, [r9, #12]
  gpiop->ODR     = config->odr;
  201ec8:	f8c9 0014 	str.w	r0, [r9, #20]
  gpiop->AFRL    = config->afrl;
  201ecc:	f8c9 3020 	str.w	r3, [r9, #32]
  gpiop->AFRH    = config->afrh;
  201ed0:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201ed4:	f8c9 3000 	str.w	r3, [r9]
  gpiop->OSPEEDR = config->ospeedr;
  201ed8:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 202188 <main+0x658>
  gpiop->OTYPER  = config->otyper;
  201edc:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201ede:	f8c4 9008 	str.w	r9, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  201ee2:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 20218c <main+0x65c>
  201ee6:	f8c4 900c 	str.w	r9, [r4, #12]
  gpiop->AFRH    = config->afrh;
  201eea:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 202190 <main+0x660>
  gpiop->ODR     = config->odr;
  201eee:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  201ef0:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  201ef2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201ef6:	6026      	str	r6, [r4, #0]
  gpiop->OSPEEDR = config->ospeedr;
  201ef8:	260f      	movs	r6, #15
  gpiop->PUPDR   = config->pupdr;
  201efa:	f8df 9298 	ldr.w	r9, [pc, #664]	; 202194 <main+0x664>
  gpiop->OTYPER  = config->otyper;
  201efe:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  201f02:	f8c4 6408 	str.w	r6, [r4, #1032]	; 0x408
  tqp->next = (thread_t *)tqp;
  201f06:	f108 0618 	add.w	r6, r8, #24
  gpiop->PUPDR   = config->pupdr;
  201f0a:	f8c4 940c 	str.w	r9, [r4, #1036]	; 0x40c
  201f0e:	46d9      	mov	r9, fp
  gpiop->ODR     = config->odr;
  201f10:	f8c4 0414 	str.w	r0, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  201f14:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201f18:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  201f1c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  201f20:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  201f24:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201f26:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  201f28:	60e5      	str	r5, [r4, #12]
  adcp->config   = NULL;
  201f2a:	f8c8 3004 	str.w	r3, [r8, #4]
  gpiop->ODR     = config->odr;
  201f2e:	6160      	str	r0, [r4, #20]
  adcp->samples  = NULL;
  201f30:	f8c8 3008 	str.w	r3, [r8, #8]
  gpiop->AFRL    = config->afrl;
  201f34:	6223      	str	r3, [r4, #32]
  adcp->depth    = 0;
  201f36:	f8c8 300c 	str.w	r3, [r8, #12]
  gpiop->AFRH    = config->afrh;
  201f3a:	6263      	str	r3, [r4, #36]	; 0x24
  adcp->grpp     = NULL;
  201f3c:	f8c8 3010 	str.w	r3, [r8, #16]
  gpiop->MODER   = config->moder;
  201f40:	6023      	str	r3, [r4, #0]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
  201f42:	f8c8 3014 	str.w	r3, [r8, #20]
  gpiop->OTYPER  = config->otyper;
  201f46:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  201f4a:	f8c8 3020 	str.w	r3, [r8, #32]
  gpiop->OSPEEDR = config->ospeedr;
  201f4e:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
  201f52:	f8c8 6018 	str.w	r6, [r8, #24]
  gpiop->PUPDR   = config->pupdr;
  201f56:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
  tqp->prev = (thread_t *)tqp;
  201f5a:	f8c8 601c 	str.w	r6, [r8, #28]
  PWMD3.channels = STM32_TIM3_CHANNELS;
  201f5e:	f04f 0604 	mov.w	r6, #4
  gpiop->ODR     = config->odr;
  201f62:	f8c4 0414 	str.w	r0, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  201f66:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201f6a:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  201f6e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  201f72:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  201f76:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  201f7a:	f8c4 580c 	str.w	r5, [r4, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
  201f7e:	f8c4 0814 	str.w	r0, [r4, #2068]	; 0x814
  ADCD1.adc = ADC1;
  201f82:	486c      	ldr	r0, [pc, #432]	; (202134 <main+0x604>)
  gpiop->AFRL    = config->afrl;
  201f84:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  201f88:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  201f8c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201f90:	f04f 0460 	mov.w	r4, #96	; 0x60
  201f94:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  201f98:	4867      	ldr	r0, [pc, #412]	; (202138 <main+0x608>)
  adcp->state    = ADC_STOP;
  201f9a:	f888 7000 	strb.w	r7, [r8]
  201f9e:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
  201fa2:	4866      	ldr	r0, [pc, #408]	; (20213c <main+0x60c>)
  oqp->q_notify  = onfy;
  201fa4:	4d66      	ldr	r5, [pc, #408]	; (202140 <main+0x610>)
  201fa6:	f8c8 0030 	str.w	r0, [r8, #48]	; 0x30
  201faa:	4866      	ldr	r0, [pc, #408]	; (202144 <main+0x614>)
  201fac:	f880 4312 	strb.w	r4, [r0, #786]	; 0x312
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201fb0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
  201fb4:	f8c0 4180 	str.w	r4, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201fb8:	6004      	str	r4, [r0, #0]
  iqp->q_top     = bp + size;
  201fba:	f10c 0410 	add.w	r4, ip, #16
  oqp->q_notify  = onfy;
  201fbe:	f8cb 504c 	str.w	r5, [fp, #76]	; 0x4c
  iqp->q_top     = bp + size;
  201fc2:	f8cb 401c 	str.w	r4, [fp, #28]
  oqp->q_top     = bp + size;
  201fc6:	f10e 0410 	add.w	r4, lr, #16
  201fca:	4d5f      	ldr	r5, [pc, #380]	; (202148 <main+0x618>)
  201fcc:	f8cb 4040 	str.w	r4, [fp, #64]	; 0x40

#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7);
  iqObjectInit(&SD7.iqueue, sd_in_buf7, sizeof sd_in_buf7, NULL, &SD7);
  oqObjectInit(&SD7.oqueue, sd_out_buf7, sizeof sd_out_buf7, notify7, &SD7);
  SD7.usart = UART7;
  201fd0:	4c5e      	ldr	r4, [pc, #376]	; (20214c <main+0x61c>)
  201fd2:	f849 5b04 	str.w	r5, [r9], #4
  201fd6:	f8cb 4054 	str.w	r4, [fp, #84]	; 0x54
  GPTD4.tim = STM32_TIM4;
  201fda:	4d5d      	ldr	r5, [pc, #372]	; (202150 <main+0x620>)
  201fdc:	4c5d      	ldr	r4, [pc, #372]	; (202154 <main+0x624>)
  iqp->q_buffer  = bp;
  201fde:	f8cb c018 	str.w	ip, [fp, #24]
  iqp->q_rdptr   = bp;
  201fe2:	f8cb c024 	str.w	ip, [fp, #36]	; 0x24
  iqp->q_wrptr   = bp;
  201fe6:	f8cb c020 	str.w	ip, [fp, #32]
  tqp->next = (thread_t *)tqp;
  201fea:	f10b 0c0c 	add.w	ip, fp, #12
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  201fee:	f8cb 9004 	str.w	r9, [fp, #4]
  201ff2:	60e5      	str	r5, [r4, #12]
  PWMD3.tim = STM32_TIM3;
  201ff4:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 202198 <main+0x668>
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  201ff8:	4d57      	ldr	r5, [pc, #348]	; (202158 <main+0x628>)
  oqp->q_buffer  = bp;
  201ffa:	f8cb e03c 	str.w	lr, [fp, #60]	; 0x3c
  oqp->q_rdptr   = bp;
  201ffe:	f8cb e048 	str.w	lr, [fp, #72]	; 0x48
  oqp->q_wrptr   = bp;
  202002:	f8cb e044 	str.w	lr, [fp, #68]	; 0x44
  202006:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
  20200a:	f8cb c00c 	str.w	ip, [fp, #12]
  PWMD3.channels = STM32_TIM3_CHANNELS;
  20200e:	742e      	strb	r6, [r5, #16]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202010:	f44f 2680 	mov.w	r6, #262144	; 0x40000
  tqp->prev = (thread_t *)tqp;
  202014:	f8cb c010 	str.w	ip, [fp, #16]
  PWMD3.tim = STM32_TIM3;
  202018:	f8c5 9018 	str.w	r9, [r5, #24]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20201c:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  SD7.clock = STM32_UART7CLK;
  202020:	f8df c178 	ldr.w	ip, [pc, #376]	; 20219c <main+0x66c>
  sdp->state = SD_STOP;
  202024:	f88b 7008 	strb.w	r7, [fp, #8]
  iqp->q_counter = 0;
  202028:	f8cb 3014 	str.w	r3, [fp, #20]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  20202c:	7027      	strb	r7, [r4, #0]
  oqp->q_counter = size;
  20202e:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
  202032:	702f      	strb	r7, [r5, #0]
  tqp->next = (thread_t *)tqp;
  202034:	f8cb e030 	str.w	lr, [fp, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
  202038:	f8cb e034 	str.w	lr, [fp, #52]	; 0x34
  sdp->vmt = &vmt;
  20203c:	4696      	mov	lr, r2
  20203e:	f8cb c058 	str.w	ip, [fp, #88]	; 0x58
  iqp->q_notify  = infy;
  202042:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
  iqp->q_link    = link;
  202046:	f8cb b02c 	str.w	fp, [fp, #44]	; 0x2c
  oqp->q_link    = link;
  20204a:	f8cb b050 	str.w	fp, [fp, #80]	; 0x50
  gptp->config = NULL;
  20204e:	6063      	str	r3, [r4, #4]
  pwmp->config   = NULL;
  202050:	606b      	str	r3, [r5, #4]
  pwmp->enabled  = 0;
  202052:	60eb      	str	r3, [r5, #12]
  202054:	f880 9352 	strb.w	r9, [r0, #850]	; 0x352
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202058:	f8c0 6188 	str.w	r6, [r0, #392]	; 0x188
  sdp->state = SD_STOP;
  20205c:	7217      	strb	r7, [r2, #8]
  tqp->next = (thread_t *)tqp;
  20205e:	f102 070c 	add.w	r7, r2, #12
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202062:	6086      	str	r6, [r0, #8]
  sdp->vmt = &vmt;
  202064:	4e38      	ldr	r6, [pc, #224]	; (202148 <main+0x618>)
  iqp->q_link    = link;
  202066:	f8ce 202c 	str.w	r2, [lr, #44]	; 0x2c
  oqp->q_link    = link;
  20206a:	f8ce 2050 	str.w	r2, [lr, #80]	; 0x50
  20206e:	f84e 6b04 	str.w	r6, [lr], #4
  iqp->q_buffer  = bp;
  202072:	4e3a      	ldr	r6, [pc, #232]	; (20215c <main+0x62c>)
  iqp->q_counter = 0;
  202074:	6153      	str	r3, [r2, #20]
#if STM32_SERIAL_USE_UART8
  sdObjectInit(&SD8);
  iqObjectInit(&SD8.iqueue, sd_in_buf8, sizeof sd_in_buf8, NULL, &SD8);
  oqObjectInit(&SD8.oqueue, sd_out_buf8, sizeof sd_out_buf8, notify8, &SD8);
  SD8.usart = UART8;
  SD8.clock = STM32_UART8CLK;
  202076:	f8c2 c058 	str.w	ip, [r2, #88]	; 0x58
  20207a:	f102 0c30 	add.w	ip, r2, #48	; 0x30
  oqp->q_counter = size;
  20207e:	6391      	str	r1, [r2, #56]	; 0x38
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202080:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  iqp->q_notify  = infy;
  202084:	6293      	str	r3, [r2, #40]	; 0x28
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202086:	f880 9353 	strb.w	r9, [r0, #851]	; 0x353

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  20208a:	f04f 0980 	mov.w	r9, #128	; 0x80
  iqp->q_buffer  = bp;
  20208e:	6196      	str	r6, [r2, #24]
  iqp->q_rdptr   = bp;
  202090:	6256      	str	r6, [r2, #36]	; 0x24
  iqp->q_wrptr   = bp;
  202092:	6216      	str	r6, [r2, #32]
  iqp->q_top     = bp + size;
  202094:	3610      	adds	r6, #16
  202096:	f8c2 e004 	str.w	lr, [r2, #4]
  20209a:	61d6      	str	r6, [r2, #28]
  oqp->q_buffer  = bp;
  20209c:	4e30      	ldr	r6, [pc, #192]	; (202160 <main+0x630>)
  oqp->q_notify  = onfy;
  20209e:	f8df e100 	ldr.w	lr, [pc, #256]	; 2021a0 <main+0x670>
  oqp->q_buffer  = bp;
  2020a2:	63d6      	str	r6, [r2, #60]	; 0x3c
  oqp->q_rdptr   = bp;
  2020a4:	6496      	str	r6, [r2, #72]	; 0x48
  oqp->q_wrptr   = bp;
  2020a6:	6456      	str	r6, [r2, #68]	; 0x44
  oqp->q_top     = bp + size;
  2020a8:	3610      	adds	r6, #16
  2020aa:	6416      	str	r6, [r2, #64]	; 0x40
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  2020ac:	2607      	movs	r6, #7
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2020ae:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  oqp->q_notify  = onfy;
  2020b2:	f8c2 e04c 	str.w	lr, [r2, #76]	; 0x4c
  SD8.usart = UART8;
  2020b6:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 2021a4 <main+0x674>
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2020ba:	6081      	str	r1, [r0, #8]
  2020bc:	f8c2 e054 	str.w	lr, [r2, #84]	; 0x54
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  2020c0:	4928      	ldr	r1, [pc, #160]	; (202164 <main+0x634>)
  2020c2:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 2021a8 <main+0x678>
  2020c6:	60d7      	str	r7, [r2, #12]
  2020c8:	f8c1 e004 	str.w	lr, [r1, #4]
  tqp->prev = (thread_t *)tqp;
  2020cc:	6117      	str	r7, [r2, #16]
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  2020ce:	4f26      	ldr	r7, [pc, #152]	; (202168 <main+0x638>)
  SysTick->VAL = 0;
  2020d0:	608b      	str	r3, [r1, #8]
  tqp->next = (thread_t *)tqp;
  2020d2:	f8c2 c030 	str.w	ip, [r2, #48]	; 0x30
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  2020d6:	600e      	str	r6, [r1, #0]
  tqp->prev = (thread_t *)tqp;
  2020d8:	f8c2 c034 	str.w	ip, [r2, #52]	; 0x34
  2020dc:	2220      	movs	r2, #32
  2020de:	f887 9023 	strb.w	r9, [r7, #35]	; 0x23
  2020e2:	f382 8811 	msr	BASEPRI, r2
  if (gptp->state == GPT_STOP) {
  2020e6:	7822      	ldrb	r2, [r4, #0]
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
  2020e8:	4920      	ldr	r1, [pc, #128]	; (20216c <main+0x63c>)
  2020ea:	2a01      	cmp	r2, #1
  2020ec:	e05e      	b.n	2021ac <main+0x67c>
  2020ee:	bf00      	nop
  2020f0:	20000a90 	.word	0x20000a90
  2020f4:	40026000 	.word	0x40026000
  2020f8:	40026400 	.word	0x40026400
  2020fc:	40023800 	.word	0x40023800
  202100:	000aaa0a 	.word	0x000aaa0a
  202104:	40020000 	.word	0x40020000
  202108:	40005551 	.word	0x40005551
  20210c:	b0000bb0 	.word	0xb0000bb0
  202110:	2aae8028 	.word	0x2aae8028
  202114:	18004001 	.word	0x18004001
  202118:	40020800 	.word	0x40020800
  20211c:	200008c0 	.word	0x200008c0
  202120:	01555051 	.word	0x01555051
  202124:	00bb00b0 	.word	0x00bb00b0
  202128:	55505555 	.word	0x55505555
  20212c:	003fcfff 	.word	0x003fcfff
  202130:	40021800 	.word	0x40021800
  202134:	40012000 	.word	0x40012000
  202138:	0800280c 	.word	0x0800280c
  20213c:	00022c16 	.word	0x00022c16
  202140:	00200af1 	.word	0x00200af1
  202144:	e000e100 	.word	0xe000e100
  202148:	08002894 	.word	0x08002894
  20214c:	40007800 	.word	0x40007800
  202150:	40000800 	.word	0x40000800
  202154:	20000834 	.word	0x20000834
  202158:	20000844 	.word	0x20000844
  20215c:	20000b30 	.word	0x20000b30
  202160:	20000b50 	.word	0x20000b50
  202164:	e000e010 	.word	0xe000e010
  202168:	e000ed00 	.word	0xe000ed00
  20216c:	0800287c 	.word	0x0800287c
  202170:	20000800 	.word	0x20000800
  202174:	20000b20 	.word	0x20000b20
  202178:	20000860 	.word	0x20000860
  20217c:	20000b40 	.word	0x20000b40
  202180:	cffffff3 	.word	0xcffffff3
  202184:	40021400 	.word	0x40021400
  202188:	3cccf000 	.word	0x3cccf000
  20218c:	51155555 	.word	0x51155555
  202190:	00b0b000 	.word	0x00b0b000
  202194:	55555550 	.word	0x55555550
  202198:	40000400 	.word	0x40000400
  20219c:	0337f980 	.word	0x0337f980
  2021a0:	00200ae1 	.word	0x00200ae1
  2021a4:	40007c00 	.word	0x40007c00
  2021a8:	00034bbf 	.word	0x00034bbf
  2021ac:	6061      	str	r1, [r4, #4]
  2021ae:	f000 8189 	beq.w	2024c4 <main+0x994>
  2021b2:	68a3      	ldr	r3, [r4, #8]
  2021b4:	49b4      	ldr	r1, [pc, #720]	; (202488 <main+0x958>)
  2021b6:	095a      	lsrs	r2, r3, #5
  2021b8:	fba1 3202 	umull	r3, r2, r1, r2
  2021bc:	40f2      	lsrs	r2, r6
  2021be:	3a01      	subs	r2, #1
  2021c0:	b292      	uxth	r2, r2
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  2021c2:	68e3      	ldr	r3, [r4, #12]
  2021c4:	2100      	movs	r1, #0
  gptp->tim->CR2 = gptp->config->cr2;
  2021c6:	2020      	movs	r0, #32
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
  2021c8:	2602      	movs	r6, #2
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  2021ca:	6019      	str	r1, [r3, #0]
  gptp->tim->CR2 = gptp->config->cr2;
  2021cc:	6058      	str	r0, [r3, #4]
  2021ce:	7026      	strb	r6, [r4, #0]
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
  2021d0:	629a      	str	r2, [r3, #40]	; 0x28
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  2021d2:	6119      	str	r1, [r3, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  2021d4:	60d9      	str	r1, [r3, #12]
  2021d6:	f381 8811 	msr	BASEPRI, r1
  2021da:	f380 8811 	msr	BASEPRI, r0
  if (adcp->state == ADC_STOP) {
  2021de:	f898 3000 	ldrb.w	r3, [r8]
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
  2021e2:	f8c8 1004 	str.w	r1, [r8, #4]
  2021e6:	2b01      	cmp	r3, #1
  2021e8:	f000 818e 	beq.w	202508 <main+0x9d8>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
  2021ec:	2302      	movs	r3, #2
  2021ee:	2600      	movs	r6, #0
  2021f0:	f888 3000 	strb.w	r3, [r8]
  2021f4:	f386 8811 	msr	BASEPRI, r6
	    halInit();

	    gptStart(&GPTD4, &gpt4cfg1);
	        // ADC driver
	        adcStart(&ADCD1, NULL);
	        palSetLineMode( LINE_ADC123_IN3, PAL_MODE_INPUT_ANALOG );   // PA3
  2021f8:	2203      	movs	r2, #3
  2021fa:	2108      	movs	r1, #8
  2021fc:	48a3      	ldr	r0, [pc, #652]	; (20248c <main+0x95c>)
  2021fe:	f7fe feb7 	bl	200f70 <_pal_lld_setgroupmode>
  202202:	f04f 0e20 	mov.w	lr, #32
  202206:	f38e 8811 	msr	BASEPRI, lr
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
  20220a:	2003      	movs	r0, #3
  mode = adcp->dmamode;
  20220c:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  202210:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
  adcp->depth    = depth;
  202214:	2101      	movs	r1, #1
  adcp->grpp     = grpp;
  202216:	4f9e      	ldr	r7, [pc, #632]	; (202490 <main+0x960>)
    mode |= STM32_DMA_CR_CIRC;
  202218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  adcp->state    = ADC_ACTIVE;
  20221c:	f888 0000 	strb.w	r0, [r8]
  adcp->adc->SMPR1 = grpp->smpr1;
  202220:	f04f 0c06 	mov.w	ip, #6
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  202224:	6812      	ldr	r2, [r2, #0]
  adcp->adc->SMPR2 = grpp->smpr2;
  202226:	f44f 6940 	mov.w	r9, #3072	; 0xc00
  adcp->grpp     = grpp;
  20222a:	f8c8 7010 	str.w	r7, [r8, #16]
  adcp->samples  = samples;
  20222e:	4f99      	ldr	r7, [pc, #612]	; (202494 <main+0x964>)
  adcp->depth    = depth;
  202230:	f8c8 100c 	str.w	r1, [r8, #12]
  adcp->samples  = samples;
  202234:	f8c8 7008 	str.w	r7, [r8, #8]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  202238:	60d7      	str	r7, [r2, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
  20223a:	6051      	str	r1, [r2, #4]
  dmaStreamSetMode(adcp->dmastp, mode);
  20223c:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(adcp->dmastp);
  20223e:	6817      	ldr	r7, [r2, #0]
  adcp->adc->SR    = 0;
  202240:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
  dmaStreamEnable(adcp->dmastp);
  202244:	430f      	orrs	r7, r1
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
  202246:	f8df 8278 	ldr.w	r8, [pc, #632]	; 2024c0 <main+0x990>
  dmaStreamEnable(adcp->dmastp);
  20224a:	6017      	str	r7, [r2, #0]
    adcp->adc->CR2 = cr2;
  20224c:	4a92      	ldr	r2, [pc, #584]	; (202498 <main+0x968>)
  adcp->adc->SR    = 0;
  20224e:	601e      	str	r6, [r3, #0]
  adcp->adc->SMPR1 = grpp->smpr1;
  202250:	f8c3 c00c 	str.w	ip, [r3, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
  202254:	f8c3 9010 	str.w	r9, [r3, #16]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
  202258:	62de      	str	r6, [r3, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
  20225a:	631e      	str	r6, [r3, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
  20225c:	6358      	str	r0, [r3, #52]	; 0x34
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
  20225e:	f8c3 8004 	str.w	r8, [r3, #4]
    adcp->adc->CR2 = cr2;
  202262:	609a      	str	r2, [r3, #8]
  202264:	f386 8811 	msr	BASEPRI, r6
  202268:	f38e 8811 	msr	BASEPRI, lr
  if (NULL != gptp->config->callback)
  20226c:	6863      	ldr	r3, [r4, #4]
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  20226e:	2764      	movs	r7, #100	; 0x64
  202270:	68e2      	ldr	r2, [r4, #12]
  if (NULL != gptp->config->callback)
  202272:	685b      	ldr	r3, [r3, #4]
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
  202274:	7020      	strb	r0, [r4, #0]
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  202276:	62d7      	str	r7, [r2, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  202278:	6151      	str	r1, [r2, #20]
  gptp->tim->CNT = 0;                           /* Reset counter.           */
  20227a:	6256      	str	r6, [r2, #36]	; 0x24
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  20227c:	6116      	str	r6, [r2, #16]
  if (NULL != gptp->config->callback)
  20227e:	b113      	cbz	r3, 202286 <main+0x756>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
  202280:	68d3      	ldr	r3, [r2, #12]
  202282:	430b      	orrs	r3, r1
  202284:	60d3      	str	r3, [r2, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  202286:	2185      	movs	r1, #133	; 0x85
  202288:	2300      	movs	r3, #0
  20228a:	6011      	str	r1, [r2, #0]
  20228c:	f383 8811 	msr	BASEPRI, r3
  202290:	2320      	movs	r3, #32
  202292:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  202296:	f89b 3008 	ldrb.w	r3, [fp, #8]
  20229a:	2b01      	cmp	r3, #1
  20229c:	f000 812e 	beq.w	2024fc <main+0x9cc>
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2022a0:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  2022a4:	2640      	movs	r6, #64	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2022a6:	497d      	ldr	r1, [pc, #500]	; (20249c <main+0x96c>)
  u->CR3 = config->cr3 | USART_CR3_EIE;
  2022a8:	2401      	movs	r4, #1
  USART_TypeDef *u = sdp->usart;
  2022aa:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  2022ae:	f240 172d 	movw	r7, #301	; 0x12d
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2022b2:	fba1 1303 	umull	r1, r3, r1, r3
  sdp->state = SD_READY;
  2022b6:	2002      	movs	r0, #2
  u->ICR = 0xFFFFFFFFU;
  2022b8:	f04f 31ff 	mov.w	r1, #4294967295
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  2022bc:	0c1b      	lsrs	r3, r3, #16
  2022be:	60d3      	str	r3, [r2, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  2022c0:	6056      	str	r6, [r2, #4]
  2022c2:	2600      	movs	r6, #0
  u->CR3 = config->cr3 | USART_CR3_EIE;
  2022c4:	6094      	str	r4, [r2, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  2022c6:	6017      	str	r7, [r2, #0]
  u->ICR = 0xFFFFFFFFU;
  2022c8:	6211      	str	r1, [r2, #32]
  2022ca:	f88b 0008 	strb.w	r0, [fp, #8]
    sdp->rxmask = 0xFF;
  2022ce:	f88b 105c 	strb.w	r1, [fp, #92]	; 0x5c
  2022d2:	f386 8811 	msr	BASEPRI, r6

	        adcStartConversion(&ADCD1, &adcgrpcfg1, samples1, ADC1_BUF_DEPTH);
	        gptStartContinuous(&GPTD4, gpt4cfg1.frequency/1000);

	    sdStart( &SD7, &sdcfg );
	    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );    // TX
  2022d6:	f240 4202 	movw	r2, #1026	; 0x402
  2022da:	f44f 7180 	mov.w	r1, #256	; 0x100
  2022de:	4870      	ldr	r0, [pc, #448]	; (2024a0 <main+0x970>)
  2022e0:	f7fe fe46 	bl	200f70 <_pal_lld_setgroupmode>
	    palSetPadMode( GPIOE, 7, PAL_MODE_ALTERNATE(8) );    // RX
  2022e4:	f240 4202 	movw	r2, #1026	; 0x402
  2022e8:	2180      	movs	r1, #128	; 0x80
  2022ea:	486d      	ldr	r0, [pc, #436]	; (2024a0 <main+0x970>)
  2022ec:	f7fe fe40 	bl	200f70 <_pal_lld_setgroupmode>


	    palSetLineMode( PAL_LINE( GPIOB, 0 ), PAL_MODE_ALTERNATE(2) );
  2022f0:	4621      	mov	r1, r4
  2022f2:	f44f 7281 	mov.w	r2, #258	; 0x102
  2022f6:	486b      	ldr	r0, [pc, #428]	; (2024a4 <main+0x974>)
  2022f8:	f7fe fe3a 	bl	200f70 <_pal_lld_setgroupmode>
  2022fc:	2320      	movs	r3, #32
  2022fe:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  202302:	4c69      	ldr	r4, [pc, #420]	; (2024a8 <main+0x978>)
  if (pwmp->state == PWM_STOP) {
  202304:	782b      	ldrb	r3, [r5, #0]
  pwmp->period = config->period;
  202306:	6860      	ldr	r0, [r4, #4]
  202308:	2b01      	cmp	r3, #1
  pwmp->config = config;
  20230a:	606c      	str	r4, [r5, #4]
  pwmp->period = config->period;
  20230c:	60a8      	str	r0, [r5, #8]
  20230e:	f000 8097 	beq.w	202440 <main+0x910>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
  202312:	69ab      	ldr	r3, [r5, #24]
  202314:	601e      	str	r6, [r3, #0]
    if (pwmp->channels > 4) {
  202316:	7c2a      	ldrb	r2, [r5, #16]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
  202318:	635e      	str	r6, [r3, #52]	; 0x34
    if (pwmp->channels > 4) {
  20231a:	2a04      	cmp	r2, #4
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
  20231c:	639e      	str	r6, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
  20231e:	63de      	str	r6, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
  202320:	641e      	str	r6, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
  202322:	d901      	bls.n	202328 <main+0x7f8>
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
  202324:	659e      	str	r6, [r3, #88]	; 0x58
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
  202326:	65de      	str	r6, [r3, #92]	; 0x5c
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  202328:	2100      	movs	r1, #0
  20232a:	696a      	ldr	r2, [r5, #20]
  20232c:	6259      	str	r1, [r3, #36]	; 0x24
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  20232e:	6821      	ldr	r1, [r4, #0]
  pwmp->tim->ARR  = pwmp->period - 1;
  202330:	1e46      	subs	r6, r0, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  202332:	68e0      	ldr	r0, [r4, #12]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  202334:	fbb2 f1f1 	udiv	r1, r2, r1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  202338:	f000 020f 	and.w	r2, r0, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  20233c:	3901      	subs	r1, #1
  pwmp->tim->CR2  = pwmp->config->cr2;
  20233e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  202340:	2a01      	cmp	r2, #1
  pwmp->tim->PSC  = psc;
  202342:	6299      	str	r1, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
  202344:	62de      	str	r6, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
  202346:	6058      	str	r0, [r3, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  202348:	d003      	beq.n	202352 <main+0x822>
  ccer = 0;
  20234a:	2a02      	cmp	r2, #2
  20234c:	bf0c      	ite	eq
  20234e:	2203      	moveq	r2, #3
  202350:	2200      	movne	r2, #0
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  202352:	6961      	ldr	r1, [r4, #20]
  202354:	f001 010f 	and.w	r1, r1, #15
  202358:	2901      	cmp	r1, #1
  20235a:	d003      	beq.n	202364 <main+0x834>
  20235c:	2902      	cmp	r1, #2
  20235e:	d103      	bne.n	202368 <main+0x838>
    ccer |= STM32_TIM_CCER_CC2P;
  202360:	f042 0220 	orr.w	r2, r2, #32
    ccer |= STM32_TIM_CCER_CC2E;
  202364:	f042 0210 	orr.w	r2, r2, #16
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  202368:	69e1      	ldr	r1, [r4, #28]
  20236a:	f001 010f 	and.w	r1, r1, #15
  20236e:	2901      	cmp	r1, #1
  202370:	d003      	beq.n	20237a <main+0x84a>
  202372:	2902      	cmp	r1, #2
  202374:	d103      	bne.n	20237e <main+0x84e>
    ccer |= STM32_TIM_CCER_CC3P;
  202376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
  20237a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
  20237e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  202380:	f001 010f 	and.w	r1, r1, #15
  202384:	2901      	cmp	r1, #1
  202386:	d003      	beq.n	202390 <main+0x860>
  202388:	2902      	cmp	r1, #2
  20238a:	d103      	bne.n	202394 <main+0x864>
    ccer |= STM32_TIM_CCER_CC4P;
  20238c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
  202390:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  202394:	6c20      	ldr	r0, [r4, #64]	; 0x40
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  202396:	2100      	movs	r1, #0
  pwmp->tim->CCER  = ccer;
  202398:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  20239a:	2601      	movs	r6, #1
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  20239c:	2485      	movs	r4, #133	; 0x85
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  20239e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
  2023a2:	2202      	movs	r2, #2
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  2023a4:	615e      	str	r6, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  2023a6:	6119      	str	r1, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  2023a8:	60d8      	str	r0, [r3, #12]
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  2023aa:	601c      	str	r4, [r3, #0]
  pwmp->enabled = 0;
  2023ac:	60e9      	str	r1, [r5, #12]
  pwmp->state = PWM_READY;
  2023ae:	702a      	strb	r2, [r5, #0]
  2023b0:	f381 8811 	msr	BASEPRI, r1
  2023b4:	2320      	movs	r3, #32
  2023b6:	f383 8811 	msr	BASEPRI, r3
  2023ba:	f8ba 4026 	ldrh.w	r4, [sl, #38]	; 0x26
  2023be:	b2a4      	uxth	r4, r4
  2023c0:	f381 8811 	msr	BASEPRI, r1
	    systime_t prev = chVTGetSystemTime(); // Current system time.
	    int duty_cycle = 0;

	    while (true)
	    {
	    	duty_cycle = 2.44*samples1[0];
  2023c4:	a72e      	add	r7, pc, #184	; (adr r7, 202480 <main+0x950>)
  2023c6:	e9d7 6700 	ldrd	r6, r7, [r7]
  2023ca:	4689      	mov	r9, r1
	    	    	/*if( duty_cycle >= 10000 )
	    	    	{
	    	    		duty_cycle = 0;
	    	    	}*/
	    	    	pwmEnableChannel( &PWMD3, 2, duty_cycle );
	        sdWrite(&SD7,(uint8_t *)&samples1[0], 2);
  2023cc:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 202494 <main+0x964>
  2023d0:	e9cd 6700 	strd	r6, r7, [sp]
	    	duty_cycle = 2.44*samples1[0];
  2023d4:	4b2f      	ldr	r3, [pc, #188]	; (202494 <main+0x964>)
  2023d6:	2720      	movs	r7, #32
  2023d8:	8818      	ldrh	r0, [r3, #0]
  2023da:	f7fe f8e1 	bl	2005a0 <__aeabi_i2d>
  2023de:	e9dd 2300 	ldrd	r2, r3, [sp]
  2023e2:	f7fe f943 	bl	20066c <__aeabi_dmul>
  2023e6:	f7fe fb53 	bl	200a90 <__aeabi_d2iz>
  2023ea:	f387 8811 	msr	BASEPRI, r7

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
  2023ee:	68eb      	ldr	r3, [r5, #12]
    pwmp->tim->CCR[channel] = width;
  2023f0:	69aa      	ldr	r2, [r5, #24]
  2023f2:	f043 0304 	orr.w	r3, r3, #4
  2023f6:	63d0      	str	r0, [r2, #60]	; 0x3c
  2023f8:	60eb      	str	r3, [r5, #12]
  2023fa:	f389 8811 	msr	BASEPRI, r9
	    	//chprintf(((BaseSequentialStream *)&SD7), "ADCvalue=%d\tDuty_Cycle=%d\n\r", samples1[0],duty_cycle);
	    	prev = chThdSleepUntilWindowed(prev, prev + MS2ST(10));
  2023fe:	f104 080a 	add.w	r8, r4, #10
	        sdWrite(&SD7,(uint8_t *)&samples1[0], 2);
  202402:	f64f 73ff 	movw	r3, #65535	; 0xffff
  202406:	4659      	mov	r1, fp
  202408:	2202      	movs	r2, #2
  20240a:	4828      	ldr	r0, [pc, #160]	; (2024ac <main+0x97c>)
	    	prev = chThdSleepUntilWindowed(prev, prev + MS2ST(10));
  20240c:	fa1f f888 	uxth.w	r8, r8
	        sdWrite(&SD7,(uint8_t *)&samples1[0], 2);
  202410:	f7ff f98e 	bl	201730 <oqWriteTimeout>
  202414:	f387 8811 	msr	BASEPRI, r7
  202418:	f8ba 1026 	ldrh.w	r1, [sl, #38]	; 0x26
  20241c:	b289      	uxth	r1, r1
  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
  20241e:	1b0c      	subs	r4, r1, r4
  if (chVTIsTimeWithinX(time, prev, next)) {
  202420:	b2a4      	uxth	r4, r4
  202422:	2c09      	cmp	r4, #9
  202424:	d805      	bhi.n	202432 <main+0x902>
    chThdSleepS(next - time);
  202426:	eba8 0101 	sub.w	r1, r8, r1
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  20242a:	2008      	movs	r0, #8
  20242c:	b289      	uxth	r1, r1
  20242e:	f7ff f91f 	bl	201670 <chSchGoSleepTimeoutS>
  202432:	f389 8811 	msr	BASEPRI, r9
	    	prev = chThdSleepUntilWindowed(prev, prev + MS2ST(10));
  202436:	4644      	mov	r4, r8
  202438:	e7cc      	b.n	2023d4 <main+0x8a4>
  tp->state = CH_STATE_READY;
  20243a:	f882 1020 	strb.w	r1, [r2, #32]
  20243e:	e7fe      	b.n	20243e <main+0x90e>
      rccEnableTIM3(FALSE);
  202440:	4b1b      	ldr	r3, [pc, #108]	; (2024b0 <main+0x980>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202442:	f04f 5e00 	mov.w	lr, #536870912	; 0x20000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202446:	f04f 0c70 	mov.w	ip, #112	; 0x70
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  20244a:	f646 0768 	movw	r7, #26728	; 0x6868
      rccEnableTIM3(FALSE);
  20244e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  202450:	f042 0202 	orr.w	r2, r2, #2
  202454:	641a      	str	r2, [r3, #64]	; 0x40
      rccResetTIM3();
  202456:	6a19      	ldr	r1, [r3, #32]
  202458:	4a16      	ldr	r2, [pc, #88]	; (2024b4 <main+0x984>)
  20245a:	f041 0102 	orr.w	r1, r1, #2
  20245e:	6219      	str	r1, [r3, #32]
  202460:	621e      	str	r6, [r3, #32]
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  202462:	4915      	ldr	r1, [pc, #84]	; (2024b8 <main+0x988>)
  202464:	f882 c31d 	strb.w	ip, [r2, #797]	; 0x31d
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  202468:	69ab      	ldr	r3, [r5, #24]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20246a:	f8c2 e180 	str.w	lr, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20246e:	f8c2 e000 	str.w	lr, [r2]
      pwmp->clock = STM32_TIMCLK1;
  202472:	4a12      	ldr	r2, [pc, #72]	; (2024bc <main+0x98c>)
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  202474:	619f      	str	r7, [r3, #24]
      pwmp->clock = STM32_TIMCLK1;
  202476:	616a      	str	r2, [r5, #20]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
  202478:	61df      	str	r7, [r3, #28]
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  20247a:	6559      	str	r1, [r3, #84]	; 0x54
  20247c:	e757      	b.n	20232e <main+0x7fe>
  20247e:	bf00      	nop
  202480:	b851eb85 	.word	0xb851eb85
  202484:	4003851e 	.word	0x4003851e
  202488:	0a7c5ac5 	.word	0x0a7c5ac5
  20248c:	40020000 	.word	0x40020000
  202490:	0800283c 	.word	0x0800283c
  202494:	20000b1c 	.word	0x20000b1c
  202498:	1c000301 	.word	0x1c000301
  20249c:	91a2b3c5 	.word	0x91a2b3c5
  2024a0:	40021000 	.word	0x40021000
  2024a4:	40020400 	.word	0x40020400
  2024a8:	20020000 	.word	0x20020000
  2024ac:	20000890 	.word	0x20000890
  2024b0:	40023800 	.word	0x40023800
  2024b4:	e000e100 	.word	0xe000e100
  2024b8:	01016868 	.word	0x01016868
  2024bc:	066ff300 	.word	0x066ff300
  2024c0:	04000100 	.word	0x04000100
      rccEnableTIM4(FALSE);
  2024c4:	4a43      	ldr	r2, [pc, #268]	; (2025d4 <main+0xaa4>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2024c6:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  2024ca:	4942      	ldr	r1, [pc, #264]	; (2025d4 <main+0xaa4>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2024cc:	f04f 0e70 	mov.w	lr, #112	; 0x70
  2024d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
      rccResetTIM4();
  2024d2:	4e40      	ldr	r6, [pc, #256]	; (2025d4 <main+0xaa4>)
      rccEnableTIM4(FALSE);
  2024d4:	f042 0204 	orr.w	r2, r2, #4
      gptp->clock = STM32_TIMCLK1;
  2024d8:	f8df c114 	ldr.w	ip, [pc, #276]	; 2025f0 <main+0xac0>
      rccEnableTIM4(FALSE);
  2024dc:	640a      	str	r2, [r1, #64]	; 0x40
      gptp->clock = STM32_TIMCLK1;
  2024de:	f240 4237 	movw	r2, #1079	; 0x437
      rccResetTIM4();
  2024e2:	6a09      	ldr	r1, [r1, #32]
  2024e4:	f041 0104 	orr.w	r1, r1, #4
  2024e8:	6231      	str	r1, [r6, #32]
      gptp->clock = STM32_TIMCLK1;
  2024ea:	f8c4 c008 	str.w	ip, [r4, #8]
      rccResetTIM4();
  2024ee:	6233      	str	r3, [r6, #32]
  2024f0:	f880 e31e 	strb.w	lr, [r0, #798]	; 0x31e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2024f4:	f8c0 7180 	str.w	r7, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2024f8:	6007      	str	r7, [r0, #0]
  2024fa:	e662      	b.n	2021c2 <main+0x692>
      rccEnableUSART6(FALSE);
    }
#endif
#if STM32_SERIAL_USE_UART7
    if (&SD7 == sdp) {
      rccEnableUART7(FALSE);
  2024fc:	4a35      	ldr	r2, [pc, #212]	; (2025d4 <main+0xaa4>)
  2024fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
  202500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  202504:	6413      	str	r3, [r2, #64]	; 0x40
  202506:	e6cb      	b.n	2022a0 <main+0x770>
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
  202508:	4a33      	ldr	r2, [pc, #204]	; (2025d8 <main+0xaa8>)
      b = dmaStreamAllocate(adcp->dmastp,
  20250a:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
  20250e:	6810      	ldr	r0, [r2, #0]
  202510:	7a4a      	ldrb	r2, [r1, #9]
  202512:	4093      	lsls	r3, r2
  202514:	4203      	tst	r3, r0
  202516:	d145      	bne.n	2025a4 <main+0xa74>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
  202518:	4303      	orrs	r3, r0
  20251a:	4f2f      	ldr	r7, [pc, #188]	; (2025d8 <main+0xaa8>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  20251c:	482f      	ldr	r0, [pc, #188]	; (2025dc <main+0xaac>)
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  20251e:	4e30      	ldr	r6, [pc, #192]	; (2025e0 <main+0xab0>)

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
  202520:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  202524:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);
  202528:	603b      	str	r3, [r7, #0]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  20252a:	4f2c      	ldr	r7, [pc, #176]	; (2025dc <main+0xaac>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  20252c:	f8c0 8004 	str.w	r8, [r0, #4]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  202530:	f847 6032 	str.w	r6, [r7, r2, lsl #3]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
  202534:	d004      	beq.n	202540 <main+0xa10>
    rccEnableDMA1(false);
  202536:	4827      	ldr	r0, [pc, #156]	; (2025d4 <main+0xaa4>)
  202538:	6b02      	ldr	r2, [r0, #48]	; 0x30
  20253a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  20253e:	6302      	str	r2, [r0, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
  202540:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
  202544:	d004      	beq.n	202550 <main+0xa20>
    rccEnableDMA2(false);
  202546:	4a23      	ldr	r2, [pc, #140]	; (2025d4 <main+0xaa4>)
  202548:	6b13      	ldr	r3, [r2, #48]	; 0x30
  20254a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  20254e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  202550:	680a      	ldr	r2, [r1, #0]
  202552:	6813      	ldr	r3, [r2, #0]
  202554:	f023 031f 	bic.w	r3, r3, #31
  202558:	6013      	str	r3, [r2, #0]
  20255a:	6816      	ldr	r6, [r2, #0]
  20255c:	f016 0601 	ands.w	r6, r6, #1
  202560:	d1fb      	bne.n	20255a <main+0xa2a>
  202562:	7a08      	ldrb	r0, [r1, #8]
  202564:	f04f 0e3d 	mov.w	lr, #61	; 0x3d
  202568:	684b      	ldr	r3, [r1, #4]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
  20256a:	f04f 0c21 	mov.w	ip, #33	; 0x21
  dmaStreamDisable(dmastp);
  20256e:	fa0e fe00 	lsl.w	lr, lr, r0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202572:	4f1c      	ldr	r7, [pc, #112]	; (2025e4 <main+0xab4>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202574:	2001      	movs	r0, #1
  202576:	f8c3 e000 	str.w	lr, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20257a:	f04f 0e60 	mov.w	lr, #96	; 0x60
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  20257e:	6016      	str	r6, [r2, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
  202580:	f8c2 c014 	str.w	ip, [r2, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
  202584:	7a8b      	ldrb	r3, [r1, #10]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202586:	095e      	lsrs	r6, r3, #5
  202588:	f003 011f 	and.w	r1, r3, #31
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20258c:	443b      	add	r3, r7
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20258e:	fa00 f101 	lsl.w	r1, r0, r1
  202592:	eb07 0086 	add.w	r0, r7, r6, lsl #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202596:	f883 e300 	strb.w	lr, [r3, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20259a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20259e:	f847 1026 	str.w	r1, [r7, r6, lsl #2]
  2025a2:	e000      	b.n	2025a6 <main+0xa76>
  2025a4:	680a      	ldr	r2, [r1, #0]
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
  2025a6:	4b10      	ldr	r3, [pc, #64]	; (2025e8 <main+0xab8>)
    adcp->adc->CR1 = 0;
  2025a8:	2100      	movs	r1, #0
      rccEnableADC1(FALSE);
  2025aa:	4f0a      	ldr	r7, [pc, #40]	; (2025d4 <main+0xaa4>)
    adcp->adc->CR2 = ADC_CR2_ADON;
  2025ac:	2601      	movs	r6, #1
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
  2025ae:	6093      	str	r3, [r2, #8]
      rccEnableADC1(FALSE);
  2025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
  2025b2:	480e      	ldr	r0, [pc, #56]	; (2025ec <main+0xabc>)
      rccEnableADC1(FALSE);
  2025b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    adcp->adc->CR1 = 0;
  2025b8:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
      rccEnableADC1(FALSE);
  2025bc:	647b      	str	r3, [r7, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
  2025be:	6843      	ldr	r3, [r0, #4]
  2025c0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
  2025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  2025c8:	6043      	str	r3, [r0, #4]
    adcp->adc->CR1 = 0;
  2025ca:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
  2025cc:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
  2025ce:	6096      	str	r6, [r2, #8]
  2025d0:	e60c      	b.n	2021ec <main+0x6bc>
  2025d2:	bf00      	nop
  2025d4:	40023800 	.word	0x40023800
  2025d8:	20000b10 	.word	0x20000b10
  2025dc:	20000a90 	.word	0x20000a90
  2025e0:	00200c11 	.word	0x00200c11
  2025e4:	e000e100 	.word	0xe000e100
  2025e8:	4001204c 	.word	0x4001204c
  2025ec:	40012300 	.word	0x40012300
  2025f0:	066ff300 	.word	0x066ff300
	...

00202600 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  202600:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  202602:	4b33      	ldr	r3, [pc, #204]	; (2026d0 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  202604:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  202608:	4a32      	ldr	r2, [pc, #200]	; (2026d4 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  20260a:	4c33      	ldr	r4, [pc, #204]	; (2026d8 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  20260c:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  20260e:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  202610:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  202612:	681a      	ldr	r2, [r3, #0]
  202614:	f042 0201 	orr.w	r2, r2, #1
  202618:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  20261a:	680b      	ldr	r3, [r1, #0]
  20261c:	079b      	lsls	r3, r3, #30
  20261e:	d5fc      	bpl.n	20261a <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  202620:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  202622:	4a2b      	ldr	r2, [pc, #172]	; (2026d0 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  202624:	f023 0303 	bic.w	r3, r3, #3
  202628:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  20262a:	688b      	ldr	r3, [r1, #8]
  20262c:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  20262e:	6893      	ldr	r3, [r2, #8]
  202630:	f013 030c 	ands.w	r3, r3, #12
  202634:	d1fb      	bne.n	20262e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  202636:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  202638:	4925      	ldr	r1, [pc, #148]	; (2026d0 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  20263a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  20263e:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  202640:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  202642:	6813      	ldr	r3, [r2, #0]
  202644:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  202648:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  20264a:	680b      	ldr	r3, [r1, #0]
  20264c:	039d      	lsls	r5, r3, #14
  20264e:	d5fc      	bpl.n	20264a <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  202650:	4b22      	ldr	r3, [pc, #136]	; (2026dc <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  202652:	4820      	ldr	r0, [pc, #128]	; (2026d4 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  202654:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  202656:	680b      	ldr	r3, [r1, #0]
  202658:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  20265c:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  20265e:	6843      	ldr	r3, [r0, #4]
  202660:	045c      	lsls	r4, r3, #17
  202662:	d5fc      	bpl.n	20265e <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  202664:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  202666:	4a1b      	ldr	r2, [pc, #108]	; (2026d4 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  202668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20266c:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  20266e:	6853      	ldr	r3, [r2, #4]
  202670:	03d9      	lsls	r1, r3, #15
  202672:	d5fc      	bpl.n	20266e <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  202674:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  202676:	4917      	ldr	r1, [pc, #92]	; (2026d4 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  202678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  20267c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  20267e:	684b      	ldr	r3, [r1, #4]
  202680:	039a      	lsls	r2, r3, #14
  202682:	d5fc      	bpl.n	20267e <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  202684:	4a12      	ldr	r2, [pc, #72]	; (2026d0 <__early_init+0xd0>)
  202686:	6813      	ldr	r3, [r2, #0]
  202688:	019b      	lsls	r3, r3, #6
  20268a:	d5fc      	bpl.n	202686 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  20268c:	4b14      	ldr	r3, [pc, #80]	; (2026e0 <__early_init+0xe0>)
  20268e:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  202692:	4d14      	ldr	r5, [pc, #80]	; (2026e4 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  202694:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  202698:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  20269a:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  20269c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  2026a0:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  2026a4:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  2026a6:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  2026a8:	4909      	ldr	r1, [pc, #36]	; (2026d0 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  2026aa:	f043 0302 	orr.w	r3, r3, #2
  2026ae:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  2026b0:	688b      	ldr	r3, [r1, #8]
  2026b2:	f003 030c 	and.w	r3, r3, #12
  2026b6:	2b08      	cmp	r3, #8
  2026b8:	d1fa      	bne.n	2026b0 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  2026ba:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  2026bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  2026c0:	644b      	str	r3, [r1, #68]	; 0x44
  2026c2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  2026c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  2026c8:	bc30      	pop	{r4, r5}
  2026ca:	664b      	str	r3, [r1, #100]	; 0x64
  2026cc:	4770      	bx	lr
  2026ce:	bf00      	nop
  2026d0:	40023800 	.word	0x40023800
  2026d4:	40007000 	.word	0x40007000
  2026d8:	10000400 	.word	0x10000400
  2026dc:	09406c08 	.word	0x09406c08
  2026e0:	40023c00 	.word	0x40023c00
  2026e4:	30999400 	.word	0x30999400
	...

002026f0 <chTMStartMeasurementX.constprop.28>:
  return DWT->CYCCNT;
  2026f0:	4b01      	ldr	r3, [pc, #4]	; (2026f8 <chTMStartMeasurementX.constprop.28+0x8>)
  2026f2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
  2026f4:	6083      	str	r3, [r0, #8]
  2026f6:	4770      	bx	lr
  2026f8:	e0001000 	.word	0xe0001000
